{"pages":[{"title":"","date":"2020-01-19T17:27:54.859Z","path":"404.html","text":"404 | JerryC !(function(e, a, t, n, g, c, o) { (e.GoogleAnalyticsObject = g), (e.ga = e.ga || function() { (e.ga.q = e.ga.q || []).push(arguments); }), (e.ga.l = 1 * new Date()), (c = a.createElement(t)), (o = a.getElementsByTagName(t)[0]), (c.async = 1), (c.src = \"https://www.google-analytics.com/analytics.js\"), o.parentNode.insertBefore(c, o); })(window, document, \"script\", 0, \"ga\"), ga(\"create\", \"UA-120653953-1\", \"auto\"), ga(\"send\", \"pageview\"); @import url(\"https://fonts.googleapis.com/css?family=Titillium+Web\"); @-moz-keyframes rocket-movement { 100% { -moz-transform: translate(1200px, -600px); } } @-webkit-keyframes rocket-movement { 100% { -webkit-transform: translate(1200px, -600px); } } @keyframes rocket-movement { 100% { transform: translate(1200px, -600px); } } @-moz-keyframes spin-earth { 100% { -moz-transform: rotate(-360deg); transition: transform 20s; } } @-webkit-keyframes spin-earth { 100% { -webkit-transform: rotate(-360deg); transition: transform 20s; } } @keyframes spin-earth { 100% { -webkit-transform: rotate(-360deg); transform: rotate(-360deg); transition: transform 20s; } } @-moz-keyframes move-astronaut { 100% { -moz-transform: translate(-160px, -160px); } } @-webkit-keyframes move-astronaut { 100% { -webkit-transform: translate(-160px, -160px); } } @keyframes move-astronaut { 100% { -webkit-transform: translate(-160px, -160px); transform: translate(-160px, -160px); } } @-moz-keyframes rotate-astronaut { 100% { -moz-transform: rotate(-720deg); } } @-webkit-keyframes rotate-astronaut { 100% { -webkit-transform: rotate(-720deg); } } @keyframes rotate-astronaut { 100% { -webkit-transform: rotate(-720deg); transform: rotate(-720deg); } } @-moz-keyframes glow-star { 40% { -moz-opacity: 0.3; } 90%, 100% { -moz-opacity: 1; -moz-transform: scale(1.2); } } @-webkit-keyframes glow-star { 40% { -webkit-opacity: 0.3; } 90%, 100% { -webkit-opacity: 1; -webkit-transform: scale(1.2); } } @keyframes glow-star { 40% { -webkit-opacity: 0.3; opacity: 0.3; } 90%, 100% { -webkit-opacity: 1; opacity: 1; -webkit-transform: scale(1.2); transform: scale(1.2); border-radius: 999999px; } } .spin-earth-on-hover { transition: ease 200s !important; transform: rotate(-3600deg) !important; } html, body { margin: 0; width: 100%; height: 100%; font-family: 'Titillium Web',Lato,PingFang SC,Hiragino Sans GB,\"Microsoft JhengHei\",\"Microsoft YaHei\",Helvetica Neue,Helvetica,Arial,sans-serif; font-weight: 300; -webkit-user-select: none; /* Safari 3.1+ */ -moz-user-select: none; /* Firefox 2+ */ -ms-user-select: none; /* IE 10+ */ user-select: none; /* Standard syntax */ } .bg-purple { background: url(https://cdn.jsdelivr.net/gh/jerryc127/CDN/404/bg_purple.png); background-repeat: repeat-x; background-size: cover; background-position: left top; height: 100%; overflow: hidden; position: fixed; } .custom-navbar { padding-top: 15px; position: absolute; top: 0; z-index: 99; padding: 10px 36px; width: 100%; border: none; font-size: 18px; -webkit-transition: all .2s ease-in-out; -moz-transition: all .2s ease-in-out; -o-transition: all .2s ease-in-out; -ms-transition: all .2s ease-in-out; transition: all .2s ease-in-out; } .navbar-links { display: inline-block; float: right; margin-top: 5px; margin-right: 55px; text-transform: uppercase; } ul { list-style-type: none; margin: 0; padding: 0; /* overflow: hidden;*/ display: flex; align-items: center; } li { float: left; padding: 0px 15px; } li a { display: block; color: white; text-align: center; text-decoration: none; letter-spacing: 2px; font-size: 14px; text-shadow: 0.1rem 0.1rem 0.2rem rgba(0,0,0,.15); font-weight: 700; color: white; -webkit-transition: all 0.3s ease-in; -moz-transition: all 0.3s ease-in; -ms-transition: all 0.3s ease-in; -o-transition: all 0.3s ease-in; transition: all 0.3s ease-in; } li a:hover { color: #ffcb39; } .btn-request { padding: 10px 25px; border: 1px solid #ffcb39; border-radius: 100px; font-weight: 400; } .btn-request:hover { background-color: #ffcb39; color: #fff; transform: scale(1.05); box-shadow: 0px 20px 20px rgba(0, 0, 0, 0.1); } .btn-go-home { position: relative; z-index: 200; margin: 15px auto; width: 100px; padding: 10px 15px; border: 1px solid #ffcb39; border-radius: 100px; font-weight: 400; display: block; color: white; text-align: center; text-decoration: none; letter-spacing: 2px; font-size: 11px; -webkit-transition: all 0.3s ease-in; -moz-transition: all 0.3s ease-in; -ms-transition: all 0.3s ease-in; -o-transition: all 0.3s ease-in; transition: all 0.3s ease-in; } .btn-go-home:hover { background-color: #ffcb39; color: #fff; transform: scale(1.05); box-shadow: 0px 20px 20px rgba(0, 0, 0, 0.1); } .central-body { padding: 17% 5% 10% 5%; text-align: center; } .objects img { z-index: 90; pointer-events: none; } .object_rocket { z-index: 95; position: absolute; transform: translateX(-50px); top: 75%; pointer-events: none; animation: rocket-movement 200s linear infinite both running; } .object_earth { position: absolute; top: 20%; left: 15%; z-index: 90; } .object_moon { position: absolute; top: 12%; left: 25%; } .object_astronaut { animation: rotate-astronaut 200s infinite linear both alternate; } .box_astronaut { z-index: 110 !important; position: absolute; top: 60%; right: 20%; will-change: transform; animation: move-astronaut 50s infinite linear both alternate; } .image-404 { position: relative; z-index: 100; pointer-events: none; } .stars { background: url(https://cdn.jsdelivr.net/gh/jerryc127/CDN/404/overlay_stars.svg); background-repeat: repeat; background-size: contain; background-position: left top; } .glowing_stars .star { position: absolute; border-radius: 100%; background-color: #fff; width: 3px; height: 3px; opacity: 0.3; will-change: opacity; } .glowing_stars .star:nth-child(1) { top: 80%; left: 25%; animation: glow-star 2s infinite ease-in-out alternate 1s; } .glowing_stars .star:nth-child(2) { top: 20%; left: 40%; animation: glow-star 2s infinite ease-in-out alternate 3s; } .glowing_stars .star:nth-child(3) { top: 25%; left: 25%; animation: glow-star 2s infinite ease-in-out alternate 5s; } .glowing_stars .star:nth-child(4) { top: 75%; left: 80%; animation: glow-star 2s infinite ease-in-out alternate 7s; } .glowing_stars .star:nth-child(5) { top: 90%; left: 50%; animation: glow-star 2s infinite ease-in-out alternate 9s; } .brand-title{ float: left; } .brand-title a { text-shadow: 0.1rem 0.1rem 0.2rem rgba(0,0,0,.15); font-weight: 700; color: white; text-decoration: none; } @media only screen and (max-width: 768px) { .navbar-links { display: none; } .custom-navbar { padding: 10px 20px; } .box_astronaut { top: 70%; } .central-body { padding-top: 25%; } } JerryC 回到地球 L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"log\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/tororo.model.json\"},\"display\":{\"position\":\"right\",\"width\":150,\"height\":300},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7}});"},{"title":"","date":"2020-01-27T04:35:03.794Z","path":"baidu_verify_EXLlfLv2pV.html","text":"EXLlfLv2pV"},{"title":"About","date":"2020-01-19T21:28:11.416Z","path":"about/index.html","text":"我是谁?这不重要.你在这里,我们就是朋友. 这是我的学习路线图和当前进度.它会实时更新.蓝色是计划之中的内容,而绿色为已经完成."},{"title":"分类","date":"2020-01-16T19:17:49.000Z","path":"categories/index.html","text":""},{"title":"音乐","date":"2018-07-17T21:23:06.000Z","path":"music/index.html","text":"倘若花瓣正在世界的另一侧飘落 那白雪就是这一侧花瓣飘落的幻影"},{"title":"留言板","date":"2019-04-14T22:30:38.000Z","path":"messageboard/index.html","text":"樱花落下的速度,是秒速5厘米."},{"title":"标签","date":"2020-01-16T19:15:37.000Z","path":"tags/index.html","text":""},{"title":"記錄這世界","date":"2019-10-25T02:23:55.000Z","path":"photos/index.html","text":""}],"posts":[{"title":"class_instances_to_dataframe","date":"2020-02-17T02:26:29.000Z","path":"2020/02/16/python/advanced/class_instances_to_dataframe/","text":"介绍一下如何把多个class instances 的值存成一个dataframe. defaultdict先介绍一个defaultdict.这个是collections的一个骚东西.你建好了以后,每次新建一个Key的时候,value会自动建立一个自定义类型的初始化值. python1import collections 例如 自定义value为list python1list_dict = collections.defaultdict(list) python1list_dict defaultdict(list, {}) python1list_dict[\"a\"].append(1) python1list_dict[\"b\"].append(2) python1list_dict defaultdict(list, {&#39;a&#39;: [1], &#39;b&#39;: [2]}) 够骚吧! 多个class instance 转换为defaultdictpython12345class my_class(object): def __init__(self,a,b,c): self.a = a self.b = b self.c = c python1class1 = my_class(1,2,3) python1class2 = my_class(2,3,4) python1class3 = my_class(3,4,5) 首先把这些classes全部添加到list python1class_list = [class1, class2, class3] 创建一个defaultdict python1class_dict = collections.defaultdict(list) python123for class_instance in class_list: for key, value in class_instance.__dict__.items(): class_dict[key].append(value) python1class_dict defaultdict(list, {&#39;a&#39;: [1, 1, 3], &#39;b&#39;: [2, 2, 4], &#39;c&#39;: [3, 3, 5]}) 创建dataframe python1import pandas as pd python1frame = pd.DataFrame.from_dict(class_dict) python1frame .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c 0 1 2 3 1 1 2 3 2 3 4 5 大功告成!!骚吧!!","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"pandas","slug":"pandas","permalink":"https://yangxiongwiki.com/tags/pandas/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"advanced","slug":"python/advanced","permalink":"https://yangxiongwiki.com/categories/python/advanced/"}]},{"title":"option trade small summary.md","date":"2020-02-08T01:47:10.000Z","path":"2020/02/07/random_notes/option_trade_small_summary/","text":"期权操作总结今日尝试期权入坑. 之前都在模拟盘交易,第一次体验实盘,小量尝试了一下操作,总结: 模拟盘中没有意识到小市值股票期权的流动性问题. 事实上越是虚值的期权的流动性越是非常的差.应该尽量避免小市值虚值期权的交易.特别是比较虚值的即将到期的短期期权, 简直就是坑爹,谁买谁接盘侠. 流动性低的期权报价不一定有参考价值. 最高的ask和最低的bid差的远的要死.看价格可以进去看ask和bid的具体值. 我发现波动率高的大市值股票的期权价格都是虚高的要死. 根本没有机会去做铁鹰或者蝶式这种操作. 而且大市值股票每一单位的期权都巨贵.目前不准备再碰大市值股票的期权了. 我尝试了裸买期权,感觉稍微有点人气的股票,那价格根本就非常离谱. 就算是赌单边的操作,比较合理的操作应该还是要用价差来买,不要裸买期权. 赌单边的情况下, 目前没有特别好的方法去找怎么买价格最合理. 用ib的价差模板配出来的组合,最大盈亏比,胜率,盈亏平衡点可以差距特别大…配出来的吧,有时候满意,有时候又不满意. 以后做精细量化得想法子怎么计算出最优选择. 不知道是不是我错觉,总觉得买期权比买股票本身风险小, 最大盈亏比大, 胜率还差不了多少… 可能是错觉吧. 今后再研究.","tags":[{"name":"option","slug":"option","permalink":"https://yangxiongwiki.com/tags/option/"},{"name":"finance","slug":"finance","permalink":"https://yangxiongwiki.com/tags/finance/"},{"name":"trade","slug":"trade","permalink":"https://yangxiongwiki.com/tags/trade/"}],"categories":[{"name":"random_notes","slug":"random-notes","permalink":"https://yangxiongwiki.com/categories/random-notes/"}]},{"title":"visualization widgets libraries","date":"2020-02-01T21:49:00.000Z","path":"2020/02/01/python/advanced/visualization_widgets_library/","text":"There are multiple different interactive visualization tools for python, which can help visualize data in interactive ways. ipywidgetThis library is only able to be used in jupyter notebook.However, it provides tremendous functions.The most advantage of this library is that you can link widgets together.Here is the official documentation: https://ipywidgets.readthedocs.io/en/latest/user_guide.html streamlitThis library is super easy to use, and able to be run with a simple cmd command.It is a very strong tool for data visualization or for making a simple app to use.However, it can not link widgets together compared to ipywidget.Here is the official documentation:https://docs.streamlit.io/ github repo:https://github.com/streamlit/streamlit Good examples:https://github.com/MarcSkovMadsen/awesome-streamlit Other librarisI have not tried other libraries but here is the list that can be tried: Bokeh Jupyter Voila Panel Plotly Dash","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"ipywidget","slug":"ipywidget","permalink":"https://yangxiongwiki.com/tags/ipywidget/"},{"name":"streamlit","slug":"streamlit","permalink":"https://yangxiongwiki.com/tags/streamlit/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"advanced","slug":"python/advanced","permalink":"https://yangxiongwiki.com/categories/python/advanced/"}]},{"title":"matplotlib 基础绘图速查表","date":"2020-01-26T22:37:00.000Z","path":"2020/01/26/python/kesci_notes/matplotlib基础绘图速查表/","text":"This notebook is a summary of python plots. The purpose is to able to quickly get examples for plots in the future usage.The source is coming from mutiple places as shown below.kesic.com is the original source of matplotlib examples:从零开始学Python【1】—matplotlib(条形图)从零开始学Python【2】—matplotlib(饼图)从零开始学Python【3】—matplotlib(箱线图) 从零开始学Python【4】—matplotlib(直方图) 从零开始学Python【5】—matplotlib(折线图)从零开始学Python【15】—matplotlib(散点图)从零开始学Python【7】—matplotlib(雷达图) jupyter widget example is coming from:Interactive Python with Widgets The data set in this blog can be found in github page:https://github.com/supersheepbear/notebooks/tree/master/python python12345import matplotlib.pyplot as pltimport matplotlib.mlab as mlabimport numpy as npimport pandas as pdimport scipy.stats as scs plot stylespython1plt.style.use('ggplot') python1plt.style.available [&#39;bmh&#39;, &#39;classic&#39;, &#39;dark_background&#39;, &#39;fast&#39;, &#39;fivethirtyeight&#39;, &#39;ggplot&#39;, &#39;grayscale&#39;, &#39;seaborn-bright&#39;, &#39;seaborn-colorblind&#39;, &#39;seaborn-dark-palette&#39;, &#39;seaborn-dark&#39;, &#39;seaborn-darkgrid&#39;, &#39;seaborn-deep&#39;, &#39;seaborn-muted&#39;, &#39;seaborn-notebook&#39;, &#39;seaborn-paper&#39;, &#39;seaborn-pastel&#39;, &#39;seaborn-poster&#39;, &#39;seaborn-talk&#39;, &#39;seaborn-ticks&#39;, &#39;seaborn-white&#39;, &#39;seaborn-whitegrid&#39;, &#39;seaborn&#39;, &#39;Solarize_Light2&#39;, &#39;tableau-colorblind10&#39;, &#39;_classic_test&#39;] bar plotverticalpython12345678910111213141516171819202122232425262728293031# 导入绘图模块# datax = range(4)GDP = [12406.8,13908.57,9386.87,9143.64]# 中文乱码的处理plt.rcParams['font.sans-serif'] =['Microsoft YaHei']plt.rcParams['axes.unicode_minus'] = False# bar plotplt.bar(x, GDP, align = 'center',color='steelblue', alpha = 0.8, width=0.6)# ylabel titleplt.ylabel('GDP')# titleplt.title('四个直辖市GDP大比拼')# xticks and their labelplt.xticks(range(4),['北京市','上海市','天津市','重庆市'])# ylimplt.ylim([5000,15000])# yticksplt.yticks(np.linspace(5000,15000,5))# gridplt.grid(alpha=0.5, linestyle=\"--\", axis=\"y\")# 为每个条形图添加数值标签for x,y in zip(x, GDP): plt.text(x,y+100,'%s' %round(y,1),ha='center') # 显示图形plt.show() horizontalpython123456789101112131415161718192021222324252627# datax = range(5)price = [39.5,39.9,45.4,38.9,33.34]# 中文乱码的处理plt.rcParams['font.sans-serif'] =['Microsoft YaHei']plt.rcParams['axes.unicode_minus'] = False# drawplt.barh(x, price, align = 'center',color='steelblue', alpha = 0.8, height=0.5)# xlabelplt.xlabel('价格')# titleplt.title('不同平台书的最低价比较')# y ticks and labelplt.yticks(range(5),['亚马逊','当当网','中国图书网','京东','天猫'])# x limitplt.xlim([32,47])# gridplt.grid(alpha=0.5, linestyle=\"--\", axis=\"x\")# label for barsfor x,y in zip(x, price): plt.text(y+0.1,x,'%s' %y,va='center')# show pic plt.show() compare plotlateral stackpython12345678910111213141516171819202122232425262728293031323334353637383940# 导入绘图模块import matplotlib.pyplot as pltimport numpy as np# databar_width = 0.35x1 = np.arange(5)Y2016 = [15600,12700,11300,4270,3620]x2 = np.arange(5)+bar_widthY2017 = [17400,14800,12000,5200,4020]labels = ['北京','上海','香港','深圳','广州']# 中文乱码的处理plt.rcParams['font.sans-serif'] =['Microsoft YaHei']plt.rcParams['axes.unicode_minus'] = False# plotplt.bar(x1, Y2016, label = '2016', color = 'steelblue', alpha = 0.8, width = bar_width)plt.bar(x2, Y2017, label = '2017', color = 'indianred', alpha = 0.8, width = bar_width)# labelsplt.xlabel('Top5城市')plt.ylabel('家庭数量')# titleplt.title('亿万财富家庭数Top5城市分布')# xticksplt.xticks(np.arange(5)+bar_width,labels)# ylimitsplt.ylim([2500, 19000])# gridplt.grid(alpha=0.5, linestyle=\"--\", axis=\"y\")# data labelsfor x2016,y2016 in zip(x1, Y2016): plt.text(x2016-bar_width/2, y2016+100, '%s' %y2016)for x2017,y2017 in zip(x2, Y2017): plt.text(x2017-bar_width/2, y2017+100, '%s' %y2017)# legendplt.legend(loc='best')# show plotplt.show() vertical stackpython123456789101112131415161718192021222324252627282930313233# 导入绘图模块import matplotlib.pyplot as pltimport numpy as np# databar_width = 0.35x = np.arange(5)Y2016 = [15600,12700,11300,4270,3620]Y2017 = [17400,14800,12000,5200,4020]labels = ['北京','上海','香港','深圳','广州']# 中文乱码的处理plt.rcParams['font.sans-serif'] =['Microsoft YaHei']plt.rcParams['axes.unicode_minus'] = False# plotplt.bar(x, Y2017, label = '2017', color = 'red', alpha = 0.8, width = bar_width, bottom=y2016)plt.bar(x, Y2016, label = '2016', color = 'blue', alpha = 0.8, width = bar_width)# labelsplt.xlabel('Top5城市')plt.ylabel('家庭数量')# titleplt.title('亿万财富家庭数Top5城市分布')# xticksplt.xticks(np.arange(5),labels)# gridplt.grid(alpha=0.5, linestyle=\"--\", axis=\"y\")# ylimitsplt.ylim([0, 22500])# legendplt.legend(loc='best')# show plotplt.show() top down stackpython12345678910111213141516171819202122232425262728293031323334353637383940# 导入绘图模块import matplotlib.pyplot as pltimport numpy as np# databar_width = 0.35x = np.arange(5)Y2016 = [15600,12700,11300,4270,3620]Y2017 = -1*np.array([17400,14800,12000,5200,4020])labels = ['北京','上海','香港','深圳','广州']# 中文乱码的处理plt.rcParams['font.sans-serif'] =['Microsoft YaHei']plt.rcParams['axes.unicode_minus'] = False# plotplt.bar(x, Y2017, label = '2017', color = 'red', alpha = 0.8, width = bar_width)plt.bar(x, Y2016, label = '2016', color = 'blue', alpha = 0.8, width = bar_width)# labelsplt.xlabel('Top5城市')plt.ylabel('家庭数量')# titleplt.title('亿万财富家庭数Top5城市分布')# xticksplt.xticks(np.arange(5),labels)# gridplt.grid(alpha=0.5, linestyle=\"--\", axis=\"y\")# ylimitsplt.ylim([-20000, 20000])# legendplt.legend(loc='best')# data labelsfor x2016,y2016 in zip(x, Y2016): plt.text(x2016-bar_width/2, y2016+100, '%s' %y2016)for x2017,y2017 in zip(x, Y2017): plt.text(x2017-bar_width/2, y2017-1500, '%s' %-y2017)# show plotplt.show() pie plotpie函数参数解读plt.pie(x, explode=None, labels=None, colors=None, autopct=None, pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=None, radius=None, counterclock=True, wedgeprops=None, textprops=None, center=(0, 0), frame=False) x：指定绘图的数据； explode：指定饼图某些部分的突出显示，即呈现爆炸式； labels：为饼图添加标签说明，类似于图例说明； colors：指定饼图的填充色； autopct：自动添加百分比显示，可以采用格式化的方法显示； pctdistance：设置百分比标签与圆心的距离； shadow：是否添加饼图的阴影效果； labeldistance：设置各扇形标签（图例）与圆心的距离； startangle：设置饼图的初始摆放角度； radius：设置饼图的半径大小； counterclock：是否让饼图按逆时针顺序呈现； wedgeprops：设置饼图内外边界的属性，如边界线的粗细、颜色等； textprops：设置饼图中文本的属性，如字体大小、颜色等； center：指定饼图的中心点位置，默认为原点 frame：是否要显示饼图背后的图框，如果设置为True的话，需要同时控制图框x轴、y轴的范围和饼图的中心位置； python1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# 导入第三方模块import matplotlib.pyplot as plt# styleplt.style.use('ggplot')# dataedu = [0.2515,0.3724,0.3336,0.0368,0.0057]labels = ['中专','大专','本科','硕士','其他']explode = [0,0.1,0,0,0]colors=['#9999ff','#ff9999','#7777aa','#2442aa','#dd5555'] # 自定义颜色# 中文乱码和坐标轴负号的处理plt.rcParams['font.sans-serif'] = ['Microsoft YaHei']plt.rcParams['axes.unicode_minus'] = False# standarlize plot to be a circle instead of ovalplt.axes(aspect='equal')# limitsplt.xlim(0,4)plt.ylim(0,4)# 绘制饼图plt.pie(x = edu, # data explode=explode, # explot labels=labels, # label colors=colors, # colors autopct='%.1f%%', # percent style pctdistance=0.8, # percent dist to center labeldistance = 1.15, # label distance to center startangle = 180, # start angle radius = 1.5, # radius counterclock = False, # couter clock or not wedgeprops = &#123;'linewidth': 1.5, 'edgecolor':'green'&#125;,# outer edge style textprops = &#123;'fontsize':12, 'color':'k'&#125;, # text style center = (1.8,1.8), # origin point frame = 1)# show frame or not# 删除x轴和y轴的刻度plt.xticks(())plt.yticks(())# 添加图标题plt.title('芝麻信用失信用户教育水平分布')# 显示图形plt.show() histogramhist函数的参数解读 绘图之前，我们先来讲解一下matplotlib包中hist函数的参数含义及使用方法：plt.hist(x, bins=10, range=None, normed=False, weights=None, cumulative=False, bottom=None, histtype=’bar’, align=’mid’, orientation=’vertical’, rwidth=None, log=False, color=None, label=None, stacked=False) x：指定要绘制直方图的数据； bins：指定直方图条形的个数； range：指定直方图数据的上下界，默认包含绘图数据的最大值和最小值； normed：是否将直方图的频数转换成频率； weights：该参数可为每一个数据点设置权重； cumulative：是否需要计算累计频数或频率； bottom：可以为直方图的每个条形添加基准线，默认为0； histtype：指定直方图的类型，默认为bar，除此还有’barstacked’, ‘step’, ‘stepfilled’； align：设置条形边界值的对其方式，默认为mid，除此还有’left’和’right’； orientation：设置直方图的摆放方向，默认为垂直方向； rwidth：设置直方图条形宽度的百分比； log：是否需要对绘图数据进行log变换； color：设置直方图的填充色； label：设置直方图的标签，可通过legend展示其图例； stacked：当有多个数据时，是否需要将直方图呈堆叠摆放，默认水平摆放； data cleaningpython1titanic = pd.read_csv('train.csv') python1titanic.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 NaN S 1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C85 C 2 3 1 3 Heikkinen, Miss. Laina female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S 3 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 0 113803 53.1000 C123 S 4 5 0 3 Allen, Mr. William Henry male 35.0 0 0 373450 8.0500 NaN S python1titanic.info() &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 891 entries, 0 to 890 Data columns (total 12 columns): PassengerId 891 non-null int64 Survived 891 non-null int64 Pclass 891 non-null int64 Name 891 non-null object Sex 891 non-null object Age 714 non-null float64 SibSp 891 non-null int64 Parch 891 non-null int64 Ticket 891 non-null object Fare 891 non-null float64 Cabin 204 non-null object Embarked 889 non-null object dtypes: float64(2), int64(5), object(5) memory usage: 83.7+ KB python1titanic.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Age SibSp Parch Fare count 891.000000 891.000000 891.000000 714.000000 891.000000 891.000000 891.000000 mean 446.000000 0.383838 2.308642 29.699118 0.523008 0.381594 32.204208 std 257.353842 0.486592 0.836071 14.526497 1.102743 0.806057 49.693429 min 1.000000 0.000000 1.000000 0.420000 0.000000 0.000000 0.000000 25% 223.500000 0.000000 2.000000 20.125000 0.000000 0.000000 7.910400 50% 446.000000 0.000000 3.000000 28.000000 0.000000 0.000000 14.454200 75% 668.500000 1.000000 3.000000 38.000000 1.000000 0.000000 31.000000 max 891.000000 1.000000 3.000000 80.000000 8.000000 6.000000 512.329200 We want to plot age data, therefore check null values python1titanic.isnull().any() PassengerId False Survived False Pclass False Name False Sex False Age False SibSp False Parch False Ticket False Fare False Cabin True Embarked True dtype: bool python1titanic.dropna(subset=['Age'], inplace=True) python1titanic.isnull().any() PassengerId False Survived False Pclass False Name False Sex False Age False SibSp False Parch False Ticket False Fare False Cabin True Embarked True dtype: bool typical plotpython1234567891011121314151617181920212223242526272829303132333435# 导入第三方包import numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport matplotlib.mlab as mlab# 中文和负号的正常显示plt.rcParams['font.sans-serif'] = ['Microsoft YaHei']plt.rcParams['axes.unicode_minus'] = False# styleplt.style.use('ggplot')# plotarr=plt.hist(titanic.Age, # data bins = 20, # bins color = 'steelblue', # color edgecolor = 'k', # edge color label = '直方图' )# label# removes ticks on top and rightplt.tick_params(top='off', right='off')# titleplt.title(\"age distribution\")# labelplt.xlabel(\"ages\")plt.ylabel(\"number\")# legendplt.legend()# show numbers on topfor i in range(20): plt.text(arr[1][i],arr[0][i],str(arr[0][i].astype(int)))# show plotplt.show() accumulative plotpython123456789101112131415161718192021222324252627# accumulative plotbins = np.arange(titanic.Age.min(),titanic.Age.max(),5)arr = plt.hist(titanic.Age, # data bins = bins, # bins density = True, # density or not cumulative = True, # accumulative or not color = 'steelblue', # color edgecolor = 'k', # edge color label = 'histogram' )# label# title and labelsplt.title('乘客年龄的频率累计直方图')plt.xlabel('年龄')plt.ylabel('累计频率')# remove ticks on top and rightplt.tick_params(top='off', right='off')# legendplt.legend(loc = 'best')# show numbers on topfor i in range(len(bins)-1): plt.text(arr[1][i],arr[0][i],str(round(arr[0][i],2)))# show plotplt.show() plot with normal distributionpython123456789101112131415161718192021222324252627282930313233343536# normal distrubitionbins = np.arange(titanic.Age.min(),titanic.Age.max(),5)arr = plt.hist(titanic.Age, # 绘图数据 bins = bins, # 指定直方图的组距 density = True, # density plot color = 'steelblue', # color edgecolor = 'k') # edge color# title and labelplt.title('乘客年龄直方图')plt.xlabel('年龄')plt.ylabel('频率')# normal distrubitionx1 = np.linspace(titanic.Age.min(), titanic.Age.max(), 1000)normal = scs.norm.pdf(x1, titanic.Age.mean(), titanic.Age.std())# plot normal distributionline1, = plt.plot(x1,normal,'r-', linewidth = 2) # gaussianKDE distrubutionkde = mlab.GaussianKDE(titanic.Age)x2 = np.linspace(titanic.Age.min(), titanic.Age.max(), 1000)# plot gaussianKDE distrubutionline2, = plt.plot(x2,kde(x2),'g-', linewidth = 2)# remove ticks on top and rightplt.tick_params(top='off', right='off')# show numbers on topfor i in range(len(bins)-1): plt.text(arr[1][i],arr[0][i],str(round(arr[0][i],2)))# show legendplt.legend([line1, line2],['正态分布曲线','核密度曲线'],loc='best')# show plotplt.show() stack plotpython12345678910111213141516171819202122232425262728293031323334353637383940# dataage_female = titanic.Age[titanic.Sex == 'female']age_male = titanic.Age[titanic.Sex == 'male']# binsbins = np.arange(titanic.Age.min(), titanic.Age.max(), 2)# malearr1 = plt.hist(age_male, bins = bins, label = '男性', color = 'steelblue', alpha = 0.7, edgecolor = 'k') # edge color)# femalearr2 = plt.hist(age_female, bins = bins, label = '女性', alpha = 0.6, edgecolor = 'k') # edge color)# title and labelplt.title('乘客年龄直方图')plt.xlabel('年龄')plt.ylabel('人数')# remove ticks on top and rightplt.tick_params(top='off', right='off')# show numbers on topfor i in range(len(bins)-1): plt.text(arr1[1][i],arr1[0][i],str(arr1[0][i].astype(int))) # show numbers on topfor i in range(len(bins)-1): plt.text(arr2[1][i],arr2[0][i],str(arr2[0][i].astype(int)))# shown legendplt.legend()# show plotplt.show() box plotboxplot函数的参数解读 绘图之前，我们先来讲解一下matplotlib包中boxplot函数的参数含义及使用方法：plt.boxplot(x, notch=None, sym=None, vert=None, whis=None, positions=None, widths=None, patch_artist=None, meanline=None, showmeans=None, showcaps=None, showbox=None, showfliers=None, boxprops=None, labels=None, flierprops=None, medianprops=None, meanprops=None, capprops=None, whiskerprops=None) x：指定要绘制箱线图的数据； notch：是否是凹口的形式展现箱线图，默认非凹口； sym：指定异常点的形状，默认为+号显示； vert：是否需要将箱线图垂直摆放，默认垂直摆放； whis：指定上下须与上下四分位的距离，默认为1.5倍的四分位差； positions：指定箱线图的位置，默认为[0,1,2…]； widths：指定箱线图的宽度，默认为0.5； patch_artist：是否填充箱体的颜色； meanline：是否用线的形式表示均值，默认用点来表示； showmeans：是否显示均值，默认不显示； showcaps：是否显示箱线图顶端和末端的两条线，默认显示； showbox：是否显示箱线图的箱体，默认显示； showfliers：是否显示异常值，默认显示； boxprops：设置箱体的属性，如边框色，填充色等； labels：为箱线图添加标签，类似于图例的作用； filerprops：设置异常值的属性，如异常点的形状、大小、填充色等； medianprops：设置中位数的属性，如线的类型、粗细等； meanprops：设置均值的属性，如点的大小、颜色等； capprops：设置箱线图顶端和末端线条的属性，如颜色、粗细等； whiskerprops：设置须的属性，如颜色、粗细、线的类型等； data preparationsee histogram data preparation for details single box plotpython1234567891011121314151617181920# 设置中文和负号正常显示plt.rcParams['font.sans-serif'] = 'Microsoft YaHei'plt.rcParams['axes.unicode_minus'] = False# box plotarr = plt.boxplot(x = titanic.Age, # data patch_artist=True, # custom color showmeans=True, # show means or not boxprops = &#123;'color':'black','facecolor':'#9999ff'&#125;, # color flierprops = &#123;'marker':'o','markerfacecolor':'red','color':'black'&#125;, # outlier points colors meanprops = &#123;'marker':'D','markerfacecolor':'indianred'&#125;, # mean point colors medianprops = &#123;'linestyle':'--','color':'orange'&#125;) # median point colors# y limitsplt.ylim(0,85)# legendplt.legend([arr[\"boxes\"][0]], ['A'], loc='upper right')# remove ticks on top and rightplt.tick_params(top='off', right='off')# show plotplt.show() multiple boxes plotpython1234567891011121314151617181920212223# sort valuestitanic.sort_values(by = 'Pclass', inplace=True)age = []levels = titanic.Pclass.unique()for pclass in levels: age.append(titanic.loc[titanic.Pclass==pclass,'Age'])arr = plt.boxplot(x = age, patch_artist=True, labels = ['一等舱','二等舱','三等舱'], showmeans=True, boxprops = &#123;'color':'black','facecolor':'#9999ff'&#125;, flierprops = &#123;'marker':'o','markerfacecolor':'red','color':'black'&#125;, meanprops = &#123;'marker':'D','markerfacecolor':'indianred'&#125;, medianprops = &#123;'linestyle':'--','color':'orange'&#125;)plt.legend([arr[\"boxes\"][0], arr[\"boxes\"][1], arr[\"boxes\"][2]], ['一等舱','二等舱','三等舱'], loc='upper left')# x limitsplt.xlim(-0.5,4)plt.show() python1234567891011121314151617181920212223242526272829303132333435363738394041age# sort valuestitanic.sort_values(by = 'Pclass', inplace=True)age = []levels = titanic.Pclass.unique()for pclass in levels: age.append(titanic.loc[titanic.Pclass==pclass,'Age'])arr0 = plt.boxplot(x = age[0], patch_artist=True, labels = ['一等舱'], showmeans=True, boxprops = &#123;'color':'black','facecolor':'green'&#125;, flierprops = &#123;'marker':'o','markerfacecolor':'red','color':'black'&#125;, meanprops = &#123;'marker':'D','markerfacecolor':'indianred'&#125;, medianprops = &#123;'linestyle':'--','color':'orange'&#125;, positions = [0])arr1 = plt.boxplot(x = age[1], patch_artist=True, labels = ['二等舱'], showmeans=True, boxprops = &#123;'color':'black','facecolor':'blue'&#125;, flierprops = &#123;'marker':'o','markerfacecolor':'red','color':'black'&#125;, meanprops = &#123;'marker':'D','markerfacecolor':'indianred'&#125;, medianprops = &#123;'linestyle':'--','color':'orange'&#125;, positions = [1])arr2 = plt.boxplot(x = age[2], patch_artist=True, labels = ['三等舱'], showmeans=True, boxprops = &#123;'color':'black','facecolor':'orange'&#125;, flierprops = &#123;'marker':'o','markerfacecolor':'red','color':'black'&#125;, meanprops = &#123;'marker':'D','markerfacecolor':'indianred'&#125;, medianprops = &#123;'linestyle':'--','color':'orange'&#125;, positions = [2])plt.legend([arr0[\"boxes\"][0], arr1[\"boxes\"][0], arr2[\"boxes\"][0]], ['一等舱','二等舱','三等舱'], loc='upper left')# x limitsplt.xlim(-1,2.5)plt.show() line chart matplotlib模块中plot函数语法及参数含义： plt.hist(x,y,linestyle, linewidth,color,marker, markersize,markeredgecolor, markerfactcolor,label,alpha) x：指定折线图的x轴数据； y：指定折线图的y轴数据； linestyle：指定折线的类型，可以是实线、虚线、点虚线、点点线等，默认文实线； linewidth：指定折线的宽度 marker：可以为折线图添加点，该参数是设置点的形状； markersize：设置点的大小； markeredgecolor：设置点的边框色； markerfactcolor：设置点的填充色； label：为折线图添加标签，类似于图例的作用； one dimension plotpython12345# dataarticle_reading = pd.read_csv('wechart.csv')article_reading.date = pd.to_datetime(article_reading.date)sub_data = article_reading.loc[article_reading.date &gt;= '2017-08-01' ,:]sub_data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } date article_reading_cnts article_reading_times collect_times 212 2017-08-01 116 313 11 213 2017-08-02 91 248 15 214 2017-08-03 62 220 7 215 2017-08-04 52 162 2 216 2017-08-05 45 134 8 python12345678910111213141516171819202122232425262728293031323334353637import pandas as pdimport matplotlib.pyplot as pltplt.style.use('ggplot')pd.plotting.register_matplotlib_converters()# 设置中文编码和负号的正常显示plt.rcParams['font.sans-serif'] = 'Microsoft YaHei'plt.rcParams['axes.unicode_minus'] = False# fig sizefig = plt.figure(figsize=(10,6))# plotplt.plot(sub_data.date, # x data sub_data.article_reading_cnts, # y data linestyle = '-', # line style linewidth = 2, # line width color = 'steelblue', # color marker = 'o', # shape of points markersize = 6, # size of points markeredgecolor='black', # points edge color markerfacecolor='brown') # points filled color# title and labelplt.title('公众号每天阅读人数趋势图')plt.xlabel('日期')plt.ylabel('人数')# remove ticks on top and rightplt.tick_params(top = 'off', right = 'off')# set 45 degree display for xfig.autofmt_xdate(rotation = 45)# show plotplt.show() optimized one dimension plotpython123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import pandas as pdimport matplotlib.pyplot as pltimport matplotlib as mplplt.style.use('ggplot')pd.plotting.register_matplotlib_converters()# 设置中文编码和负号的正常显示plt.rcParams['font.sans-serif'] = 'Microsoft YaHei'plt.rcParams['axes.unicode_minus'] = False# fig sizefig = plt.figure(figsize=(10,6))# plotplt.plot(sub_data.date, # x data sub_data.article_reading_cnts, # y data linestyle = '-', # line style linewidth = 2, # line width color = 'steelblue', # color marker = 'o', # shape of points markersize = 6, # size of points markeredgecolor='black', # points edge color markerfacecolor='brown') # points filled color# title and labelplt.title('公众号每天阅读人数趋势图')plt.xlabel('日期')plt.ylabel('人数')# remove ticks on top and rightplt.tick_params(top = 'off', right = 'off')# set 45 degree display for xfig.autofmt_xdate(rotation = 45)# axis infoax = plt.gca()# date formatdate_format = mpl.dates.DateFormatter(\"%Y-%m-%d\") ax.xaxis.set_major_formatter(date_format) # 设置x轴显示多少个日期刻度#xlocator = mpl.ticker.LinearLocator(10)# 设置x轴每个刻度的间隔天数xlocator = mpl.ticker.MultipleLocator(5)ax.xaxis.set_major_locator(xlocator)# show plotplt.show() multiple dimension plotpython123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263import pandas as pdimport matplotlib.pyplot as pltimport matplotlib as mplplt.style.use('ggplot')pd.plotting.register_matplotlib_converters()# 设置中文编码和负号的正常显示plt.rcParams['font.sans-serif'] = 'Microsoft YaHei'plt.rcParams['axes.unicode_minus'] = False# fig sizefig = plt.figure(figsize=(10,6))# plotplt.plot(sub_data.date, # x data sub_data.article_reading_cnts, # y data linestyle = '-', # line style linewidth = 2, # line width color = 'steelblue', # color marker = 'o', # shape of points markersize = 6, # size of points markeredgecolor='black', # points edge color markerfacecolor='brown', # points filled color label = '阅读人数') # labelplt.plot(sub_data.date, # x data sub_data.article_reading_times, # y data linestyle = '-', # line style linewidth = 2, # line width color = '#ff9999', # color marker = 'o', # shape of points markersize = 6, # size of points markeredgecolor='black', # points edge color markerfacecolor='#ff9999', # points filled color label = '阅读人次') # label# title and labelplt.title('公众号每天阅读人数趋势图')plt.xlabel('日期')plt.ylabel('人数')# remove ticks on top and rightplt.tick_params(top = 'off', right = 'off')# set 45 degree display for xfig.autofmt_xdate(rotation = 45)# axis infoax = plt.gca()# date formatdate_format = mpl.dates.DateFormatter(\"%Y-%m-%d\") ax.xaxis.set_major_formatter(date_format) # 设置x轴显示多少个日期刻度#xlocator = mpl.ticker.LinearLocator(10)# 设置x轴每个刻度的间隔天数xlocator = mpl.ticker.MultipleLocator(5)ax.xaxis.set_major_locator(xlocator)# show legendplt.legend()# show plotplt.show() scatter plotmatplotlib模块中scatter函数语法及参数含义： plt.scatter(x, y, s=20, c=None, marker=’o’, cmap=None, norm=None, vmin=None, vmax=None, alpha=None, linewidths=None, edgecolors=None)x：指定散点图的x轴数据； y：指定散点图的y轴数据； s：指定散点图点的大小，默认为20，通过传入新的变量，实现气泡图的绘制； c：指定散点图点的颜色，默认为蓝色； marker：指定散点图点的形状，默认为圆形； cmap：指定色图，只有当c参数是一个浮点型的数组的时候才起作用； norm：设置数据亮度，标准化到0~1之间，使用该参数仍需要c为浮点型的数组； vmin、vmax：亮度设置，与norm类似，如果使用了norm则该参数无效； alpha：设置散点的透明度； linewidths：设置散点边界线的宽度； edgecolors：设置散点边界线的颜色； one dimension scatter plotpython123# datacars = pd.read_csv('cars.csv')cars.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } speed dist 0 4 2 1 4 10 2 7 4 3 7 22 4 8 16 python1234567891011121314151617181920212223242526import pandas as pdimport matplotlib.pyplot as pltplt.style.use('ggplot')# 设置中文编码和负号的正常显示plt.rcParams['font.sans-serif'] = 'Microsoft YaHei'plt.rcParams['axes.unicode_minus'] = Falseplt.scatter( x=cars[\"speed\"], y=cars[\"dist\"], c=\"steelblue\", marker=\"s\", # marker alpha=0.9, # alpha linewidths = 0.3, # width edgecolors = 'red') # edge color# title and labelsplt.title('汽车速度与刹车距离的关系')plt.xlabel('汽车速度')plt.ylabel('刹车距离')# Remove ticks on top and rightplt.tick_params(top = 'off', right = 'off')# show plotplt.show() one dimension plot with linear regressionlinear regression python123from sklearn.linear_model import LinearRegressionreg = LinearRegression().fit(cars.speed.values.reshape(-1,1), cars.dist.values.reshape(-1,1))pred = reg.predict(cars.speed.values.reshape(-1,1)) intercept python1reg.intercept_ array([-17.57909489]) slope python1reg.coef_ array([[3.93240876]]) python1reg.coef_[0][0], reg.intercept_[0] (3.9324087591240873, -17.57909489051095) python1234567891011121314151617181920212223242526272829303132333435import pandas as pdimport matplotlib.pyplot as pltplt.style.use('ggplot')# 设置中文编码和负号的正常显示plt.rcParams['font.sans-serif'] = 'Microsoft YaHei'plt.rcParams['axes.unicode_minus'] = Falseplt.scatter( x=cars[\"speed\"], y=cars[\"dist\"], c=\"steelblue\", marker=\"s\", # marker alpha=0.9, # alpha linewidths = 0.3, # width edgecolors = 'red') # edge color# regression lineplt.plot(cars.speed, pred, linewidth = 2, label = '回归线')# textplt.text(5,100,\"y=&#123;:.2f&#125;x + &#123;:.2f&#125;\".format(reg.coef_[0][0], reg.intercept_[0]))# title and labelsplt.title('汽车速度与刹车距离的关系')plt.xlabel('汽车速度')plt.ylabel('刹车距离')# Remove ticks on top and rightplt.tick_params(top = 'off', right = 'off')# show plotplt.show() multiple dimensions plotpython1234# datairis = pd.read_csv(\"iris.csv\",header=None)iris.columns=(['sepal_length','sepal_width', 'petal_length', 'petal_width', 'class'])iris.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sepal_length sepal_width petal_length petal_width class 0 5.1 3.5 1.4 0.2 Iris-setosa 1 4.9 3.0 1.4 0.2 Iris-setosa 2 4.7 3.2 1.3 0.2 Iris-setosa 3 4.6 3.1 1.5 0.2 Iris-setosa 4 5.0 3.6 1.4 0.2 Iris-setosa python12classes = iris[\"class\"].unique()classes array([&#39;Iris-setosa&#39;, &#39;Iris-versicolor&#39;, &#39;Iris-virginica&#39;], dtype=object) python12345678910111213141516171819# colorscolors = ['steelblue', '#9999ff', '#ff9999']# plotfor i in range(len(classes)): plt.scatter(iris.loc[iris[\"class\"]==classes[i],\"petal_length\"], iris.loc[iris[\"class\"]==classes[i],'petal_width'], label=classes[i], color=colors[i])# title and labelplt.title('花瓣长度与宽度的关系')plt.xlabel('花瓣长度')plt.ylabel('花瓣宽度')# remove ticks on top and rightplt.tick_params(top = 'off', right = 'off')# legendplt.legend(loc = 'upper left')# show plotplt.show() bubble plotShow another dimension by size of scatter marker. python1import numpy as np python12345678910111213141516171819202122232425262728# colorscolors = ['steelblue', '#9999ff', '#ff9999']# normalized sepal_widthsepal_width = iris.loc[iris[\"class\"]==classes[i],'sepal_width']sepal_width_scaled = (sepal_width_positive-sepal_width_positive.mean())/sepal_width_positive.std()# Make all data positivesepal_width_scaled_positive = sepal_width_scaled - sepal_width_scaled.min()# plotfor i in range(len(classes)): plt.scatter(iris.loc[iris[\"class\"]==classes[i],\"petal_length\"], iris.loc[iris[\"class\"]==classes[i],'petal_width'], label=classes[i], color=colors[i], s=(sepal_width_scaled_positive * 50))# title and labelplt.title('花瓣长度与宽度的关系')plt.xlabel('花瓣长度')plt.ylabel('花瓣宽度')# remove ticks on top and rightplt.tick_params(top = 'off', right = 'off')# legendplt.legend(loc = 'upper left')# textplt.text(1,1.5,\"size: sepal_width\",)# show plotplt.show() radar plotone dimension radar plotpython12345678910111213141516171819202122232425262728293031323334353637import numpy as npimport matplotlib.pyplot as plt# 中文和负号的正常显示plt.rcParams['font.sans-serif'] = 'Microsoft YaHei'plt.rcParams['axes.unicode_minus'] = False# styleplt.style.use('ggplot')# datavalues = [3.2,2.1,3.5,2.8,3]feature = ['个人能力','QC知识','解决问题能力','服务质量意识','团队精神']N = len(values)# anglesangles=np.linspace(0, 2*np.pi, N, endpoint=False)# values need to be a close loop to fill colorvalues=np.concatenate((values,[values[0]]))angles=np.concatenate((angles,[angles[0]]))# plotfig=plt.figure()ax = fig.add_subplot(111, polar=True)ax.plot(angles, values, 'o-', linewidth=2)ax.fill(angles, values, alpha=0.25)# labelsax.set_thetagrids(angles * 180/np.pi, feature)# y limitsax.set_ylim(0,5)# titleplt.title('活动前后员工状态表现')# gridax.grid(True)# show plotplt.show() multiple dimension radar plotpython123456789101112131415161718192021222324252627282930313233343536373839404142import numpy as npimport matplotlib.pyplot as plt# 中文和负号的正常显示plt.rcParams['font.sans-serif'] = 'Microsoft YaHei'plt.rcParams['axes.unicode_minus'] = False# styleplt.style.use('ggplot')# datavalues = [3.2,2.1,3.5,2.8,3]values2 = [4,4.1,4.5,4,4.1]feature = ['个人能力','QC知识','解决问题能力','服务质量意识','团队精神']N = len(values)# anglesangles=np.linspace(0, 2*np.pi, N, endpoint=False)# values need to be a close loop to fill colorvalues=np.concatenate((values,[values[0]]))values2=np.concatenate((values2,[values2[0]]))angles=np.concatenate((angles,[angles[0]]))# plotfig=plt.figure()ax = fig.add_subplot(111, polar=True)ax.plot(angles, values, 'o-', linewidth=2)ax.fill(angles, values, alpha=0.25)ax.plot(angles, values2, 'o-', linewidth=2, label = '活动后')ax.fill(angles, values2, alpha=0.25)# labelsax.set_thetagrids(angles * 180/np.pi, feature)# y limitsax.set_ylim(0,5)# titleplt.title('活动前后员工状态表现')# gridax.grid(True)# show plotplt.show() interactive widget plotsimple examplepython123import ipywidgets as wgfrom IPython.display import display%matplotlib inline python123name = wg.Text(value='Name')age = wg.IntSlider(description=\"Age:\")display(name,age) Text(value=&#39;Name&#39;) IntSlider(value=0, description=&#39;Age:&#39;) python1234a = wg.FloatText()b = wg.FloatSlider()display(a,b)mylink = wg.jslink((a,'value'), (b,'value')) FloatText(value=0.0) FloatSlider(value=0.0) python1234567891011import numpy as np%matplotlib inlineimport matplotlib.pyplot as pltdef myPlot(c): x = np.linspace(-5,5,20) y =c * x**2 plt.plot(x,y, 'r--') plt.ylabel('y(x)') plt.xlabel('x') plt.ylim([0, 80]) plt.xlim([-5, 5]) python12c_slide = wg.FloatSlider(value=1.0, min=0, max=3.0, step=0.1)wg.interact(myPlot, c=c_slide) interactive(children=(FloatSlider(value=1.0, description=&#39;c&#39;, max=3.0), Output()), _dom_classes=(&#39;widget-inter… &lt;function __main__.myPlot(c)&gt; actual data examplepython1titanic = pd.read_csv('train.csv') python1titanic.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Age SibSp Parch Fare count 891.000000 891.000000 891.000000 714.000000 891.000000 891.000000 891.000000 mean 446.000000 0.383838 2.308642 29.699118 0.523008 0.381594 32.204208 std 257.353842 0.486592 0.836071 14.526497 1.102743 0.806057 49.693429 min 1.000000 0.000000 1.000000 0.420000 0.000000 0.000000 0.000000 25% 223.500000 0.000000 2.000000 20.125000 0.000000 0.000000 7.910400 50% 446.000000 0.000000 3.000000 28.000000 0.000000 0.000000 14.454200 75% 668.500000 1.000000 3.000000 38.000000 1.000000 0.000000 31.000000 max 891.000000 1.000000 3.000000 80.000000 8.000000 6.000000 512.329200 python123titanic.dropna(subset=['Age'], inplace=True)titanic.sort_values(\"Age\", inplace=True)titanic.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 803 804 1 3 Thomas, Master. Assad Alexander male 0.42 0 1 2625 8.5167 NaN C 755 756 1 2 Hamalainen, Master. Viljo male 0.67 1 1 250649 14.5000 NaN S 644 645 1 3 Baclini, Miss. Eugenie female 0.75 2 1 2666 19.2583 NaN C 469 470 1 3 Baclini, Miss. Helene Barbara female 0.75 2 1 2666 19.2583 NaN C 78 79 1 2 Caldwell, Master. Alden Gates male 0.83 0 2 248738 29.0000 NaN S python12def myPlot(index): plt.scatter(0, titanic.iloc[int(index),:].loc[\"Pclass\"]) python123456a = wg.FloatText()b = wg.FloatSlider()display(a,b)mylink = wg.jslink((a,'value'), (b,'value'))index_slide = wg.FloatSlider(value=0, min=0, max=len(titanic)-1, step=1)wg.interact(myPlot, index=index_slide) FloatText(value=0.0) FloatSlider(value=0.0) interactive(children=(FloatSlider(value=0.0, description=&#39;index&#39;, max=713.0, step=1.0), Output()), _dom_classe… &lt;function __main__.myPlot(index)&gt; widget_types can be found in:widge types example of link widgets togetherpython12345678910111213141516171819202122232425play = wg.Play( value=0, min=0, max=len(titanic)-1, step=1, interval=200, description=\"Press play\", disabled=False)slider = wg.FloatSlider(value=0, min=0, max=len(titanic)-1, step=1)text = wg.FloatText( value=0, min=0, max=len(titanic)-1, step=1, description='pClass', disabled=False)wg.jslink((play, 'value'), (text,'value'))wg.jslink((play, 'value'), (slider,'value'))ui1 = wg.HBox([play])ui2 = wg.HBox([slider])display(ui1)display(ui2)wg.interact(myPlot, index=text) HBox(children=(Play(value=0, description=&#39;Press play&#39;, interval=200, max=713),)) HBox(children=(FloatSlider(value=0.0, max=713.0, step=1.0),)) interactive(children=(FloatText(value=0.0, description=&#39;pClass&#39;, step=1.0), Output()), _dom_classes=(&#39;widget-i… &lt;function __main__.myPlot(index)&gt; python12","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"kesci","slug":"kesci","permalink":"https://yangxiongwiki.com/tags/kesci/"},{"name":"matplotlib","slug":"matplotlib","permalink":"https://yangxiongwiki.com/tags/matplotlib/"},{"name":"jupyter_widget","slug":"jupyter-widget","permalink":"https://yangxiongwiki.com/tags/jupyter-widget/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"kesci_notes","slug":"python/kesci-notes","permalink":"https://yangxiongwiki.com/categories/python/kesci-notes/"}]},{"title":"numpy 高级命令速查表","date":"2020-01-26T16:55:00.000Z","path":"2020/01/26/python/kesci_notes/numpy高级命令速查表/","text":"此notebook复现以下链接.Numpy快速上手指南 —- 进阶篇 python12import numpy as npimport math 高级索引技巧一维数组索引python123a = np.arange(12)**2i = np.array([1,1,3,8,5])a[i] array([ 1, 1, 9, 64, 25], dtype=int32) python12j = np.array( [ [ 3, 4], [ 9, 7 ] ] ) # a bidimensional array of indicesa[j] array([[ 9, 16], [81, 49]], dtype=int32) python12345678palette = np.array( [ [0,0,0], # 黑色 [255,0,0], # 红色 [0,255,0], # 绿色 [0,0,255], # 蓝色 [255,255,255] ] ) # 白色image = np.array( [ [ 0, 1, 2, 0 ], # each value corresponds to a color in the palette [ 0, 3, 4, 0 ] ] )palette[image] array([[[ 0, 0, 0], [255, 0, 0], [ 0, 255, 0], [ 0, 0, 0]], [[ 0, 0, 0], [ 0, 0, 255], [255, 255, 255], [ 0, 0, 0]]]) python12a = np.arange(12).reshape(3,4)a array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]]) 多维数组索引多维的索引数组也是可以的.每一维的数组必须有相同的形状. python12i = np.array( [ [0,1], # indices for the first dim of a [1,2] ] ) python12j = np.array( [ [2,1], # indices for the second dim [3,3] ] ) python1a[i,j] array([[ 2, 5], [ 7, 11]]) python1a[i,j] #broadcast array([[ 2, 5], [ 7, 11]]) python1a[:,j] array([[[ 2, 1], [ 3, 3]], [[ 6, 5], [ 7, 7]], [[10, 9], [11, 11]]]) 把i,j放在一个tuple里当成索引也可以 python12l = (i,j)a[l] array([[ 2, 5], [ 7, 11]]) 例子: 寻找多个数列的最大值 python123time = np.linspace(20, 145, 5) # time scaledata = np.sin(np.arange(20)).reshape(5,4) # 4 time-dependent seriestime array([ 20. , 51.25, 82.5 , 113.75, 145. ]) python1data array([[ 0. , 0.84147098, 0.90929743, 0.14112001], [-0.7568025 , -0.95892427, -0.2794155 , 0.6569866 ], [ 0.98935825, 0.41211849, -0.54402111, -0.99999021], [-0.53657292, 0.42016704, 0.99060736, 0.65028784], [-0.28790332, -0.96139749, -0.75098725, 0.14987721]]) python12ind = data.argmax(axis=0) # index of the maxima for each seriesind array([2, 0, 3, 1], dtype=int64) python12data_max = data[ind, range(data.shape[1])] # =&gt; data[ind[0],0], data[ind[1],1]...data_max array([0.98935825, 0.84147098, 0.99060736, 0.6569866 ]) python1np.all(data_max == data.max(axis=0)) True 例子: 数组索引作为目标赋值 python1a = np.arange(5) python1a array([0, 1, 2, 3, 4]) python12a[[1,2,3]] = 0a array([0, 0, 0, 0, 4]) 例子:当一个索引列表包含重复时，赋值被多次完成，保留最后的值 python123a = np.arange(5)a[[0,0,2]]=[1,2,3]a array([2, 1, 3, 3, 4]) 通过布尔数组索引索引 python123a = np.arange(12).reshape(3,4)b = a &gt; 4b # b is a boolean with a's shape array([[False, False, False, False], [False, True, True, True], [ True, True, True, True]]) 赋值 python12a[b] = 0 # All elements of 'a' higher than 4 become 0a array([[0, 1, 2, 3], [4, 0, 0, 0], [0, 0, 0, 0]]) 多维布尔数组索引 python12a = np.arange(12).reshape(3,4)a array([[ 0, 1, 2, 3], [ 4, 5, 6, 7], [ 8, 9, 10, 11]]) python123b1 = np.array([False,True,True])b2 = np.array([True,False,True,False])a[b1,:] array([[ 4, 5, 6, 7], [ 8, 9, 10, 11]]) python1a[b1] array([[ 4, 5, 6, 7], [ 8, 9, 10, 11]]) python1a[:,b2] array([[ 0, 2], [ 4, 6], [ 8, 10]]) python1a[b1,b2] array([ 4, 10]) np.ix_索引np.ix_返回每一维相互组合的索引 python1a = ap.arange(10).reshape(2, 5) python1ixgrid = np.ix_([0, 1], [2, 4]) python1a[ixgrid] array([[2, 4], [7, 9]]) 高级例子, 用np.ix_来计算所有元素组合的结果 python1234a = np.array([2,3,4,5])b = np.array([8,5,4])c = np.array([5,4,6,8,3])ax,bx,cx = np.ix_(a,b,c) python1ax array([[[2]], [[3]], [[4]], [[5]]]) python1bx array([[[8], [5], [4]]]) python1cx array([[[5, 4, 6, 8, 3]]]) python1ax.shape, bx.shape, cx.shape ((4, 1, 1), (1, 3, 1), (1, 1, 5)) python1result = ax + bx * cx python1result array([[[42, 34, 50, 66, 26], [27, 22, 32, 42, 17], [22, 18, 26, 34, 14]], [[43, 35, 51, 67, 27], [28, 23, 33, 43, 18], [23, 19, 27, 35, 15]], [[44, 36, 52, 68, 28], [29, 24, 34, 44, 19], [24, 20, 28, 36, 16]], [[45, 37, 53, 69, 29], [30, 25, 35, 45, 20], [25, 21, 29, 37, 17]]]) python1result[3, 2, 4] 17 python1a[3] + b[2] * c[4] 17 线性代数运算python12a = np.array([[1.0, 2.0], [3.0, 4.0]])print (a) [[1. 2.] [3. 4.]] 转置python1a.transpose() Object `solve` not found. 逆矩阵python1np.linalg.inv(a) array([[-2. , 1. ], [ 1.5, -0.5]]) 单位对角矩阵python1np.eye(2) array([[1., 0.], [0., 1.]]) 点积python12j = np.array([[0.0, -1.0], [1.0, 0.0]])np.dot(j, j) # matrix product array([[-1., 0.], [ 0., -1.]]) 对角数据和python1a = np.array([[1.0, 2.0], [3.0, 4.0]]) python1np.trace(a) 5.0 矩阵点乘方程求解python123a = np.array([[1.0, 2.0], [3.0, 4.0]])y = np.array([[5.], [7.]])np.linalg.solve(a, y) array([[-3.], [ 4.]]) 1(-3) + 24 = 3(-3) + 44 = 7 python1np.dot(np.array([[1.0, 2.0], [3.0, 4.0]]), np.array([[-3.], [ 4.]])) array([[5.], [7.]]) 特征值和特征向量python12j = np.array([[0.0, -1.0], [1.0, 0.0]])np.linalg.eig(j) (array([0.+1.j, 0.-1.j]), array([[0.70710678+0.j , 0.70710678-0.j ], [0. -0.70710678j, 0. +0.70710678j]])) 矩阵略. 参考 Numpy快速上手指南 —- 进阶篇","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"numpy","slug":"numpy","permalink":"https://yangxiongwiki.com/tags/numpy/"},{"name":"kesci","slug":"kesci","permalink":"https://yangxiongwiki.com/tags/kesci/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"kesci_notes","slug":"python/kesci-notes","permalink":"https://yangxiongwiki.com/categories/python/kesci-notes/"}]},{"title":"numpy 基础命令速查表","date":"2020-01-26T04:28:00.000Z","path":"2020/01/25/python/kesci_notes/numpy基础命令速查表/","text":"此notebook素材来自kesci.com两个练习系列. Numpy快速上手指南 —- 基础篇 数据大小定义 axes: 轴 rank: 秩 例如:[[ 1., 0., 0.], [ 0., 1., 2.]] 的axes维度为2, 第一个维度rank2, 第二个维度rank3 python1import numpy as np python12a = np.arange(15).reshape(3,5)a array([[ 0, 1, 2, 3, 4], [ 5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]) 查看维度(dimension)python1a.shape (3, 5) 查看多少个轴python1a.ndim 2 查看数据类型python1a.dtype dtype(&#39;int32&#39;) python1a.dtype.name &#39;int32&#39; 每个元素的字节大小python1a.itemsize 4 总个数python1a.size 15 类型python1type(a) numpy.ndarray 数组创建list创建python12a = np.array([2,3,4])a array([2, 3, 4]) python1a.dtype dtype(&#39;int32&#39;) python12a = np.array([(1.5,2,3),(4,5,6)])a array([[1.5, 2. , 3. ], [4. , 5. , 6. ]]) python1a.dtype dtype(&#39;float64&#39;) 指定数据类型创建 python12a = np.array([[1,2],[3,4]], dtype=complex )a array([[1.+0.j, 2.+0.j], [3.+0.j, 4.+0.j]]) python1a.dtype dtype(&#39;complex128&#39;) python1a.itemsize 16 内置函数创建通常，数组的元素开始都是未知的，但是它的大小已知。因此，Numpy提供了一些使用占位符创建数组的函数。这最小化了扩展数组的需要和高昂的运算代价。 全0数组python1np.zeros((3,4),dtype=np.float64) array([[0., 0., 0., 0.], [0., 0., 0., 0.], [0., 0., 0., 0.]]) 按变量shape创建 python12a = np.array([1,2,3])a array([1, 2, 3]) python1np.zeros_like(a) array([0, 0, 0]) 全1数组python1np.ones((2,3,4), dtype=np.int16) array([[[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]], [[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]], dtype=int16) 按变量shape创建 python12a = np.array([1,2,3])a array([1, 2, 3]) python1np.ones_like(a) array([1, 1, 1]) 空数组python1np.empty((2,5)) array([[1.37700972e-311, 2.32210854e-322, 0.00000000e+000, 0.00000000e+000, 0.00000000e+000], [1.16095484e-028, 7.52736939e+252, 2.09570572e-110, 2.91237123e+257, 4.71294503e+257]]) 单位对角矩阵python1np.eye(3) array([[ 1., 0., 0.], [ 0., 1., 0.], [ 0., 0., 1.]]) python1np.identity(3) array([[ 1., 0., 0.], [ 0., 1., 0.], [ 0., 0., 1.]]) 等间隔数列aranga定义间隔大小 python1np.arange(10,30,5) array([10, 15, 20, 25]) python1np.arange(0,2,0.3) array([0. , 0.3, 0.6, 0.9, 1.2, 1.5, 1.8]) linspace定义总共多少间隔 python1np.linspace(0,2,5) array([0. , 0.5, 1. , 1.5, 2. ]) 随机数纯随机 python1np.random.rand(2,3) array([[0.80722577, 0.64305952, 0.22218733], [0.32297689, 0.46138349, 0.18416854]]) 标准正态分布随机 python1np.random.randn(2,3) array([[ 2.65856467, 1.35871691, -0.13102211], [ 0.212424 , -0.87073905, 0.83563459]]) 一般正态分布随机 python1np.random.normal(loc=1,scale=0.5,size=(2,3)) array([[0.52176134, 1.02691187, 1.37880997], [1.19657311, 1.31502553, 0.38417858]]) 自定义离散总体及样本概率分布的随机 python12aa_milne_arr = ['pooh', 'rabbit', 'piglet', 'Christopher']np.random.choice(aa_milne_arr, 5, p=[0.5, 0.1, 0.1, 0.3]) array([&#39;pooh&#39;, &#39;pooh&#39;, &#39;pooh&#39;, &#39;Christopher&#39;, &#39;Christopher&#39;], dtype=&#39;&lt;U11&#39;) 整数随机 python1np.random.randint(low=-2,high=10,size=10) array([0, 5, 8, 0, 9, 7, 3, 5, 2, 2]) python1a.min() 0 python1a.max() 5 python1a.sum() 15 python1a.cumsum() array([ 0, 1, 3, 6, 10, 15], dtype=int32) python1a.std(ddof=1) 1.8708286933869707 通用函数python1a = np.arange(3) 计算python1np.exp(a) array([ 1. , 2.71828183, 7.3890561 ]) python1np.sqrt(a) array([ 0. , 1. , 1.41421356]) python1c = np.array([2., -1., 4.]) python1np.add(a,c) array([ 2., 0., 6.]) python1a+c array([ 2., 0., 6.]) 共轭 python1np.conjugate(1+2j) (1-2j) 数组每两个数的差 python12x = np.array([1, 2, 4, 7, 0])np.diff(x) array([ 1, 2, 3, -7]) 叉积 python12a=np.array([1,2,3])b=np.array([2,3,4]) python1np.cross(a,b) array([-1, 2, -1]) 元素积 python1a*b array([ 2, 6, 12]) 点积 python1np.dot(a,b) 20 内积 python1np.inner(a,b) 20 外积 python1np.outer(a,b) array([[ 2, 3, 4], [ 4, 6, 8], [ 6, 9, 12]]) 检查元素是否所有元素等于true python12a = np.array([True, False, True])np.all(a) False python1np.alltrue(a) False 是否有至少一个元素等于true python1np.any(a) True 按照条件寻找坐标 np.where的理解可参考：https://www.zhihu.com/question/62844162 1维的情况 python1a=np.array([1,2,3]) python1np.where(a&gt;1) (array([1, 2], dtype=int64),) 多维的情况 python12x = np.arange(9.).reshape(3, 3)x array([[ 0., 1., 2.], [ 3., 4., 5.], [ 6., 7., 8.]]) python1np.where( x &gt; 5.0) (array([2, 2, 2], dtype=int64), array([0, 1, 2], dtype=int64)) 俩个数组第一个是横坐标，第二个是纵坐标 自定义函数单数组内的函数 python12def myfunc(b): return(b[0] + b[1]) python1a=np.array([[1,2,3],[4,5,6]]) python1np.apply_along_axis(myfunc,1,a) array([3, 9]) 多数组函数 python123456789def myfunc(a, b): \"Return a-b if a&gt;b, otherwise return a+b\" if a &gt; b: return a - b else: return a + bvfunc = np.vectorize(myfunc)vfunc([1, 2, 3, 4], 2) array([3, 4, 1, 2]) 最大最小值python1a=np.array([3,1,2,5,4,6]) python1np.argmax(a) 5 python1np.argmin(a) 1 排序python1a=np.array([3,1,2,5,4,6]) python1np.sort(a) array([1, 2, 3, 4, 5, 6]) python1np.argsort(a) array([1, 2, 0, 4, 3, 5], dtype=int64) python1234surnames = ('Hertz', 'Galilei', 'Hertz')first_names = ('Heinrich', 'Galileo', 'Gustav')ind = np.lexsort((first_names, surnames))ind array([1, 2, 0], dtype=int64) 组合排序 python1234a = [1,5,1,4,3,4,4] # First columnb = [9,4,0,4,0,2,1] # Second columnind = np.lexsort((b,a)) # Sort by a, then by bprint(ind) [2 0 4 6 5 3 1] 返回插入点 python1np.searchsorted([1,2,3,4,5], 3) 2 求和求积python12a=np.arange(1,5)a array([1, 2, 3, 4]) 累加乘积 python1np.cumprod(a) array([ 1, 2, 6, 24], dtype=int32) 累加求和 python1np.cumsum(a) array([ 1, 3, 6, 10], dtype=int32) 所有元素乘积 python1np.prod(a) 24 对角线求和 python12a=np.eye(3)a array([[ 1., 0., 0.], [ 0., 1., 0.], [ 0., 0., 1.]]) python1np.trace(a) 3.0 描述统计python12a=np.array([3,1,2,5,4,6])a array([3, 1, 2, 5, 4, 6]) python1np.max(a) 6 python1np.min(a) 1 python1np.mean(a) 3.5 python1np.median(a) 3.5 python1np.std(a, ddof=1) 1.8708286933869707 python1np.var(a, ddof=1) 3.5 非零数据位置 python1np.nonzero(a) (array([0, 1, 2, 3, 4, 5], dtype=int64),) 整数数字统计 python1np.bincount(a) array([0, 1, 1, 1, 1, 1, 1], dtype=int64) 四舍五入向上取整 python1a = np.array([0.1, -0.5, 1.8]) python1np.ceil(a) array([ 1., -0., 2.]) 向下取整 python1np.floor(a) array([ 0., -1., 1.]) 四舍五入 python1np.round(a) array([ 0., -0., 2.]) 限制数字范围 python1np.clip(a, 0, 1.5) array([ 0.1, 0. , 1.5]) 相关性pearson相关系数 R_{ij} = \\frac{ C_{ij} } { \\sqrt{ C_{ii} * C_{jj} } }python1a=np.array([1,2,3,4]) python1b=np.array([1.1,2,3.5,4]) python1np.corrcoef(a,b) array([[ 1. , 0.98423325], [ 0.98423325, 1. ]]) 协方差矩阵 python1np.cov(a, b) array([[ 1.66666667, 1.7 ], [ 1.7 , 1.79 ]]) 矩阵操作转置 python12x = np.arange(4).reshape((2,2))x array([[0, 1], [2, 3]]) python1np.transpose(x) array([[0, 2], [1, 3]]) python123456789def mypolyval(p, x):... print(p)... _p = list(p)... res = _p.pop(0)... while _p:... res = res*x + _p.pop(0)... print(res)... return res&gt;&gt;&gt; vpolyval = np.vectorize(mypolyval, excluded=['p']) python12vpolyval(p=[1, 2, 3], x=[0, 1])np.array([3, 6]) [1, 2, 3] 3 [1, 2, 3] 3 [1, 2, 3] 6 array([3, 6]) maskpython1a = np.arange(5) python12np.putmask(a, a&gt;1, a**2)a array([ 0, 1, 4, 9, 16]) python123a = np.arange(5)np.putmask(a, a&gt;1, [88,99,33])a array([ 0, 1, 33, 88, 99]) 索引，切片和迭代python12a = np.arange(10)**3a array([ 0, 1, 8, 27, 64, 125, 216, 343, 512, 729], dtype=int32) 索引和切片等间距索引 python12a[:6:2] = -1000 # equivalent to a[0:6:2] = -1000; a # from start to position 6, exclusive, set every 2nd element to -1000 array([-1000, 1, -1000, 27, -1000, 125, 216, 343, 512, 729], dtype=int32) 反向数组 python1a[ : :-1] array([ 729, 512, 343, 216, 125, -1000, 27, -1000, 1, -1000], dtype=int32) 多维数组索引 python1234def f(x,y): return 10*x+yb = np.fromfunction(f,(5,4),dtype=int)b array([[ 0, 1, 2, 3], [10, 11, 12, 13], [20, 21, 22, 23], [30, 31, 32, 33], [40, 41, 42, 43]]) python1b[2,3] 23 python1b[0:5, 1] # each row in the second column of b array([ 1, 11, 21, 31, 41]) python1b[ : ,1] # equivalent to the previous example array([ 1, 11, 21, 31, 41]) python1b[1:3, : ] # each column in the second and third row of b array([[10, 11, 12, 13], [20, 21, 22, 23]]) python1b[-1] # the last row. Equivalent to b[-1,:] array([40, 41, 42, 43]) python1b[-1,...] # the last row. Equivalent to b[-1,:] array([40, 41, 42, 43]) 高维切片 python12a = np.array([[1, 2], [3, 4], [5, 6]])a array([[1, 2], [3, 4], [5, 6]]) python1np.compress([0, 1], a, axis=0) array([[3, 4]]) 迭代python1234def f(x,y): return 10*x+yb = np.fromfunction(f,(5,4),dtype=int)b array([[ 0, 1, 2, 3], [10, 11, 12, 13], [20, 21, 22, 23], [30, 31, 32, 33], [40, 41, 42, 43]]) 第一个轴迭代 python12for row in b: print (row) [0 1 2 3] [10 11 12 13] [20 21 22 23] [30 31 32 33] [40 41 42 43] 每一个元素迭代 python12for element in b.flat: print (element,end=\",\") 0,1,2,3,10,11,12,13,20,21,22,23,30,31,32,33,40,41,42,43, enumerate 迭代 python12for index, x in np.ndenumerate(b): print(index, x) (0, 0) 0 (0, 1) 1 (0, 2) 2 (0, 3) 3 (1, 0) 10 (1, 1) 11 (1, 2) 12 (1, 3) 13 (2, 0) 20 (2, 1) 21 (2, 2) 22 (2, 3) 23 (3, 0) 30 (3, 1) 31 (3, 2) 32 (3, 3) 33 (4, 0) 40 (4, 1) 41 (4, 2) 42 (4, 3) 43 增加轴python1np.newaxis == None True python12x = np.arange(3)x array([0, 1, 2]) python1x[:, np.newaxis] array([[0], [1], [2]]) python1x[:, None] array([[0], [1], [2]]) 查看索引很方便的函数，可以查看一个指定shape的数组的每一个元素的index python1grid = np.indices((2, 3)) python1grid array([[[0, 0, 0], [1, 1, 1]], [[0, 1, 2], [0, 1, 2]]]) 形状操作python12a = np.floor(10*np.random.random((3,4)))a array([[ 5., 3., 6., 7.], [ 5., 5., 2., 8.], [ 1., 4., 7., 6.]]) python1a.shape (3, 4) 平坦化由ravel()展平的数组元素的顺序通常是 C风格 的，就是说，最右边的索引变化得最快，所以元素a[0,0]之后是a[0,1]。如果数组被改变形状(reshape)成其它形状，数组仍然是 C风格 的。Numpy通常创建一个以这个顺序保存数据的数组，所以ravel()将总是不需要复制它的参数。但是如果数组是通过切片其它数组或有不同寻常的选项时，它可能需要被复制。函数reshape()和ravel()还可以被同过一些可选参数构建成 FORTRAN风格 的数组，即最左边的索引变化最快 ravel可以按不同方式展开，可选 python1a.ravel() array([ 5., 3., 6., 7., 5., 5., 2., 8., 1., 4., 7., 6.]) flatten只能是按row展开 python1a.flatten() array([ 5., 3., 6., 7., 5., 5., 2., 8., 1., 4., 7., 6.]) a.flat 是一个iterator python12for b in a.flat: print(b) 5.0 3.0 6.0 7.0 5.0 5.0 2.0 8.0 1.0 4.0 7.0 6.0 np.reshape也可以完成同样的任务 python1np.reshape(a, (1, 12)).squeeze() array([ 5., 3., 6., 7., 5., 5., 2., 8., 1., 4., 7., 6.]) 转置python1a.transpose() array([[ 5., 5., 1.], [ 3., 5., 4.], [ 6., 2., 7.], [ 7., 8., 6.]]) 更改形状reshape和resize一样但是reshape不改变数组自身 python1a.reshape(2,6) array([[ 5., 3., 6., 7., 5., 5.], [ 2., 8., 1., 4., 7., 6.]]) python1a array([[ 5., 3., 6., 7.], [ 5., 5., 2., 8.], [ 1., 4., 7., 6.]]) python1a.resize(2,6) python1a array([[ 5., 3., 6., 7., 5., 5.], [ 2., 8., 1., 4., 7., 6.]]) 数组组合(stack) python12a = np.floor(10*np.random.random((2,2)))a array([[ 2., 5.], [ 5., 8.]]) python12b = np.floor(10*np.random.random((2,2)))b array([[ 5., 2.], [ 0., 0.]]) 组合纵向组合 vertical stack python1np.vstack((a,b)) array([[ 2., 5.], [ 5., 8.], [ 5., 2.], [ 0., 0.]]) 横向组合 horizontal stack python1np.hstack((a,b)) array([[ 2., 5., 5., 2.], [ 5., 8., 0., 0.]]) np.column_stack相当于vstack弱鸡版本，只能对一位数组用的vstack python1np.column_stack((a,b)) array([[ 2., 5., 5., 2.], [ 5., 8., 0., 0.]]) 分割python12a = np.floor(10*np.random.random((2,12)))a array([[ 4., 0., 7., 0., 8., 3., 5., 7., 9., 9., 9., 7.], [ 8., 1., 0., 0., 7., 4., 5., 8., 5., 6., 9., 7.]]) 纵向分割 python1np.hsplit(a ,3) [array([[ 4., 0., 7., 0.], [ 8., 1., 0., 0.]]), array([[ 8., 3., 5., 7.], [ 7., 4., 5., 8.]]), array([[ 9., 9., 9., 7.], [ 5., 6., 9., 7.]])] python1np.hsplit(a, (3,4)) [array([[ 4., 0., 7.], [ 8., 1., 0.]]), array([[ 0.], [ 0.]]), array([[ 8., 3., 5., 7., 9., 9., 9., 7.], [ 7., 4., 5., 8., 5., 6., 9., 7.]])] 任意轴分割 python1np.array_split(a, 2, axis=0) [array([[ 4., 0., 7., 0., 8., 3., 5., 7., 9., 9., 9., 7.]]), array([[ 8., 1., 0., 0., 7., 4., 5., 8., 5., 6., 9., 7.]])] 复制等号是相同数组 python123a = np.arange(12)b = a # no new object is createdb is a True python12b.shape = 3,4 # changes the shape of aa.shape (3, 4) 函数调用是相同数组 python12def f(x): print (id(x)) python1id(a) 1997431125376 python1f(a) 1997431125376 浅复制, 复制数据, 但是不复制其他属性 python1c = a.view() python1c is a False python1c.base is a True python1c.flags.owndata False python12c.shape = 2,6 # a's shape doesn't changea.shape (3, 4) python12c[0,4] = 1234 # a's data changesaa array([[ 0, 1, 2, 3], [1234, 5, 6, 7], [ 8, 9, 10, 11]]) python123s = a[ : , 1:3] # spaces added for clarity; could also be written \"s = a[:,1:3]\"s[:] = 10 # s[:] is a view of s. Note the difference between s=10 and s[:]=10a array([[ 0, 10, 10, 3], [1234, 10, 10, 7], [ 8, 10, 10, 11]]) 深复制 python12d=a.copy()d is a False python1d.base is a False python12d[0,0] = 9999a array([[ 0, 10, 10, 3], [1234, 10, 10, 7], [ 8, 10, 10, 11]])","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"numpy","slug":"numpy","permalink":"https://yangxiongwiki.com/tags/numpy/"},{"name":"kesci","slug":"kesci","permalink":"https://yangxiongwiki.com/tags/kesci/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"kesci_notes","slug":"python/kesci-notes","permalink":"https://yangxiongwiki.com/categories/python/kesci-notes/"}]},{"title":"pandas 10套练习","date":"2020-01-16T03:30:00.000Z","path":"2020/01/15/python/kesci_notes/pandas10套练习/","text":"此练习来自kesci.com 这十套练习，教你如何使用Pandas做数据分析 python12import pandas as pdimport numpy as np chipotle 快餐数据(基本操作)看基本数据python1chipo = pd.read_csv(\"chipotle.tsv\", sep=\"\\t\") python1chipo.head(10) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } order_id quantity item_name choice_description item_price 0 1 1 Chips and Fresh Tomato Salsa NaN $2.39 1 1 1 Izze [Clementine] $3.39 2 1 1 Nantucket Nectar [Apple] $3.39 3 1 1 Chips and Tomatillo-Green Chili Salsa NaN $2.39 4 2 2 Chicken Bowl [Tomatillo-Red Chili Salsa (Hot), [Black Beans... $16.98 5 3 1 Chicken Bowl [Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou... $10.98 6 3 1 Side of Chips NaN $1.69 7 4 1 Steak Burrito [Tomatillo Red Chili Salsa, [Fajita Vegetables... $11.75 8 4 1 Steak Soft Tacos [Tomatillo Green Chili Salsa, [Pinto Beans, Ch... $9.25 9 5 1 Steak Burrito [Fresh Tomato Salsa, [Rice, Black Beans, Pinto... $9.25 python1chipo.shape (4622, 5) python1chipo.columns Index([&#39;order_id&#39;, &#39;quantity&#39;, &#39;item_name&#39;, &#39;choice_description&#39;, &#39;item_price&#39;], dtype=&#39;object&#39;) python1chipo.index RangeIndex(start=0, stop=4622, step=1) 被下单最多的商品(item)?as_index=False 意思是不让item_name变成index.agg里面的字典表示你可以对每一列用不同的函数 python123c = chipo.groupby(['item_name'],as_index=False).agg(&#123;'quantity':sum&#125;)c.sort_values(['quantity'],ascending=False,inplace=True)c.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } item_name quantity 17 Chicken Bowl 761 18 Chicken Burrito 591 25 Chips and Guacamole 506 39 Steak Burrito 386 10 Canned Soft Drink 351 在item_name这一列中，一共有多少种商品被下单？¶python1chipo['item_name'].nunique() 50 步骤11 在choice_description中，下单次数最多的商品是什么？python123temp = chipo.groupby(['choice_description'],as_index=False).agg(&#123;'quantity':sum&#125;)temp.sort_values(by='quantity',inplace=True,ascending=False)temp .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } choice_description quantity 15 [Diet Coke] 159 14 [Coke] 143 583 [Sprite] 89 256 [Fresh Tomato Salsa, [Rice, Black Beans, Chees... 49 257 [Fresh Tomato Salsa, [Rice, Black Beans, Chees... 42 ... ... ... 496 [Roasted Chili Corn Salsa, [Fajita Vegetables,... 1 499 [Roasted Chili Corn Salsa, [Fajita Vegetables,... 1 502 [Roasted Chili Corn Salsa, [Fajita Vegetables,... 1 504 [Roasted Chili Corn Salsa, [Guacamole, Sour Cr... 1 1042 [[Tomatillo-Red Chili Salsa (Hot), Tomatillo-G... 1 1043 rows × 2 columns 一共有多少商品被下单？python1chipo.loc[:, 'quantity'].sum() 4972 将item_price转换为浮点数python1chipo['item_price'] = chipo.loc[:, 'item_price'].apply(lambda x: x[1:]).astype(np.float64) python1chipo['item_price'] 0 2.39 1 3.39 2 3.39 3 2.39 4 16.98 ... 4617 11.75 4618 11.75 4619 11.25 4620 8.75 4621 8.75 Name: item_price, Length: 4622, dtype: float64 在该数据集对应的时期内，收入(revenue)是多少python1chipo['sum_earn'] = chipo['quantity']*chipo['item_price'] python1chipo['sum_earn'].sum() 39237.02 在该数据集对应的时期内，一共有多少订单？python1chipo['order_id'].nunique() 1834 每一单(order)对应的平均总价是多少？python1chipo.groupby('order_id').agg(&#123;'sum_earn':sum&#125;).mean() sum_earn 21.394231 dtype: float64 一共有多少种不同的商品被售出python1chipo['item_name'].nunique() 50 探索2012欧洲杯数据(数据过滤排序)python1euro12 = pd.read_csv('Euro2012_stats.csv') python1euro12.head(5) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Team Goals Shots on target Shots off target Shooting Accuracy % Goals-to-shots Total shots (inc. Blocked) Hit Woodwork Penalty goals Penalties not scored ... Saves made Saves-to-shots ratio Fouls Won Fouls Conceded Offsides Yellow Cards Red Cards Subs on Subs off Players Used 0 Croatia 4 13 12 51.9% 16.0% 32 0 0 0 ... 13 81.3% 41 62 2 9 0 9 9 16 1 Czech Republic 4 13 18 41.9% 12.9% 39 0 0 0 ... 9 60.1% 53 73 8 7 0 11 11 19 2 Denmark 4 10 10 50.0% 20.0% 27 1 0 0 ... 10 66.7% 25 38 8 4 0 7 7 15 3 England 5 11 18 50.0% 17.2% 40 0 0 0 ... 22 88.1% 43 45 6 5 0 11 11 16 4 France 3 22 24 37.9% 6.5% 65 1 0 0 ... 6 54.6% 36 51 5 6 0 11 11 19 5 rows × 35 columns python1euro12['Goals'] 0 4 1 4 2 4 3 5 4 3 5 10 6 5 7 6 8 2 9 2 10 6 11 1 12 5 13 12 14 5 15 2 Name: Goals, dtype: int64 有多少球队参与了2012欧洲杯？python1euro12['Team'].nunique() 16 该数据集中一共有多少列(columns)?python1euro12.shape[1] 35 将数据集中的列Team, Yellow Cards和Red Cards单独存为一个名叫discipline的数据框python1discipline = euro12.loc[:,['Team', 'Yellow Cards', 'Red Cards']] python1discipline.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Team Yellow Cards Red Cards 0 Croatia 9 0 1 Czech Republic 7 0 2 Denmark 4 0 3 England 5 0 4 France 6 0 对数据框discipline按照先Red Cards再Yellow Cards进行排序python1discipline.sort_values(by=['Red Cards', 'Yellow Cards']) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Team Yellow Cards Red Cards 2 Denmark 4 0 5 Germany 4 0 3 England 5 0 8 Netherlands 5 0 15 Ukraine 5 0 4 France 6 0 12 Russia 6 0 1 Czech Republic 7 0 14 Sweden 7 0 0 Croatia 9 0 13 Spain 11 0 10 Portugal 12 0 7 Italy 16 0 11 Republic of Ireland 6 1 9 Poland 7 1 6 Greece 9 1 计算每个球队拿到的黄牌数的平均值python1discipline.groupby(['Team']).agg(&#123;'Yellow Cards':np.mean&#125;) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Yellow Cards Team Croatia 9 Czech Republic 7 Denmark 4 England 5 France 6 Germany 4 Greece 9 Italy 16 Netherlands 5 Poland 7 Portugal 12 Republic of Ireland 6 Russia 6 Spain 11 Sweden 7 Ukraine 5 找到进球数Goals超过6的球队数据python1euro12.loc[euro12.Goals&gt;6, :] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Team Goals Shots on target Shots off target Shooting Accuracy % Goals-to-shots Total shots (inc. Blocked) Hit Woodwork Penalty goals Penalties not scored ... Saves made Saves-to-shots ratio Fouls Won Fouls Conceded Offsides Yellow Cards Red Cards Subs on Subs off Players Used 5 Germany 10 32 32 47.8% 15.6% 80 2 1 0 ... 10 62.6% 63 49 12 4 0 15 15 17 13 Spain 12 42 33 55.9% 16.0% 100 0 1 0 ... 15 93.8% 102 83 19 11 0 17 17 18 2 rows × 35 columns 选取以字母G开头的球队数据python1%timeit euro12.loc[euro12.loc[:, \"Team\"].apply(lambda x: x.startswith(\"G\"))] 631 µs ± 7.93 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) python1%timeit euro12[euro12.Team.str.startswith('G')] 524 µs ± 3.51 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) 选取前7列python1euro12.iloc[:, 0:7] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Team Goals Shots on target Shots off target Shooting Accuracy % Goals-to-shots Total shots (inc. Blocked) 0 Croatia 4 13 12 51.9% 16.0% 32 1 Czech Republic 4 13 18 41.9% 12.9% 39 2 Denmark 4 10 10 50.0% 20.0% 27 3 England 5 11 18 50.0% 17.2% 40 4 France 3 22 24 37.9% 6.5% 65 5 Germany 10 32 32 47.8% 15.6% 80 6 Greece 5 8 18 30.7% 19.2% 32 7 Italy 6 34 45 43.0% 7.5% 110 8 Netherlands 2 12 36 25.0% 4.1% 60 9 Poland 2 15 23 39.4% 5.2% 48 10 Portugal 6 22 42 34.3% 9.3% 82 11 Republic of Ireland 1 7 12 36.8% 5.2% 28 12 Russia 5 9 31 22.5% 12.5% 59 13 Spain 12 42 33 55.9% 16.0% 100 14 Sweden 5 17 19 47.2% 13.8% 39 15 Ukraine 2 7 26 21.2% 6.0% 38 选取除了最后3列之外的全部列python1euro12.iloc[:, :-3] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Team Goals Shots on target Shots off target Shooting Accuracy % Goals-to-shots Total shots (inc. Blocked) Hit Woodwork Penalty goals Penalties not scored ... Clean Sheets Blocks Goals conceded Saves made Saves-to-shots ratio Fouls Won Fouls Conceded Offsides Yellow Cards Red Cards 0 Croatia 4 13 12 51.9% 16.0% 32 0 0 0 ... 0 10 3 13 81.3% 41 62 2 9 0 1 Czech Republic 4 13 18 41.9% 12.9% 39 0 0 0 ... 1 10 6 9 60.1% 53 73 8 7 0 2 Denmark 4 10 10 50.0% 20.0% 27 1 0 0 ... 1 10 5 10 66.7% 25 38 8 4 0 3 England 5 11 18 50.0% 17.2% 40 0 0 0 ... 2 29 3 22 88.1% 43 45 6 5 0 4 France 3 22 24 37.9% 6.5% 65 1 0 0 ... 1 7 5 6 54.6% 36 51 5 6 0 5 Germany 10 32 32 47.8% 15.6% 80 2 1 0 ... 1 11 6 10 62.6% 63 49 12 4 0 6 Greece 5 8 18 30.7% 19.2% 32 1 1 1 ... 1 23 7 13 65.1% 67 48 12 9 1 7 Italy 6 34 45 43.0% 7.5% 110 2 0 0 ... 2 18 7 20 74.1% 101 89 16 16 0 8 Netherlands 2 12 36 25.0% 4.1% 60 2 0 0 ... 0 9 5 12 70.6% 35 30 3 5 0 9 Poland 2 15 23 39.4% 5.2% 48 0 0 0 ... 0 8 3 6 66.7% 48 56 3 7 1 10 Portugal 6 22 42 34.3% 9.3% 82 6 0 0 ... 2 11 4 10 71.5% 73 90 10 12 0 11 Republic of Ireland 1 7 12 36.8% 5.2% 28 0 0 0 ... 0 23 9 17 65.4% 43 51 11 6 1 12 Russia 5 9 31 22.5% 12.5% 59 2 0 0 ... 0 8 3 10 77.0% 34 43 4 6 0 13 Spain 12 42 33 55.9% 16.0% 100 0 1 0 ... 5 8 1 15 93.8% 102 83 19 11 0 14 Sweden 5 17 19 47.2% 13.8% 39 3 0 0 ... 1 12 5 8 61.6% 35 51 7 7 0 15 Ukraine 2 7 26 21.2% 6.0% 38 0 0 0 ... 0 4 4 13 76.5% 48 31 4 5 0 16 rows × 32 columns 找到英格兰(England)、意大利(Italy)和俄罗斯(Russia)的射正率(Shooting Accuracy)python1euro12[euro12.Team.isin(['England', 'Italy', 'Russia'])].loc[:,[\"Team\", \"Shooting Accuracy\"]] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Team Shooting Accuracy 3 England 50.0% 7 Italy 43.0% 12 Russia 22.5% python1euro12.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Team Goals Shots on target Shots off target Shooting Accuracy % Goals-to-shots Total shots (inc. Blocked) Hit Woodwork Penalty goals Penalties not scored ... Saves made Saves-to-shots ratio Fouls Won Fouls Conceded Offsides Yellow Cards Red Cards Subs on Subs off Players Used 0 Croatia 4 13 12 51.9% 16.0% 32 0 0 0 ... 13 81.3% 41 62 2 9 0 9 9 16 1 Czech Republic 4 13 18 41.9% 12.9% 39 0 0 0 ... 9 60.1% 53 73 8 7 0 11 11 19 2 Denmark 4 10 10 50.0% 20.0% 27 1 0 0 ... 10 66.7% 25 38 8 4 0 7 7 15 3 England 5 11 18 50.0% 17.2% 40 0 0 0 ... 22 88.1% 43 45 6 5 0 11 11 16 4 France 3 22 24 37.9% 6.5% 65 1 0 0 ... 6 54.6% 36 51 5 6 0 11 11 19 5 rows × 35 columns python1discipline.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Team Yellow Cards Red Cards 0 Croatia 9 0 1 Czech Republic 7 0 2 Denmark 4 0 3 England 5 0 4 France 6 0 探索酒类消费数据(数据分类统计)python1drinks = pd.read_csv('drinks.csv') python1drinks.head(5) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } country beer_servings spirit_servings wine_servings total_litres_of_pure_alcohol continent 0 Afghanistan 0 0 0 0.0 AS 1 Albania 89 132 54 4.9 EU 2 Algeria 25 0 14 0.7 AF 3 Andorra 245 138 312 12.4 EU 4 Angola 217 57 45 5.9 AF python1drinks.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } beer_servings spirit_servings wine_servings total_litres_of_pure_alcohol count 193.000000 193.000000 193.000000 193.000000 mean 106.160622 80.994819 49.450777 4.717098 std 101.143103 88.284312 79.697598 3.773298 min 0.000000 0.000000 0.000000 0.000000 25% 20.000000 4.000000 1.000000 1.300000 50% 76.000000 56.000000 8.000000 4.200000 75% 188.000000 128.000000 59.000000 7.200000 max 376.000000 438.000000 370.000000 14.400000 python1drinks.info() &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 193 entries, 0 to 192 Data columns (total 6 columns): country 193 non-null object beer_servings 193 non-null int64 spirit_servings 193 non-null int64 wine_servings 193 non-null int64 total_litres_of_pure_alcohol 193 non-null float64 continent 170 non-null object dtypes: float64(1), int64(3), object(2) memory usage: 9.2+ KB 哪个大陆(continent)平均消耗的啤酒(beer)更多？python1drinks.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } country beer_servings spirit_servings wine_servings total_litres_of_pure_alcohol continent 0 Afghanistan 0 0 0 0.0 AS 1 Albania 89 132 54 4.9 EU 2 Algeria 25 0 14 0.7 AF 3 Andorra 245 138 312 12.4 EU 4 Angola 217 57 45 5.9 AF python1drinks.groupby('continent').agg(&#123;'beer_servings':np.mean&#125;).sort_values('beer_servings', ascending=False) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } beer_servings continent EU 193.777778 SA 175.083333 OC 89.687500 AF 61.471698 AS 37.045455 打印出每个大陆(continent)的红酒消耗(wine_servings)的描述性统计值python1drinks.loc[:, ['continent','wine_servings']].groupby('continent').describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead tr th { text-align: left; } .dataframe thead tr:last-of-type th { text-align: right; } wine_servings count mean std min 25% 50% 75% max continent AF 53.0 16.264151 38.846419 0.0 1.0 2.0 13.00 233.0 AS 44.0 9.068182 21.667034 0.0 0.0 1.0 8.00 123.0 EU 45.0 142.222222 97.421738 0.0 59.0 128.0 195.00 370.0 OC 16.0 35.625000 64.555790 0.0 1.0 8.5 23.25 212.0 SA 12.0 62.416667 88.620189 1.0 3.0 12.0 98.50 221.0 python1%timeit drinks.loc[:, ['continent','wine_servings']].groupby('continent').describe() 21 ms ± 577 µs per loop (mean ± std. dev. of 7 runs, 10 loops each) python1drinks.groupby('continent').wine_servings.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } count mean std min 25% 50% 75% max continent AF 53.0 16.264151 38.846419 0.0 1.0 2.0 13.00 233.0 AS 44.0 9.068182 21.667034 0.0 0.0 1.0 8.00 123.0 EU 45.0 142.222222 97.421738 0.0 59.0 128.0 195.00 370.0 OC 16.0 35.625000 64.555790 0.0 1.0 8.5 23.25 212.0 SA 12.0 62.416667 88.620189 1.0 3.0 12.0 98.50 221.0 python1%timeit drinks.groupby('continent').wine_servings.describe() 9.78 ms ± 292 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) python1drinks.groupby('continent').agg(&#123;'wine_servings': 'describe'&#125;) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead tr th { text-align: left; } .dataframe thead tr:last-of-type th { text-align: right; } wine_servings count mean std min 25% 50% 75% max continent AF 53.0 16.264151 38.846419 0.0 1.0 2.0 13.00 233.0 AS 44.0 9.068182 21.667034 0.0 0.0 1.0 8.00 123.0 EU 45.0 142.222222 97.421738 0.0 59.0 128.0 195.00 370.0 OC 16.0 35.625000 64.555790 0.0 1.0 8.5 23.25 212.0 SA 12.0 62.416667 88.620189 1.0 3.0 12.0 98.50 221.0 python1%timeit drinks.groupby('continent').agg(&#123;'wine_servings': 'describe'&#125;) 10.6 ms ± 80.9 µs per loop (mean ± std. dev. of 7 runs, 100 loops each) 打印出每个大陆每种酒类别的消耗平均值python1drinks.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } country beer_servings spirit_servings wine_servings total_litres_of_pure_alcohol continent 0 Afghanistan 0 0 0 0.0 AS 1 Albania 89 132 54 4.9 EU 2 Algeria 25 0 14 0.7 AF 3 Andorra 245 138 312 12.4 EU 4 Angola 217 57 45 5.9 AF python1drinks.groupby('continent').mean() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } beer_servings spirit_servings wine_servings total_litres_of_pure_alcohol continent AF 61.471698 16.339623 16.264151 3.007547 AS 37.045455 60.840909 9.068182 2.170455 EU 193.777778 132.555556 142.222222 8.617778 OC 89.687500 58.437500 35.625000 3.381250 SA 175.083333 114.750000 62.416667 6.308333 打印出每个大陆每种酒类别的消耗中位数python1drinks.groupby('continent').median() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } beer_servings spirit_servings wine_servings total_litres_of_pure_alcohol continent AF 32.0 3.0 2.0 2.30 AS 17.5 16.0 1.0 1.20 EU 219.0 122.0 128.0 10.00 OC 52.5 37.0 8.5 1.75 SA 162.5 108.5 12.0 6.85 打印出每个大陆对spirit饮品消耗的平均值，最大值和最小值¶python1drinks.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } country beer_servings spirit_servings wine_servings total_litres_of_pure_alcohol continent 0 Afghanistan 0 0 0 0.0 AS 1 Albania 89 132 54 4.9 EU 2 Algeria 25 0 14 0.7 AF 3 Andorra 245 138 312 12.4 EU 4 Angola 217 57 45 5.9 AF python1drinks.groupby('continent').agg(&#123;'spirit_servings':['mean','min','max']&#125;) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead tr th { text-align: left; } .dataframe thead tr:last-of-type th { text-align: right; } spirit_servings mean min max continent AF 16.339623 0 152 AS 60.840909 0 326 EU 132.555556 0 373 OC 58.437500 0 254 SA 114.750000 25 302 探索1960 - 2014 美国犯罪数据(apply函数)python1crime = pd.read_csv('US_Crime_Rates_1960_2014.csv') python1crime.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Year Population Total Violent Property Murder Forcible_Rape Robbery Aggravated_assault Burglary Larceny_Theft Vehicle_Theft 0 1960 179323175 3384200 288460 3095700 9110 17190 107840 154320 912100 1855400 328200 1 1961 182992000 3488000 289390 3198600 8740 17220 106670 156760 949600 1913000 336000 2 1962 185771000 3752200 301510 3450700 8530 17550 110860 164570 994300 2089600 366800 3 1963 188483000 4109500 316970 3792500 8640 17650 116470 174210 1086400 2297800 408300 4 1964 191141000 4564600 364220 4200400 9360 21420 130390 203050 1213200 2514400 472800 python1crime.info() &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 55 entries, 0 to 54 Data columns (total 12 columns): Year 55 non-null int64 Population 55 non-null int64 Total 55 non-null int64 Violent 55 non-null int64 Property 55 non-null int64 Murder 55 non-null int64 Forcible_Rape 55 non-null int64 Robbery 55 non-null int64 Aggravated_assault 55 non-null int64 Burglary 55 non-null int64 Larceny_Theft 55 non-null int64 Vehicle_Theft 55 non-null int64 dtypes: int64(12) memory usage: 5.3 KB python1crime.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Year Population Total Violent Property Murder Forcible_Rape Robbery Aggravated_assault Burglary Larceny_Theft Vehicle_Theft count 55.00000 5.500000e+01 5.500000e+01 5.500000e+01 5.500000e+01 55.000000 55.000000 55.000000 5.500000e+01 5.500000e+01 5.500000e+01 5.500000e+01 mean 1987.00000 2.461556e+08 1.060315e+07 1.188806e+06 9.412499e+06 17317.236364 72714.800000 416449.890909 6.811818e+05 2.424017e+06 5.959947e+06 1.028614e+06 std 16.02082 4.166216e+07 3.175931e+06 4.597107e+05 2.738512e+06 4267.442664 28278.006893 150506.403782 2.960255e+05 7.259004e+05 1.846401e+06 3.455693e+05 min 1960.00000 1.793232e+08 3.384200e+06 2.884600e+05 3.095700e+06 8530.000000 17190.000000 106670.000000 1.543200e+05 9.121000e+05 1.855400e+06 3.282000e+05 25% 1973.50000 2.106215e+08 9.096958e+06 9.253150e+05 8.060014e+06 14819.000000 53400.000000 354911.500000 4.384300e+05 2.105336e+06 4.843350e+06 7.896260e+05 50% 1987.00000 2.422829e+08 1.140151e+07 1.322390e+06 1.018259e+07 17030.000000 84230.000000 423557.000000 7.412910e+05 2.329950e+06 6.591900e+06 1.032200e+06 75% 2000.50000 2.833697e+08 1.308449e+07 1.432762e+06 1.160509e+07 20561.500000 92930.000000 512137.000000 9.002150e+05 3.073600e+06 7.168450e+06 1.239302e+06 max 2014.00000 3.188571e+08 1.487290e+07 1.932270e+06 1.296110e+07 24700.000000 109060.000000 687730.000000 1.135610e+06 3.795200e+06 8.142200e+06 1.661700e+06 将Year的数据类型转换为 datetime64python12crime.Year = pd.to_datetime(crime.Year, format='%Y')crime.info() &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 55 entries, 0 to 54 Data columns (total 12 columns): Year 55 non-null datetime64[ns] Population 55 non-null int64 Total 55 non-null int64 Violent 55 non-null int64 Property 55 non-null int64 Murder 55 non-null int64 Forcible_Rape 55 non-null int64 Robbery 55 non-null int64 Aggravated_assault 55 non-null int64 Burglary 55 non-null int64 Larceny_Theft 55 non-null int64 Vehicle_Theft 55 non-null int64 dtypes: datetime64[ns](1), int64(11) memory usage: 5.3 KB 将列Year设置为数据框的索引python12crime.set_index('Year', inplace=True)crime.head(5) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Population Total Violent Property Murder Forcible_Rape Robbery Aggravated_assault Burglary Larceny_Theft Vehicle_Theft Year 1960-01-01 179323175 3384200 288460 3095700 9110 17190 107840 154320 912100 1855400 328200 1961-01-01 182992000 3488000 289390 3198600 8740 17220 106670 156760 949600 1913000 336000 1962-01-01 185771000 3752200 301510 3450700 8530 17550 110860 164570 994300 2089600 366800 1963-01-01 188483000 4109500 316970 3792500 8640 17650 116470 174210 1086400 2297800 408300 1964-01-01 191141000 4564600 364220 4200400 9360 21420 130390 203050 1213200 2514400 472800 删除名为Total的列 python1crime.drop(['Total'],axis=1,inplace=True) python1crime.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Population Violent Property Murder Forcible_Rape Robbery Aggravated_assault Burglary Larceny_Theft Vehicle_Theft Year 1960-01-01 179323175 288460 3095700 9110 17190 107840 154320 912100 1855400 328200 1961-01-01 182992000 289390 3198600 8740 17220 106670 156760 949600 1913000 336000 1962-01-01 185771000 301510 3450700 8530 17550 110860 164570 994300 2089600 366800 1963-01-01 188483000 316970 3792500 8640 17650 116470 174210 1086400 2297800 408300 1964-01-01 191141000 364220 4200400 9360 21420 130390 203050 1213200 2514400 472800 按照Year对数据框进行10年的采样并求和 python12345678crimes = crime.resample('10AS').sum()# 用resample去得到“Population”列的最大值population = crime['Population'].resample('10AS').max()# 更新 \"Population\" crimes['Population'] = populationcrimes .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Population Violent Property Murder Forcible_Rape Robbery Aggravated_assault Burglary Larceny_Theft Vehicle_Theft Year 1960-01-01 201385000 4134930 45160900 106180 236720 1633510 2158520 13321100 26547700 5292100 1970-01-01 220099000 9607930 91383800 192230 554570 4159020 4702120 28486000 53157800 9739900 1980-01-01 248239000 14074328 117048900 206439 865639 5383109 7619130 33073494 72040253 11935411 1990-01-01 272690813 17527048 119053499 211664 998827 5748930 10568963 26750015 77679366 14624418 2000-01-01 307006550 13968056 100944369 163068 922499 4230366 8652124 21565176 67970291 11412834 2010-01-01 318857056 6072017 44095950 72867 421059 1749809 3764142 10125170 30401698 3569080 何时是美国历史上生存最危险的年代？python1crime.idxmax() Population 2014-01-01 Violent 1992-01-01 Property 1991-01-01 Murder 1991-01-01 Forcible_Rape 1992-01-01 Robbery 1991-01-01 Aggravated_assault 1993-01-01 Burglary 1980-01-01 Larceny_Theft 1991-01-01 Vehicle_Theft 1991-01-01 dtype: datetime64[ns] 探索虚拟姓名数据(数据整合)python1234567891011121314# 运行以下代码raw_data_1 = &#123; 'subject_id': ['1', '2', '3', '4', '5'], 'first_name': ['Alex', 'Amy', 'Allen', 'Alice', 'Ayoung'], 'last_name': ['Anderson', 'Ackerman', 'Ali', 'Aoni', 'Atiches']&#125;raw_data_2 = &#123; 'subject_id': ['4', '5', '6', '7', '8'], 'first_name': ['Billy', 'Brian', 'Bran', 'Bryce', 'Betty'], 'last_name': ['Bonder', 'Black', 'Balwner', 'Brice', 'Btisan']&#125;raw_data_3 = &#123; 'subject_id': ['1', '2', '3', '4', '5', '7', '8', '9', '10', '11'], 'test_id': [51, 15, 15, 61, 16, 14, 15, 1, 61, 16]&#125; python1234# 运行以下代码data1 = pd.DataFrame(raw_data_1, columns = ['subject_id', 'first_name', 'last_name'])data2 = pd.DataFrame(raw_data_2, columns = ['subject_id', 'first_name', 'last_name'])data3 = pd.DataFrame(raw_data_3, columns = ['subject_id','test_id']) python1data1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } subject_id first_name last_name 0 1 Alex Anderson 1 2 Amy Ackerman 2 3 Allen Ali 3 4 Alice Aoni 4 5 Ayoung Atiches python1data2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } subject_id first_name last_name 0 4 Billy Bonder 1 5 Brian Black 2 6 Bran Balwner 3 7 Bryce Brice 4 8 Betty Btisan python1data3 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } subject_id test_id 0 1 51 1 2 15 2 3 15 3 4 61 4 5 16 5 7 14 6 8 15 7 9 1 8 10 61 9 11 16 将data1和data2两个数据框按照行的维度进行合并，命名为all_datapython12all_data = pd.concat([data1, data2], axis=0)all_data .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } subject_id first_name last_name 0 1 Alex Anderson 1 2 Amy Ackerman 2 3 Allen Ali 3 4 Alice Aoni 4 5 Ayoung Atiches 0 4 Billy Bonder 1 5 Brian Black 2 6 Bran Balwner 3 7 Bryce Brice 4 8 Betty Btisan 将data1和data2两个数据框按照列的维度进行合并，命名为all_data_col python12all_data_col = pd.concat([data1, data2], axis=1)all_data_col .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } subject_id first_name last_name subject_id first_name last_name 0 1 Alex Anderson 4 Billy Bonder 1 2 Amy Ackerman 5 Brian Black 2 3 Allen Ali 6 Bran Balwner 3 4 Alice Aoni 7 Bryce Brice 4 5 Ayoung Atiches 8 Betty Btisan 按照subject_id的值对all_data和data3作合并python12%%timepd.merge(all_data, data3, on='subject_id') Wall time: 3.07 ms .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } subject_id first_name last_name test_id 0 1 Alex Anderson 51 1 2 Amy Ackerman 15 2 3 Allen Ali 15 3 4 Alice Aoni 61 4 4 Billy Bonder 61 5 5 Ayoung Atiches 16 6 5 Brian Black 16 7 7 Bryce Brice 14 8 8 Betty Btisan 15 python12%%timeall_data.join(data3.set_index('subject_id'),on='subject_id') Wall time: 3.38 ms .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } subject_id first_name last_name test_id 0 1 Alex Anderson 51.0 1 2 Amy Ackerman 15.0 2 3 Allen Ali 15.0 3 4 Alice Aoni 61.0 4 5 Ayoung Atiches 16.0 0 4 Billy Bonder 61.0 1 5 Brian Black 16.0 2 6 Bran Balwner NaN 3 7 Bryce Brice 14.0 4 8 Betty Btisan 15.0 对data1和data2按照subject_id作连接python1pd.concat([data1, data2]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } subject_id first_name last_name 0 1 Alex Anderson 1 2 Amy Ackerman 2 3 Allen Ali 3 4 Alice Aoni 4 5 Ayoung Atiches 0 4 Billy Bonder 1 5 Brian Black 2 6 Bran Balwner 3 7 Bryce Brice 4 8 Betty Btisan python1pd.merge(data1, data2, on='subject_id', how='outer') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } subject_id first_name_x last_name_x first_name_y last_name_y 0 1 Alex Anderson NaN NaN 1 2 Amy Ackerman NaN NaN 2 3 Allen Ali NaN NaN 3 4 Alice Aoni Billy Bonder 4 5 Ayoung Atiches Brian Black 5 6 NaN NaN Bran Balwner 6 7 NaN NaN Bryce Brice 7 8 NaN NaN Betty Btisan 探索风速数据(描述统计)python1import datetime python12path6 = \"wind.data\"data = pd.read_table(path6, sep = \"\\s+\", parse_dates = [[0,1,2]]) python1data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Yr_Mo_Dy RPT VAL ROS KIL SHA BIR DUB CLA MUL CLO BEL MAL 0 2061-01-01 15.04 14.96 13.17 9.29 NaN 9.87 13.67 10.25 10.83 12.58 18.50 15.04 1 2061-01-02 14.71 NaN 10.83 6.50 12.62 7.67 11.50 10.04 9.79 9.67 17.54 13.83 2 2061-01-03 18.50 16.88 12.33 10.13 11.17 6.17 11.25 NaN 8.50 7.67 12.75 12.71 3 2061-01-04 10.58 6.63 11.75 4.58 4.54 2.88 8.63 1.79 5.83 5.88 5.46 10.88 4 2061-01-05 13.33 13.25 11.42 6.17 10.71 8.21 11.92 6.54 10.92 10.34 12.92 11.83 python1data.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } RPT VAL ROS KIL SHA BIR DUB CLA MUL CLO BEL MAL count 6568.000000 6571.000000 6572.000000 6569.000000 6572.000000 6574.000000 6571.000000 6572.000000 6571.000000 6573.000000 6574.000000 6570.000000 mean 12.362987 10.644314 11.660526 6.306468 10.455834 7.092254 9.797343 8.495053 8.493590 8.707332 13.121007 15.599079 std 5.618413 5.267356 5.008450 3.605811 4.936125 3.968683 4.977555 4.499449 4.166872 4.503954 5.835037 6.699794 min 0.670000 0.210000 1.500000 0.000000 0.130000 0.000000 0.000000 0.000000 0.000000 0.040000 0.130000 0.670000 25% 8.120000 6.670000 8.000000 3.580000 6.750000 4.000000 6.000000 5.090000 5.370000 5.330000 8.710000 10.710000 50% 11.710000 10.170000 10.920000 5.750000 9.960000 6.830000 9.210000 8.080000 8.170000 8.290000 12.500000 15.000000 75% 15.920000 14.040000 14.670000 8.420000 13.540000 9.670000 12.960000 11.420000 11.190000 11.630000 16.880000 19.830000 max 35.800000 33.370000 33.840000 28.460000 37.540000 26.160000 30.370000 31.080000 25.880000 28.210000 42.380000 42.540000 python1data.info() &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 6574 entries, 0 to 6573 Data columns (total 13 columns): Yr_Mo_Dy 6574 non-null datetime64[ns] RPT 6568 non-null float64 VAL 6571 non-null float64 ROS 6572 non-null float64 KIL 6569 non-null float64 SHA 6572 non-null float64 BIR 6574 non-null float64 DUB 6571 non-null float64 CLA 6572 non-null float64 MUL 6571 non-null float64 CLO 6573 non-null float64 BEL 6574 non-null float64 MAL 6570 non-null float64 dtypes: datetime64[ns](1), float64(12) memory usage: 667.8 KB 2061年？我们真的有这一年的数据？创建一个函数并用它去修复这个bugpython123def fix_year(date): new_year = date.year - 100 if date.year&gt; 1989 else date.year return datetime.date(new_year, date.month, date.day) python1data['Yr_Mo_Dy'] = data['Yr_Mo_Dy'].apply(fix_year) python1data.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Yr_Mo_Dy RPT VAL ROS KIL SHA BIR DUB CLA MUL CLO BEL MAL 0 1961-01-01 15.04 14.96 13.17 9.29 NaN 9.87 13.67 10.25 10.83 12.58 18.50 15.04 1 1961-01-02 14.71 NaN 10.83 6.50 12.62 7.67 11.50 10.04 9.79 9.67 17.54 13.83 2 1961-01-03 18.50 16.88 12.33 10.13 11.17 6.17 11.25 NaN 8.50 7.67 12.75 12.71 3 1961-01-04 10.58 6.63 11.75 4.58 4.54 2.88 8.63 1.79 5.83 5.88 5.46 10.88 4 1961-01-05 13.33 13.25 11.42 6.17 10.71 8.21 11.92 6.54 10.92 10.34 12.92 11.83 将日期设为索引，注意数据类型，应该是datetime64[ns]python1234%%timedata['Yr_Mo_Dy']= pd.to_datetime(data[\"Yr_Mo_Dy\"])data = data.set_index('Yr_Mo_Dy')data.head() Wall time: 3.41 ms .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } RPT VAL ROS KIL SHA BIR DUB CLA MUL CLO BEL MAL Yr_Mo_Dy 1961-01-01 15.04 14.96 13.17 9.29 NaN 9.87 13.67 10.25 10.83 12.58 18.50 15.04 1961-01-02 14.71 NaN 10.83 6.50 12.62 7.67 11.50 10.04 9.79 9.67 17.54 13.83 1961-01-03 18.50 16.88 12.33 10.13 11.17 6.17 11.25 NaN 8.50 7.67 12.75 12.71 1961-01-04 10.58 6.63 11.75 4.58 4.54 2.88 8.63 1.79 5.83 5.88 5.46 10.88 1961-01-05 13.33 13.25 11.42 6.17 10.71 8.21 11.92 6.54 10.92 10.34 12.92 11.83 对应每一个location，一共有多少数据值缺失python1data.isnull().sum() RPT 6 VAL 3 ROS 2 KIL 5 SHA 2 BIR 0 DUB 3 CLA 2 MUL 3 CLO 1 BEL 0 MAL 4 dtype: int64 对应每一个location，一共有多少完整的数据值python1data.count() RPT 6568 VAL 6571 ROS 6572 KIL 6569 SHA 6572 BIR 6574 DUB 6571 CLA 6572 MUL 6571 CLO 6573 BEL 6574 MAL 6570 dtype: int64 python12#官方答案data.shape[0] - data.isnull().sum() RPT 6568 VAL 6571 ROS 6572 KIL 6569 SHA 6572 BIR 6574 DUB 6571 CLA 6572 MUL 6571 CLO 6573 BEL 6574 MAL 6570 dtype: int64 对于全体数据，计算风速的平均值python1data.mean().mean() 10.227982360836924 创建一个名为loc_stats的数据框去计算并存储每个location的风速最小值，最大值，平均值和标准差python1loc_states = pd.DataFrame() python1234loc_states['min'] = data.min()loc_states['max'] = data.max()loc_states['mean'] = data.mean()loc_states['std'] = data.std() python1loc_states .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } min max mean std RPT 0.67 35.80 12.362987 5.618413 VAL 0.21 33.37 10.644314 5.267356 ROS 1.50 33.84 11.660526 5.008450 KIL 0.00 28.46 6.306468 3.605811 SHA 0.13 37.54 10.455834 4.936125 BIR 0.00 26.16 7.092254 3.968683 DUB 0.00 30.37 9.797343 4.977555 CLA 0.00 31.08 8.495053 4.499449 MUL 0.00 25.88 8.493590 4.166872 CLO 0.04 28.21 8.707332 4.503954 BEL 0.13 42.38 13.121007 5.835037 MAL 0.67 42.54 15.599079 6.699794 创建一个名为day_stats的数据框去计算并存储所有location的风速最小值，最大值，平均值和标准差python123456789%%timeday_stats = pd.Series()data_stack = data.stack()day_stats['min'] = data_stack.min() # minday_stats['max'] = data_stack.max() # max day_stats['mean'] = data_stack.mean() # meanday_stats['std'] = data_stack.std(ddof=1) # standard deviationsday_stats.head() Wall time: 11 ms min 0.000000 max 42.540000 mean 10.227884 std 5.603872 dtype: float64 python1234567891011# 官方答案# create the dataframeday_stats = pd.DataFrame()# this time we determine axis equals to one so it gets each row.day_stats['min'] = data.min(axis = 1) # minday_stats['max'] = data.max(axis = 1) # max day_stats['mean'] = data.mean(axis = 1) # meanday_stats['std'] = data.std(axis = 1) # standard deviationsday_stats.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } min max mean std Yr_Mo_Dy 1961-01-01 9.29 18.50 13.018182 2.808875 1961-01-02 6.50 17.54 11.336364 3.188994 1961-01-03 6.17 18.50 11.641818 3.681912 1961-01-04 1.79 11.75 6.619167 3.198126 1961-01-05 6.17 13.33 10.630000 2.445356 对于每一个location，计算一月份的平均风速¶注意，1961年的1月和1962年的1月应该区别对待 python12345data['date'] = data.index# creates a column for each value from datedata['month'] = data['date'].apply(lambda date: date.month)data['year'] = data['date'].apply(lambda date: date.year)data['day'] = data['date'].apply(lambda date: date.day) python12# gets all value from the month 1 and assign to janyary_windsjanuary_winds = data[data['month'] == 1] python1january_winds.loc[:,'RPT':\"MAL\"].mean() RPT 14.847325 VAL 12.914560 ROS 13.299624 KIL 7.199498 SHA 11.667734 BIR 8.054839 DUB 11.819355 CLA 9.512047 MUL 9.543208 CLO 10.053566 BEL 14.550520 MAL 18.028763 dtype: float64 对于数据记录按照年为频率取样python12%%timedata.query('month == 1 and day == 1') Wall time: 3.38 ms .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } RPT VAL ROS KIL SHA BIR DUB CLA MUL CLO BEL MAL date month year day Yr_Mo_Dy 1961-01-01 15.04 14.96 13.17 9.29 NaN 9.87 13.67 10.25 10.83 12.58 18.50 15.04 1961-01-01 1 1961 1 1962-01-01 9.29 3.42 11.54 3.50 2.21 1.96 10.41 2.79 3.54 5.17 4.38 7.92 1962-01-01 1 1962 1 1963-01-01 15.59 13.62 19.79 8.38 12.25 10.00 23.45 15.71 13.59 14.37 17.58 34.13 1963-01-01 1 1963 1 1964-01-01 25.80 22.13 18.21 13.25 21.29 14.79 14.12 19.58 13.25 16.75 28.96 21.00 1964-01-01 1 1964 1 1965-01-01 9.54 11.92 9.00 4.38 6.08 5.21 10.25 6.08 5.71 8.63 12.04 17.41 1965-01-01 1 1965 1 1966-01-01 22.04 21.50 17.08 12.75 22.17 15.59 21.79 18.12 16.66 17.83 28.33 23.79 1966-01-01 1 1966 1 1967-01-01 6.46 4.46 6.50 3.21 6.67 3.79 11.38 3.83 7.71 9.08 10.67 20.91 1967-01-01 1 1967 1 1968-01-01 30.04 17.88 16.25 16.25 21.79 12.54 18.16 16.62 18.75 17.62 22.25 27.29 1968-01-01 1 1968 1 1969-01-01 6.13 1.63 5.41 1.08 2.54 1.00 8.50 2.42 4.58 6.34 9.17 16.71 1969-01-01 1 1969 1 1970-01-01 9.59 2.96 11.79 3.42 6.13 4.08 9.00 4.46 7.29 3.50 7.33 13.00 1970-01-01 1 1970 1 1971-01-01 3.71 0.79 4.71 0.17 1.42 1.04 4.63 0.75 1.54 1.08 4.21 9.54 1971-01-01 1 1971 1 1972-01-01 9.29 3.63 14.54 4.25 6.75 4.42 13.00 5.33 10.04 8.54 8.71 19.17 1972-01-01 1 1972 1 1973-01-01 16.50 15.92 14.62 7.41 8.29 11.21 13.54 7.79 10.46 10.79 13.37 9.71 1973-01-01 1 1973 1 1974-01-01 23.21 16.54 16.08 9.75 15.83 11.46 9.54 13.54 13.83 16.66 17.21 25.29 1974-01-01 1 1974 1 1975-01-01 14.04 13.54 11.29 5.46 12.58 5.58 8.12 8.96 9.29 5.17 7.71 11.63 1975-01-01 1 1975 1 1976-01-01 18.34 17.67 14.83 8.00 16.62 10.13 13.17 9.04 13.13 5.75 11.38 14.96 1976-01-01 1 1976 1 1977-01-01 20.04 11.92 20.25 9.13 9.29 8.04 10.75 5.88 9.00 9.00 14.88 25.70 1977-01-01 1 1977 1 1978-01-01 8.33 7.12 7.71 3.54 8.50 7.50 14.71 10.00 11.83 10.00 15.09 20.46 1978-01-01 1 1978 1 python12%%timedata[(data['month']==1) &amp; (data['day']==1)] Wall time: 997 µs .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } RPT VAL ROS KIL SHA BIR DUB CLA MUL CLO BEL MAL date month year day Yr_Mo_Dy 1961-01-01 15.04 14.96 13.17 9.29 NaN 9.87 13.67 10.25 10.83 12.58 18.50 15.04 1961-01-01 1 1961 1 1962-01-01 9.29 3.42 11.54 3.50 2.21 1.96 10.41 2.79 3.54 5.17 4.38 7.92 1962-01-01 1 1962 1 1963-01-01 15.59 13.62 19.79 8.38 12.25 10.00 23.45 15.71 13.59 14.37 17.58 34.13 1963-01-01 1 1963 1 1964-01-01 25.80 22.13 18.21 13.25 21.29 14.79 14.12 19.58 13.25 16.75 28.96 21.00 1964-01-01 1 1964 1 1965-01-01 9.54 11.92 9.00 4.38 6.08 5.21 10.25 6.08 5.71 8.63 12.04 17.41 1965-01-01 1 1965 1 1966-01-01 22.04 21.50 17.08 12.75 22.17 15.59 21.79 18.12 16.66 17.83 28.33 23.79 1966-01-01 1 1966 1 1967-01-01 6.46 4.46 6.50 3.21 6.67 3.79 11.38 3.83 7.71 9.08 10.67 20.91 1967-01-01 1 1967 1 1968-01-01 30.04 17.88 16.25 16.25 21.79 12.54 18.16 16.62 18.75 17.62 22.25 27.29 1968-01-01 1 1968 1 1969-01-01 6.13 1.63 5.41 1.08 2.54 1.00 8.50 2.42 4.58 6.34 9.17 16.71 1969-01-01 1 1969 1 1970-01-01 9.59 2.96 11.79 3.42 6.13 4.08 9.00 4.46 7.29 3.50 7.33 13.00 1970-01-01 1 1970 1 1971-01-01 3.71 0.79 4.71 0.17 1.42 1.04 4.63 0.75 1.54 1.08 4.21 9.54 1971-01-01 1 1971 1 1972-01-01 9.29 3.63 14.54 4.25 6.75 4.42 13.00 5.33 10.04 8.54 8.71 19.17 1972-01-01 1 1972 1 1973-01-01 16.50 15.92 14.62 7.41 8.29 11.21 13.54 7.79 10.46 10.79 13.37 9.71 1973-01-01 1 1973 1 1974-01-01 23.21 16.54 16.08 9.75 15.83 11.46 9.54 13.54 13.83 16.66 17.21 25.29 1974-01-01 1 1974 1 1975-01-01 14.04 13.54 11.29 5.46 12.58 5.58 8.12 8.96 9.29 5.17 7.71 11.63 1975-01-01 1 1975 1 1976-01-01 18.34 17.67 14.83 8.00 16.62 10.13 13.17 9.04 13.13 5.75 11.38 14.96 1976-01-01 1 1976 1 1977-01-01 20.04 11.92 20.25 9.13 9.29 8.04 10.75 5.88 9.00 9.00 14.88 25.70 1977-01-01 1 1977 1 1978-01-01 8.33 7.12 7.71 3.54 8.50 7.50 14.71 10.00 11.83 10.00 15.09 20.46 1978-01-01 1 1978 1 对于数据记录按照月为频率取样python1data[data[\"day\"]==1] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } RPT VAL ROS KIL SHA BIR DUB CLA MUL CLO BEL MAL date month year day Yr_Mo_Dy 1961-01-01 15.04 14.96 13.17 9.29 NaN 9.87 13.67 10.25 10.83 12.58 18.50 15.04 1961-01-01 1 1961 1 1961-02-01 14.25 15.12 9.04 5.88 12.08 7.17 10.17 3.63 6.50 5.50 9.17 8.00 1961-02-01 2 1961 1 1961-03-01 12.67 13.13 11.79 6.42 9.79 8.54 10.25 13.29 NaN 12.21 20.62 NaN 1961-03-01 3 1961 1 1961-04-01 8.38 6.34 8.33 6.75 9.33 9.54 11.67 8.21 11.21 6.46 11.96 7.17 1961-04-01 4 1961 1 1961-05-01 15.87 13.88 15.37 9.79 13.46 10.17 9.96 14.04 9.75 9.92 18.63 11.12 1961-05-01 5 1961 1 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 1978-08-01 19.33 15.09 20.17 8.83 12.62 10.41 9.33 12.33 9.50 9.92 15.75 18.00 1978-08-01 8 1978 1 1978-09-01 8.42 6.13 9.87 5.25 3.21 5.71 7.25 3.50 7.33 6.50 7.62 15.96 1978-09-01 9 1978 1 1978-10-01 9.50 6.83 10.50 3.88 6.13 4.58 4.21 6.50 6.38 6.54 10.63 14.09 1978-10-01 10 1978 1 1978-11-01 13.59 16.75 11.25 7.08 11.04 8.33 8.17 11.29 10.75 11.25 23.13 25.00 1978-11-01 11 1978 1 1978-12-01 21.29 16.29 24.04 12.79 18.21 19.29 21.54 17.21 16.71 17.83 17.75 25.70 1978-12-01 12 1978 1 216 rows × 16 columns 探索泰坦尼克灾难数据(数据可视化)python123456import pandas as pdimport matplotlib.pyplot as pltimport seaborn as snsimport numpy as np%matplotlib inline python1path7 = 'train.csv' # train.csv python1titanic = pd.read_csv(path7) python1titanic.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } PassengerId Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked 0 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 NaN S 1 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C85 C 2 3 1 3 Heikkinen, Miss. Laina female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S 3 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 0 113803 53.1000 C123 S 4 5 0 3 Allen, Mr. William Henry male 35.0 0 0 373450 8.0500 NaN S 将PassengerId设置为索引python1titanic.set_index('PassengerId').head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Survived Pclass Name Sex Age SibSp Parch Ticket Fare Cabin Embarked PassengerId 1 0 3 Braund, Mr. Owen Harris male 22.0 1 0 A/5 21171 7.2500 NaN S 2 1 1 Cumings, Mrs. John Bradley (Florence Briggs Th... female 38.0 1 0 PC 17599 71.2833 C85 C 3 1 3 Heikkinen, Miss. Laina female 26.0 0 0 STON/O2. 3101282 7.9250 NaN S 4 1 1 Futrelle, Mrs. Jacques Heath (Lily May Peel) female 35.0 1 0 113803 53.1000 C123 S 5 0 3 Allen, Mr. William Henry male 35.0 0 0 373450 8.0500 NaN S 绘制一个展示男女乘客比例的扇形图python1234567891011121314151617181920212223242526272829303132333435363738394041# 运行以下代码# sum the instances of males and femalesmales = (titanic['Sex'] == 'male').sum()females = (titanic['Sex'] == 'female').sum()# put them into a list called proportionsproportions = [males, females]# Create a pie chartplt.pie( # using proportions proportions, # with the labels being officer names labels = ['Males', 'Females'], # with no shadows shadow = False, # with colors colors = ['blue','red'], # with one slide exploded out explode = (0.15 , 0), # with the start angle at 90% startangle = 90, # with the percent listed as a fraction autopct = '%1.1f%%' )# View the plot drop aboveplt.axis('equal')# Set labelsplt.title(\"Sex Proportion\")# View the plotplt.tight_layout()plt.show() 绘制一个展示船票Fare, 与乘客年龄和性别的散点图python1234567891011# 运行以下代码# creates the plot usinglm = sns.lmplot(x = 'Age', y = 'Fare', data = titanic, hue = 'Sex', fit_reg=False)# set titlelm.set(title = 'Fare x Age')# get the axes object and tweak itaxes = lm.axesaxes[0,0].set_ylim(-5,)axes[0,0].set_xlim(-5,85) (-5, 85) 有多少人生还python1titanic.Survived.sum() 342 绘制一个展示船票价格的直方图python12345678910111213141516171819# 运行以下代码# sort the values from the top to the least value and slice the first 5 itemsdf = titanic.Fare.sort_values(ascending = False)df# create bins interval using numpybinsVal = np.arange(0,600,10)binsVal# create the plotplt.hist(df, bins = binsVal)# Set the title and labelsplt.xlabel('Fare')plt.ylabel('Frequency')plt.title('Fare Payed Histrogram')# show the plotplt.show() 探索Pokemon数据(创建数据框)python123456raw_data = &#123;\"name\": ['Bulbasaur', 'Charmander','Squirtle','Caterpie'], \"evolution\": ['Ivysaur','Charmeleon','Wartortle','Metapod'], \"type\": ['grass', 'fire', 'water', 'bug'], \"hp\": [45, 39, 44, 45], \"pokedex\": ['yes', 'no','yes','no'] &#125; python12pokemon = pd.DataFrame(raw_data)pokemon.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name evolution type hp pokedex 0 Bulbasaur Ivysaur grass 45 yes 1 Charmander Charmeleon fire 39 no 2 Squirtle Wartortle water 44 yes 3 Caterpie Metapod bug 45 no 数据框的列排序是字母顺序，请重新修改为name, type, hp, evolution, pokedex这个顺序python12pokemon = pokemon[['name', 'type', 'hp', 'evolution','pokedex']]pokemon .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name type hp evolution pokedex 0 Bulbasaur grass 45 Ivysaur yes 1 Charmander fire 39 Charmeleon no 2 Squirtle water 44 Wartortle yes 3 Caterpie bug 45 Metapod no 添加一个列placepython12pokemon['place'] = ['park','street','lake','forest']pokemon .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } name type hp evolution pokedex place 0 Bulbasaur grass 45 Ivysaur yes park 1 Charmander fire 39 Charmeleon no street 2 Squirtle water 44 Wartortle yes lake 3 Caterpie bug 45 Metapod no forest 查看每个列的数据类型python1pokemon.dtypes name object type object hp int64 evolution object pokedex object place object dtype: object python1pokemon.info() &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 4 entries, 0 to 3 Data columns (total 6 columns): name 4 non-null object type 4 non-null object hp 4 non-null int64 evolution 4 non-null object pokedex 4 non-null object place 4 non-null object dtypes: int64(1), object(5) memory usage: 320.0+ bytes 探索Apple公司股价数据(时间序列)python12345678# 运行以下代码import pandas as pdimport numpy as np# visualizationimport matplotlib.pyplot as plt%matplotlib inline python1path9 = 'Apple_stock.csv' python12apple = pd.read_csv(path9)apple.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Date Open High Low Close Volume Adj Close 0 2014-07-08 96.27 96.80 93.92 95.35 65130000 95.35 1 2014-07-07 94.14 95.99 94.10 95.97 56305400 95.97 2 2014-07-03 93.67 94.10 93.20 94.03 22891800 94.03 3 2014-07-02 93.87 94.06 93.09 93.48 28420900 93.48 4 2014-07-01 93.52 94.07 93.13 93.52 38170200 93.52 python1apple.dtypes Date object Open float64 High float64 Low float64 Close float64 Volume int64 Adj Close float64 dtype: object python1apple.info() &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 8465 entries, 0 to 8464 Data columns (total 7 columns): Date 8465 non-null object Open 8465 non-null float64 High 8465 non-null float64 Low 8465 non-null float64 Close 8465 non-null float64 Volume 8465 non-null int64 Adj Close 8465 non-null float64 dtypes: float64(5), int64(1), object(1) memory usage: 463.1+ KB python1apple.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Open High Low Close Volume Adj Close count 8465.000000 8465.000000 8465.000000 8465.000000 8.465000e+03 8465.000000 mean 98.593926 99.848683 97.226790 98.549199 9.391214e+07 11.095014 std 141.965350 143.155674 140.548326 141.877244 8.993202e+07 21.133016 min 11.120000 11.120000 11.000000 11.000000 2.504000e+05 0.170000 25% 25.750000 26.000000 25.120000 25.630000 3.704960e+07 0.900000 50% 40.750000 41.500000 40.000000 40.750000 6.636000e+07 1.410000 75% 79.500000 81.000000 78.740000 80.000000 1.177701e+08 8.660000 max 702.410000 705.070000 699.570000 702.100000 1.855410e+09 96.280000 将Date这个列转换为datetime类型python1apple['Date'] = pd.to_datetime(apple['Date']) python1apple.dtypes Date datetime64[ns] Open float64 High float64 Low float64 Close float64 Volume int64 Adj Close float64 dtype: object 将Date设置为索引python1apple = apple.set_index('Date') python1apple.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Open High Low Close Volume Adj Close Date 2014-07-08 96.27 96.80 93.92 95.35 65130000 95.35 2014-07-07 94.14 95.99 94.10 95.97 56305400 95.97 2014-07-03 93.67 94.10 93.20 94.03 22891800 94.03 2014-07-02 93.87 94.06 93.09 93.48 28420900 93.48 2014-07-01 93.52 94.07 93.13 93.52 38170200 93.52 有重复的日期吗？python1len(apple.index) - len(apple.index.unique()) 0 官方解法 python1apple.index.is_unique True 将index设置为升序python1apple.sort_index(ascending=True, inplace=True) python1apple.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Open High Low Close Volume Adj Close Date 1980-12-12 28.75 28.87 28.75 28.75 117258400 0.45 1980-12-15 27.38 27.38 27.25 27.25 43971200 0.42 1980-12-16 25.37 25.37 25.25 25.25 26432000 0.39 1980-12-17 25.87 26.00 25.87 25.87 21610400 0.40 1980-12-18 26.63 26.75 26.63 26.63 18362400 0.41 找到每个月的最后一个交易日(business day)python123apple['year']=apple.index.yearapple['month']=apple.index.monthapple['day']=apple.index.day python1apple.day.shift(-1).fillna(100) Date 1980-12-12 15.0 1980-12-15 16.0 1980-12-16 17.0 1980-12-17 18.0 1980-12-18 19.0 ... 2014-07-01 2.0 2014-07-02 3.0 2014-07-03 7.0 2014-07-07 8.0 2014-07-08 100.0 Name: day, Length: 8465, dtype: float64 python1diff = apple.day - apple.day.shift(-1).fillna(100) python1apple.loc[diff[diff&gt;0].index] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } Open High Low Close Volume Adj Close year month day Date 1980-12-31 34.25 34.25 34.13 34.13 8937600 0.53 1980 12 31 1981-01-30 28.50 28.50 28.25 28.25 11547200 0.44 1981 1 30 1981-02-27 26.50 26.75 26.50 26.50 3690400 0.41 1981 2 27 1981-03-31 24.75 24.75 24.50 24.50 3998400 0.38 1981 3 31 1981-04-30 28.38 28.62 28.38 28.38 3152800 0.44 1981 4 30 ... ... ... ... ... ... ... ... ... ... 2014-02-28 529.08 532.75 522.12 526.24 92992200 74.76 2014 2 28 2014-03-31 539.23 540.81 535.93 536.74 42167300 76.25 2014 3 31 2014-04-30 592.64 599.43 589.80 590.09 114160200 83.83 2014 4 30 2014-05-30 637.98 644.17 628.90 633.00 141005200 90.43 2014 5 30 2014-06-30 92.10 93.73 92.09 92.93 49482300 92.93 2014 6 30 403 rows × 9 columns 数据集中最早的日期和最晚的日期相差多少天python1apple.index.max()-apple.index.min() Timedelta(&#39;12261 days 00:00:00&#39;) python1(apple.index.max()-apple.index.min()).days 12261 在数据中一共有多少个月？python12apple_months = apple.resample('BM').mean()len(apple_months.index) 404 按照时间顺序可视化Adj Close值python123# 运行以下代码# makes the plot and assign it to a variableappl_open = apple['Adj Close'].plot(title = \"Apple Stock\") 探索Iris纸鸢花数据(删除数据)python1path10 ='iris.csv' # iris.csv python12iris = pd.read_csv(path10,header=None)iris.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 0 5.1 3.5 1.4 0.2 Iris-setosa 1 4.9 3.0 1.4 0.2 Iris-setosa 2 4.7 3.2 1.3 0.2 Iris-setosa 3 4.6 3.1 1.5 0.2 Iris-setosa 4 5.0 3.6 1.4 0.2 Iris-setosa 创建数据框的列名称python1iris.columns=(['sepal_length','sepal_width', 'petal_length', 'petal_width', 'class']) python1iris.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sepal_length sepal_width petal_length petal_width class 0 5.1 3.5 1.4 0.2 Iris-setosa 1 4.9 3.0 1.4 0.2 Iris-setosa 2 4.7 3.2 1.3 0.2 Iris-setosa 3 4.6 3.1 1.5 0.2 Iris-setosa 4 5.0 3.6 1.4 0.2 Iris-setosa 数据框中有缺失值吗python1iris.isnull().any() sepal_length False sepal_width False petal_length False petal_width False class False dtype: bool 将列petal_length的第10到19行设置为缺失值python1iris.loc[10:20, 'petal_length'] = np.nan python1iris.loc[10:20,:] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sepal_length sepal_width petal_length petal_width class 10 5.4 3.7 NaN 0.2 Iris-setosa 11 4.8 3.4 NaN 0.2 Iris-setosa 12 4.8 3.0 NaN 0.1 Iris-setosa 13 4.3 3.0 NaN 0.1 Iris-setosa 14 5.8 4.0 NaN 0.2 Iris-setosa 15 5.7 4.4 NaN 0.4 Iris-setosa 16 5.4 3.9 NaN 0.4 Iris-setosa 17 5.1 3.5 NaN 0.3 Iris-setosa 18 5.7 3.8 NaN 0.3 Iris-setosa 19 5.1 3.8 NaN 0.3 Iris-setosa 20 5.4 3.4 NaN 0.2 Iris-setosa 将缺失值全部替换为1.0python1iris = iris.fillna(1.0) python1iris.head(20) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sepal_length sepal_width petal_length petal_width class 0 5.1 3.5 1.4 0.2 Iris-setosa 1 4.9 3.0 1.4 0.2 Iris-setosa 2 4.7 3.2 1.3 0.2 Iris-setosa 3 4.6 3.1 1.5 0.2 Iris-setosa 4 5.0 3.6 1.4 0.2 Iris-setosa 5 5.4 3.9 1.7 0.4 Iris-setosa 6 4.6 3.4 1.4 0.3 Iris-setosa 7 5.0 3.4 1.5 0.2 Iris-setosa 8 4.4 2.9 1.4 0.2 Iris-setosa 9 4.9 3.1 1.5 0.1 Iris-setosa 10 5.4 3.7 1.0 0.2 Iris-setosa 11 4.8 3.4 1.0 0.2 Iris-setosa 12 4.8 3.0 1.0 0.1 Iris-setosa 13 4.3 3.0 1.0 0.1 Iris-setosa 14 5.8 4.0 1.0 0.2 Iris-setosa 15 5.7 4.4 1.0 0.4 Iris-setosa 16 5.4 3.9 1.0 0.4 Iris-setosa 17 5.1 3.5 1.0 0.3 Iris-setosa 18 5.7 3.8 1.0 0.3 Iris-setosa 19 5.1 3.8 1.0 0.3 Iris-setosa 删除列classpython1iris.drop('class',inplace=True,axis=1) python1iris.head() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sepal_length sepal_width petal_length petal_width 0 5.1 3.5 1.4 0.2 1 4.9 3.0 1.4 0.2 2 4.7 3.2 1.3 0.2 3 4.6 3.1 1.5 0.2 4 5.0 3.6 1.4 0.2 将数据框前三行设置为缺失值python12iris.iloc[0:3, :] = np.naniris .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sepal_length sepal_width petal_length petal_width 0 NaN NaN NaN NaN 1 NaN NaN NaN NaN 2 NaN NaN NaN NaN 3 4.6 3.1 1.5 0.2 4 5.0 3.6 1.4 0.2 ... ... ... ... ... 145 6.7 3.0 5.2 2.3 146 6.3 2.5 5.0 1.9 147 6.5 3.0 5.2 2.0 148 6.2 3.4 5.4 2.3 149 5.9 3.0 5.1 1.8 150 rows × 4 columns 删除有缺失值的行python1iris.dropna(axis=0, inplace=True) python1iris .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sepal_length sepal_width petal_length petal_width 3 4.6 3.1 1.5 0.2 4 5.0 3.6 1.4 0.2 5 5.4 3.9 1.7 0.4 6 4.6 3.4 1.4 0.3 7 5.0 3.4 1.5 0.2 ... ... ... ... ... 145 6.7 3.0 5.2 2.3 146 6.3 2.5 5.0 1.9 147 6.5 3.0 5.2 2.0 148 6.2 3.4 5.4 2.3 149 5.9 3.0 5.1 1.8 147 rows × 4 columns 重新设置索引python12iris.reset_index(inplace=True, drop=True)iris .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } sepal_length sepal_width petal_length petal_width 0 4.6 3.1 1.5 0.2 1 5.0 3.6 1.4 0.2 2 5.4 3.9 1.7 0.4 3 4.6 3.4 1.4 0.3 4 5.0 3.4 1.5 0.2 ... ... ... ... ... 142 6.7 3.0 5.2 2.3 143 6.3 2.5 5.0 1.9 144 6.5 3.0 5.2 2.0 145 6.2 3.4 5.4 2.3 146 5.9 3.0 5.1 1.8 147 rows × 4 columns","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"pandas","slug":"pandas","permalink":"https://yangxiongwiki.com/tags/pandas/"},{"name":"kesci","slug":"kesci","permalink":"https://yangxiongwiki.com/tags/kesci/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"kesci_notes","slug":"python/kesci-notes","permalink":"https://yangxiongwiki.com/categories/python/kesci-notes/"}]},{"title":"pandas datetime notes","date":"2020-01-16T01:39:00.000Z","path":"2020/01/15/python/basics/pandas_datetime_notes/","text":"datetime 如何加特定的 offsethttps://blog.csdn.net/AlanGuoo/article/details/89022135 datetime 介绍 bloghttps://www.jianshu.com/p/96ea42c58abe datetime详细处理https://blog.csdn.net/onemorepoint/article/details/86158127","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"pandas","slug":"pandas","permalink":"https://yangxiongwiki.com/tags/pandas/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"basics","slug":"python/basics","permalink":"https://yangxiongwiki.com/categories/python/basics/"}]},{"title":"pandas 基础命令速查表","date":"2020-01-14T20:46:00.000Z","path":"2020/01/14/python/kesci_notes/pandas基础命令速查表/","text":"pandas 基础命令复习 此notebook为kesci.com的pandas基础命令速查表项目。网址链接：pandas基础命令速查表 python1import pandas as pd 数据导入python1234567891011pd.read_csv(filename) # 导入csv格式文件中的数据pd.read_table(filename) # 导入有分隔符的文本 (如TSV) 中的数据pd.read_excel(filename) # 导入Excel格式文件中的数据pd.read_sql(query, connection_object) # 导入SQL数据表/数据库中的数据pd.read_json(json_string) # 导入JSON格式的字符，URL地址或者文件中的数据pd.read_html(url) # 导入经过解析的URL地址中包含的数据框 (DataFrame) 数据pd.read_clipmboard() # 导入系统粘贴板里面的数据pd.DataFrame(dict) # 导入Python字典 (dict) 里面的数据，其中key是数据框的表头，value是数据框的内容。parse_dates = [[0,1,2]]可以合并读入数据的前三列变成一个datetime的序列 数据导出python1234df.to_csv(filename) # 将数据框 (DataFrame)中的数据导入csv格式的文件中df.to_excel(filename) # 将数据框 (DataFrame)中的数据导入Excel格式的文件中df.to_sql(table_name,connection_object) # 将数据框 (DataFrame)中的数据导入SQL数据表/数据库中df.to_json(filename) # 将数据框 (DataFrame)中的数据导入JSON格式的文件中 创建测试对象numpy array 创建python1pd.DataFrame(np.random.rand(10, 5)) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 0 0.585777 0.433112 0.338235 0.291173 0.031913 1 0.624464 0.895368 0.292560 0.080429 0.495787 2 0.816629 0.563991 0.189032 0.114238 0.524798 3 0.065594 0.794394 0.699740 0.413209 0.630886 4 0.001313 0.100108 0.882507 0.498680 0.108653 5 0.777563 0.892090 0.950747 0.869066 0.405635 6 0.597492 0.794607 0.345172 0.685253 0.434808 7 0.263838 0.649635 0.828545 0.859189 0.090903 8 0.074650 0.448147 0.905926 0.283079 0.618817 9 0.117861 0.120424 0.063917 0.605063 0.954940 list 创建python12my_list = ['Kesci',100,'欢迎来到科赛网']pd.Series(my_list) 0 Kesci 1 100 2 欢迎来到科赛网 dtype: object 添加一个日期索引 python123df = pd.DataFrame(np.random.rand(10,5))df.index = pd.date_range('2017/1/1', periods=df.shape[0])df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 2017-01-01 0.828249 0.792735 0.512458 0.961731 0.917472 2017-01-02 0.566537 0.754457 0.235026 0.795147 0.245506 2017-01-03 0.468922 0.852834 0.549959 0.124779 0.219038 2017-01-04 0.467536 0.482505 0.238425 0.604942 0.921739 2017-01-05 0.599552 0.123519 0.814959 0.329789 0.696340 2017-01-06 0.946407 0.780112 0.965793 0.743042 0.613386 2017-01-07 0.791554 0.015501 0.500903 0.797965 0.856116 2017-01-08 0.052724 0.335682 0.253801 0.277599 0.525408 2017-01-09 0.492461 0.140432 0.316593 0.727536 0.958459 2017-01-10 0.562764 0.952519 0.256441 0.942915 0.152228 用普通字典创建注意此法不能保证顺序 python12345new_dict = &#123;&#125;new_dict['foo'] = [1, 2, 3] new_dict['bar'] = [4, 5, 6]df = pd.DataFrame(new_dict)df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } foo bar 0 1 4 1 2 5 2 3 6 用orderdict创建此法一定能够按照顺序创建 python12345678910from collections import OrderedDictorder_dict = OrderedDict()order_dict['foo'] = [1, 2, 3]order_dict['bar'] = [4, 5, 6]order_dictdf = pd.DataFrame(order_dict)df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } foo bar 0 1 4 1 2 5 2 3 6 数据的查看与检查python1df.head(3) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 2017-01-01 0.933522 0.245400 0.293748 0.723707 0.844672 2017-01-02 0.583137 0.717747 0.409480 0.489166 0.788739 2017-01-03 0.234310 0.287521 0.574982 0.845111 0.817525 python1df.tail(3) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 2017-01-08 0.551200 0.934601 0.933677 0.792482 0.532230 2017-01-09 0.126025 0.033953 0.284972 0.715794 0.083033 2017-01-10 0.138878 0.834870 0.065170 0.289762 0.456829 python1df.shape (10, 5) python1df.info() &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; DatetimeIndex: 10 entries, 2017-01-01 to 2017-01-10 Freq: D Data columns (total 5 columns): 0 10 non-null float64 1 10 non-null float64 2 10 non-null float64 3 10 non-null float64 4 10 non-null float64 dtypes: float64(5) memory usage: 800.0 bytes 数据描述python1df.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 count 10.000000 10.000000 10.000000 10.000000 10.000000 mean 0.497133 0.390297 0.444135 0.700152 0.542396 std 0.290880 0.333661 0.281356 0.193923 0.272418 min 0.126025 0.033116 0.065170 0.289762 0.083033 25% 0.277898 0.142655 0.287166 0.649304 0.376368 50% 0.492851 0.266461 0.378556 0.719751 0.516397 75% 0.608873 0.659798 0.637238 0.831953 0.810329 max 0.943647 0.934601 0.933677 0.921472 0.844672 单列数值次数统计python1df.loc[:, 0].value_counts(dropna=False) 0.943647 1 0.617452 1 0.583137 1 0.551200 1 0.234310 1 0.933522 1 0.138878 1 0.408662 1 0.126025 1 0.434502 1 Name: 0, dtype: int64 查询数据框 (Data Frame) 中每个列的独特数据值出现次数统计python1df.apply(pd.Series.value_counts) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 0.033116 NaN 1.0 NaN NaN NaN 0.033953 NaN 1.0 NaN NaN NaN 0.065170 NaN NaN 1.0 NaN NaN 0.083033 NaN NaN NaN NaN 1.0 0.114544 NaN NaN 1.0 NaN NaN 0.120403 NaN 1.0 NaN NaN NaN 0.126025 1.0 NaN NaN NaN NaN 0.138878 1.0 NaN NaN NaN NaN 0.209412 NaN 1.0 NaN NaN NaN 0.223586 NaN NaN NaN NaN 1.0 0.234310 1.0 NaN NaN NaN NaN 0.245400 NaN 1.0 NaN NaN NaN 0.284972 NaN NaN 1.0 NaN NaN 0.287521 NaN 1.0 NaN NaN NaN 0.289762 NaN NaN NaN 1.0 NaN 0.293748 NaN NaN 1.0 NaN NaN 0.347632 NaN NaN 1.0 NaN NaN 0.349548 NaN NaN NaN NaN 1.0 0.408662 1.0 NaN NaN NaN NaN 0.409480 NaN NaN 1.0 NaN NaN 0.434502 1.0 NaN NaN NaN NaN 0.456829 NaN NaN NaN NaN 1.0 0.485952 NaN 1.0 NaN NaN NaN 0.489166 NaN NaN NaN 1.0 NaN 0.500563 NaN NaN NaN NaN 1.0 0.532230 NaN NaN NaN NaN 1.0 0.551200 1.0 NaN NaN NaN NaN 0.574982 NaN NaN 1.0 NaN NaN 0.583137 1.0 NaN NaN NaN NaN 0.617452 1.0 NaN NaN NaN NaN 0.639218 NaN NaN NaN 1.0 NaN 0.657990 NaN NaN 1.0 NaN NaN 0.679562 NaN NaN NaN 1.0 NaN 0.715794 NaN NaN NaN 1.0 NaN 0.717747 NaN 1.0 NaN NaN NaN 0.723707 NaN NaN NaN 1.0 NaN 0.759157 NaN NaN 1.0 NaN NaN 0.788739 NaN NaN NaN NaN 1.0 0.792482 NaN NaN NaN 1.0 NaN 0.817525 NaN NaN NaN NaN 1.0 0.827238 NaN NaN NaN NaN 1.0 0.834870 NaN 1.0 NaN NaN NaN 0.844672 NaN NaN NaN NaN 1.0 0.845111 NaN NaN NaN 1.0 NaN 0.905241 NaN NaN NaN 1.0 NaN 0.921472 NaN NaN NaN 1.0 NaN 0.933522 1.0 NaN NaN NaN NaN 0.933677 NaN NaN 1.0 NaN NaN 0.934601 NaN 1.0 NaN NaN NaN 0.943647 1.0 NaN NaN NaN NaN 分类计数python123456from collections import OrderedDictorder_dict = OrderedDict()order_dict['foo'] = [1, 2, 3, 3, 1]order_dict['bar'] = [4, 5, 6, 5, 5]df = pd.DataFrame(order_dict)df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } foo bar 0 1 4 1 2 5 2 3 6 3 3 5 4 1 5 样本分类统计个数 python1df.loc[:, 'foo'].value_counts().head(20) 3 2 1 2 2 1 Name: foo, dtype: int64 样本类型个数python1df.loc[:, 'foo'].nunique() 3 python1df.loc[:, 'foo'].value_counts().shape[0] 3 python1len(df.loc[:, 'foo'].unique()) 3 数据的选取python1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 2017-01-01 0.933522 0.245400 0.293748 0.723707 0.844672 2017-01-02 0.583137 0.717747 0.409480 0.489166 0.788739 2017-01-03 0.234310 0.287521 0.574982 0.845111 0.817525 2017-01-04 0.434502 0.120403 0.347632 0.639218 0.223586 2017-01-05 0.408662 0.209412 0.657990 0.679562 0.349548 2017-01-06 0.617452 0.033116 0.759157 0.921472 0.827238 2017-01-07 0.943647 0.485952 0.114544 0.905241 0.500563 2017-01-08 0.551200 0.934601 0.933677 0.792482 0.532230 2017-01-09 0.126025 0.033953 0.284972 0.715794 0.083033 2017-01-10 0.138878 0.834870 0.065170 0.289762 0.456829 python1df.loc['2017-01-01', 1] 0.24540013304048203 python1df.ix['2017-01-01', 1] C:\\Users\\yxion\\Anaconda3\\envs\\py37\\lib\\site-packages\\ipykernel_launcher.py:1: FutureWarning: .ix is deprecated. Please use .loc for label based indexing or .iloc for positional indexing See the documentation here: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#ix-indexer-is-deprecated &quot;&quot;&quot;Entry point for launching an IPython kernel. 0.24540013304048203 python1df.iloc[0, 1] 0.24540013304048203 数据的清洗数据列的重命名python1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 2017-01-01 0.828249 0.792735 0.512458 0.961731 0.917472 2017-01-02 0.566537 0.754457 0.235026 0.795147 0.245506 2017-01-03 0.468922 0.852834 0.549959 0.124779 0.219038 2017-01-04 0.467536 0.482505 0.238425 0.604942 0.921739 2017-01-05 0.599552 0.123519 0.814959 0.329789 0.696340 2017-01-06 0.946407 0.780112 0.965793 0.743042 0.613386 2017-01-07 0.791554 0.015501 0.500903 0.797965 0.856116 2017-01-08 0.052724 0.335682 0.253801 0.277599 0.525408 2017-01-09 0.492461 0.140432 0.316593 0.727536 0.958459 2017-01-10 0.562764 0.952519 0.256441 0.942915 0.152228 python1df.columns = ['a', 'b', 'c', 'd', 'e'] python12 python1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c d e 2017-01-01 0.828249 0.792735 0.512458 0.961731 0.917472 2017-01-02 0.566537 0.754457 0.235026 0.795147 0.245506 2017-01-03 0.468922 0.852834 0.549959 0.124779 0.219038 2017-01-04 0.467536 0.482505 0.238425 0.604942 0.921739 2017-01-05 0.599552 0.123519 0.814959 0.329789 0.696340 2017-01-06 0.946407 0.780112 0.965793 0.743042 0.613386 2017-01-07 0.791554 0.015501 0.500903 0.797965 0.856116 2017-01-08 0.052724 0.335682 0.253801 0.277599 0.525408 2017-01-09 0.492461 0.140432 0.316593 0.727536 0.958459 2017-01-10 0.562764 0.952519 0.256441 0.942915 0.152228 df.rename不会替换原dataframe python1df.rename(columns=lambda x: x+'changed') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } achanged bchanged cchanged dchanged echanged 2017-01-01 0.828249 0.792735 0.512458 0.961731 0.917472 2017-01-02 0.566537 0.754457 0.235026 0.795147 0.245506 2017-01-03 0.468922 0.852834 0.549959 0.124779 0.219038 2017-01-04 0.467536 0.482505 0.238425 0.604942 0.921739 2017-01-05 0.599552 0.123519 0.814959 0.329789 0.696340 2017-01-06 0.946407 0.780112 0.965793 0.743042 0.613386 2017-01-07 0.791554 0.015501 0.500903 0.797965 0.856116 2017-01-08 0.052724 0.335682 0.253801 0.277599 0.525408 2017-01-09 0.492461 0.140432 0.316593 0.727536 0.958459 2017-01-10 0.562764 0.952519 0.256441 0.942915 0.152228 python1df.rename(columns=&#123;'a':'newA','c':'newC'&#125;) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } newA b newC d e 2017-01-01 0.828249 0.792735 0.512458 0.961731 0.917472 2017-01-02 0.566537 0.754457 0.235026 0.795147 0.245506 2017-01-03 0.468922 0.852834 0.549959 0.124779 0.219038 2017-01-04 0.467536 0.482505 0.238425 0.604942 0.921739 2017-01-05 0.599552 0.123519 0.814959 0.329789 0.696340 2017-01-06 0.946407 0.780112 0.965793 0.743042 0.613386 2017-01-07 0.791554 0.015501 0.500903 0.797965 0.856116 2017-01-08 0.052724 0.335682 0.253801 0.277599 0.525408 2017-01-09 0.492461 0.140432 0.316593 0.727536 0.958459 2017-01-10 0.562764 0.952519 0.256441 0.942915 0.152228 数据行的重命名python1df.index = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'] python1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c d e a 0.828249 0.792735 0.512458 0.961731 0.917472 b 0.566537 0.754457 0.235026 0.795147 0.245506 c 0.468922 0.852834 0.549959 0.124779 0.219038 d 0.467536 0.482505 0.238425 0.604942 0.921739 e 0.599552 0.123519 0.814959 0.329789 0.696340 f 0.946407 0.780112 0.965793 0.743042 0.613386 g 0.791554 0.015501 0.500903 0.797965 0.856116 h 0.052724 0.335682 0.253801 0.277599 0.525408 i 0.492461 0.140432 0.316593 0.727536 0.958459 j 0.562764 0.952519 0.256441 0.942915 0.152228 使用特定列作为行索引python1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c d e a 0.828249 0.792735 0.512458 0.961731 0.917472 b 0.566537 0.754457 0.235026 0.795147 0.245506 c 0.468922 0.852834 0.549959 0.124779 0.219038 d 0.467536 0.482505 0.238425 0.604942 0.921739 e 0.599552 0.123519 0.814959 0.329789 0.696340 f 0.946407 0.780112 0.965793 0.743042 0.613386 g 0.791554 0.015501 0.500903 0.797965 0.856116 h 0.052724 0.335682 0.253801 0.277599 0.525408 i 0.492461 0.140432 0.316593 0.727536 0.958459 j 0.562764 0.952519 0.256441 0.942915 0.152228 例如把a这列变成index python12df1 = df.set_index('a')df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } b c d e a 0.828249 0.792735 0.512458 0.961731 0.917472 0.566537 0.754457 0.235026 0.795147 0.245506 0.468922 0.852834 0.549959 0.124779 0.219038 0.467536 0.482505 0.238425 0.604942 0.921739 0.599552 0.123519 0.814959 0.329789 0.696340 0.946407 0.780112 0.965793 0.743042 0.613386 0.791554 0.015501 0.500903 0.797965 0.856116 0.052724 0.335682 0.253801 0.277599 0.525408 0.492461 0.140432 0.316593 0.727536 0.958459 0.562764 0.952519 0.256441 0.942915 0.152228 还原index, 把index列变回数据 python12df2 = df1.reset_index()df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c d e 0 0.828249 0.792735 0.512458 0.961731 0.917472 1 0.566537 0.754457 0.235026 0.795147 0.245506 2 0.468922 0.852834 0.549959 0.124779 0.219038 3 0.467536 0.482505 0.238425 0.604942 0.921739 4 0.599552 0.123519 0.814959 0.329789 0.696340 5 0.946407 0.780112 0.965793 0.743042 0.613386 6 0.791554 0.015501 0.500903 0.797965 0.856116 7 0.052724 0.335682 0.253801 0.277599 0.525408 8 0.492461 0.140432 0.316593 0.727536 0.958459 9 0.562764 0.952519 0.256441 0.942915 0.152228 检查空值python123df = pd.DataFrame(&#123;'A':np.array([1,np.nan,2,3,6,np.nan]), 'B':np.array([np.nan,4,np.nan,5,9,np.nan]), 'C':'foo'&#125;) python1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C 0 1.0 NaN foo 1 NaN 4.0 foo 2 2.0 NaN foo 3 3.0 5.0 foo 4 6.0 9.0 foo 5 NaN NaN foo python1pd.isnull(df) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C 0 False True False 1 True False False 2 False True False 3 False False False 4 False False False 5 True True False python1pd.notnull(df) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C 0 True False True 1 False True True 2 True False True 3 True True True 4 True True True 5 False False True 移除空值行python1df.dropna() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C 3 3.0 5.0 foo 4 6.0 9.0 foo 移除空值列python1df.dropna(axis=1) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } C 0 foo 1 foo 2 foo 3 foo 4 foo 5 foo 移除超过n个空值的列python1df.dropna(axis=1,thresh=1) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C 0 1.0 NaN foo 1 NaN 4.0 foo 2 2.0 NaN foo 3 3.0 5.0 foo 4 6.0 9.0 foo 5 NaN NaN foo 填充空值为常数python1df.fillna('Test') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C 0 1 Test foo 1 Test 4 foo 2 2 Test foo 3 3 5 foo 4 6 9 foo 5 Test Test foo 填充空值为均值python1df.fillna(df.mean()) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C 0 1.0 6.0 foo 1 3.0 4.0 foo 2 2.0 6.0 foo 3 3.0 5.0 foo 4 6.0 9.0 foo 5 3.0 6.0 foo 转换数据类型python1df.loc[:, 'A'].astype(np.float64) 0 1.0 1 NaN 2 2.0 3 3.0 4 6.0 5 NaN Name: A, dtype: float64 替换特定数据python12s = pd.Series([1,3,5,np.nan,7,9,9])s.replace(1, 'one') 0 one 1 3 2 5 3 NaN 4 7 5 9 6 9 dtype: object python1s 0 1.0 1 3.0 2 5.0 3 NaN 4 7.0 5 9.0 6 9.0 dtype: float64 python1s.replace([1,3],['one','three']) 0 one 1 three 2 5 3 NaN 4 7 5 9 6 9 dtype: object 删除列或者行python12345678910from collections import OrderedDictorder_dict = OrderedDict()order_dict['foo'] = [1, 2, 3]order_dict['bar'] = [4, 5, 6]order_dictdf = pd.DataFrame(order_dict)df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } foo bar 0 1 4 1 2 5 2 3 6 python1df.drop('foo', axis=1) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } bar 0 4 1 5 2 6 python1df.drop(0, axis=0) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } foo bar 1 2 5 2 3 6 数据过滤,排序,分组过滤python123df = pd.DataFrame(np.random.rand(10,5))df.index = pd.date_range('2017/1/1', periods=df.shape[0])df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 2017-01-01 0.462320 0.641626 0.783622 0.405599 0.086237 2017-01-02 0.860784 0.463871 0.671531 0.276455 0.033289 2017-01-03 0.980626 0.996484 0.772686 0.711433 0.129981 2017-01-04 0.863321 0.884043 0.182961 0.889572 0.916571 2017-01-05 0.111071 0.927398 0.636951 0.709890 0.589606 2017-01-06 0.115526 0.935115 0.506834 0.305816 0.235401 2017-01-07 0.498320 0.330181 0.905941 0.135436 0.360116 2017-01-08 0.730144 0.045433 0.698341 0.929830 0.060545 2017-01-09 0.889181 0.189442 0.832306 0.776265 0.129116 2017-01-10 0.709422 0.344869 0.889001 0.007639 0.354979 python1df.loc[df[0]&gt;0.5] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 2017-01-02 0.860784 0.463871 0.671531 0.276455 0.033289 2017-01-03 0.980626 0.996484 0.772686 0.711433 0.129981 2017-01-04 0.863321 0.884043 0.182961 0.889572 0.916571 2017-01-08 0.730144 0.045433 0.698341 0.929830 0.060545 2017-01-09 0.889181 0.189442 0.832306 0.776265 0.129116 2017-01-10 0.709422 0.344869 0.889001 0.007639 0.354979 python1df[df[0]&gt;0.5] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 2017-01-02 0.860784 0.463871 0.671531 0.276455 0.033289 2017-01-03 0.980626 0.996484 0.772686 0.711433 0.129981 2017-01-04 0.863321 0.884043 0.182961 0.889572 0.916571 2017-01-08 0.730144 0.045433 0.698341 0.929830 0.060545 2017-01-09 0.889181 0.189442 0.832306 0.776265 0.129116 2017-01-10 0.709422 0.344869 0.889001 0.007639 0.354979 python1df[(df[0]&gt;0.5) &amp; (df[1]&gt;0.5)] .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } 0 1 2 3 4 2017-01-03 0.980626 0.996484 0.772686 0.711433 0.129981 2017-01-04 0.863321 0.884043 0.182961 0.889572 0.916571 isin 的用法 python12345678910from collections import OrderedDictorder_dict = OrderedDict()order_dict['foo'] = [1, 2, 3]order_dict['bar'] = [4, 5, 6]order_dictdf = pd.DataFrame(order_dict)df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } foo bar 0 1 4 1 2 5 2 3 6 python1%timeit df.loc[df.loc[:,'foo'].isin([1,2]),'foo'] 407 µs ± 7.45 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) python1%timeit df.loc[df.foo.isin([1,2]),'foo'] 375 µs ± 2.49 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) python1%timeit df[df.foo.isin([1,2])].foo 523 µs ± 14.3 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) 排序单列 python1df.sort_values('a',ascending=False, na_position='first') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c d e f 0.946407 0.780112 0.965793 0.743042 0.613386 a 0.828249 0.792735 0.512458 0.961731 0.917472 g 0.791554 0.015501 0.500903 0.797965 0.856116 e 0.599552 0.123519 0.814959 0.329789 0.696340 b 0.566537 0.754457 0.235026 0.795147 0.245506 j 0.562764 0.952519 0.256441 0.942915 0.152228 i 0.492461 0.140432 0.316593 0.727536 0.958459 c 0.468922 0.852834 0.549959 0.124779 0.219038 d 0.467536 0.482505 0.238425 0.604942 0.921739 h 0.052724 0.335682 0.253801 0.277599 0.525408 同时排序两列, 第一列先排 python1df.sort_values(['a', 'b'],ascending=[False,False]) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } a b c d e f 0.946407 0.780112 0.965793 0.743042 0.613386 a 0.828249 0.792735 0.512458 0.961731 0.917472 g 0.791554 0.015501 0.500903 0.797965 0.856116 e 0.599552 0.123519 0.814959 0.329789 0.696340 b 0.566537 0.754457 0.235026 0.795147 0.245506 j 0.562764 0.952519 0.256441 0.942915 0.152228 i 0.492461 0.140432 0.316593 0.727536 0.958459 c 0.468922 0.852834 0.549959 0.124779 0.219038 d 0.467536 0.482505 0.238425 0.604942 0.921739 h 0.052724 0.335682 0.253801 0.277599 0.525408 分组类似于excel pivot table的一些功能 单列 python1234df = pd.DataFrame(&#123;'A':np.array(['foo','foo','foo','foo','bar','bar']), 'B':np.array(['one','one','two','two','three','three']), 'C':np.array(['small','medium','large','large','small','small']), 'D':np.array([1,2,2,3,3,5])&#125;) python1df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 foo one small 1 1 foo one medium 2 2 foo two large 2 3 foo two large 3 4 bar three small 3 5 bar three small 5 python1df.groupby('C').count() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B D C large 2 2 2 medium 1 1 1 small 3 3 3 python1df.groupby(['B','C']).mean() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } D B C one medium 2.0 small 1.0 three small 4.0 two large 2.5 按照列B对数据框df做分组处理后，返回对应的D的平均值 python1df.groupby('B')['D'].mean() B one 1.5 three 4.0 two 2.5 Name: D, dtype: float64 自定义函数 python1df.groupby('C').agg(np.mean) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } D C large 2.5 medium 2.0 small 3.0 官方相同效果函数如下 python1df.groupby('C').mean() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } D C large 2.5 medium 2.0 small 3.0 多组同时搞事 python1df.groupby('C').agg(&#123;'A':'describe', 'B':'sum'&#125;) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead tr th { text-align: left; } .dataframe thead tr:last-of-type th { text-align: right; } A B count unique top freq B C large 2 1 foo 2 twotwo medium 1 1 foo 1 one small 3 2 bar 2 onethreethree 透视表python12345df = pd.DataFrame(&#123;'A':np.array(['foo','foo','foo','foo','bar','bar']), 'B':np.array(['one','one','two','two','three','three']), 'C':np.array(['small','medium','large','large','small','small']), 'D':np.array([1,2,2,3,3,5])&#125;)df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 foo one small 1 1 foo one medium 2 2 foo two large 2 3 foo two large 3 4 bar three small 3 5 bar three small 5 python12df.pivot_table(df,index=['A','B'], columns=['C'],aggfunc=np.sum) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead tr th { text-align: left; } .dataframe thead tr:last-of-type th { text-align: right; } D C large medium small A B bar three NaN NaN 8.0 foo one NaN 2.0 1.0 two 5.0 NaN NaN 对数据使用函数python12df = pd.DataFrame(np.random.rand(10,5),columns=list('ABCDE'))df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E 0 0.411040 0.192597 0.498276 0.629785 0.619616 1 0.845691 0.510586 0.299651 0.998108 0.304747 2 0.623651 0.208694 0.756371 0.460918 0.648548 3 0.345734 0.498705 0.809781 0.584406 0.679397 4 0.131337 0.700264 0.274539 0.606103 0.509637 5 0.849646 0.230177 0.805004 0.407902 0.625412 6 0.754866 0.470509 0.944374 0.740570 0.605332 7 0.179676 0.956882 0.886308 0.038653 0.694814 8 0.197512 0.464496 0.476800 0.682217 0.345192 9 0.215948 0.092079 0.023335 0.246493 0.971298 对每一列使用函数python1df.apply(np.mean) A 0.455510 B 0.432499 C 0.577444 D 0.539515 E 0.600399 dtype: float64 对每一行使用函数python1df.apply(np.mean, axis=1) 0 0.470263 1 0.591757 2 0.539636 3 0.583605 4 0.444376 5 0.583628 6 0.703130 7 0.551267 8 0.433243 9 0.309831 dtype: float64 数据的连接, 组合, 插入末尾拼接两个dataframepython12345678910df1 = pd.DataFrame(&#123;'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3'], 'C': ['C0', 'C1', 'C2', 'C3'], 'D': ['D0', 'D1', 'D2', 'D3']&#125;, index=[0, 1, 2, 3])df2 = pd.DataFrame(&#123;'A': ['A4', 'A5', 'A6', 'A7'], 'B': ['B4', 'B5', 'B6', 'B7'], 'C': ['C4', 'C5', 'C6', 'C7'], 'D': ['D4', 'D5', 'D6', 'D7']&#125;, index=[0, 1, 2, 3]) python1df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 A0 B0 C0 D0 1 A1 B1 C1 D1 2 A2 B2 C2 D2 3 A3 B3 C3 D3 python1df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 A4 B4 C4 D4 1 A5 B5 C5 D5 2 A6 B6 C6 D6 3 A7 B7 C7 D7 append只能拼接行 python1df1.append(df2) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 A0 B0 C0 D0 1 A1 B1 C1 D1 2 A2 B2 C2 D2 3 A3 B3 C3 D3 0 A4 B4 C4 D4 1 A5 B5 C5 D5 2 A6 B6 C6 D6 3 A7 B7 C7 D7 concat可以拼接列以及行,要注意index和column的重复 python1pd.concat([df1,df2],axis=0) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 A0 B0 C0 D0 1 A1 B1 C1 D1 2 A2 B2 C2 D2 3 A3 B3 C3 D3 0 A4 B4 C4 D4 1 A5 B5 C5 D5 2 A6 B6 C6 D6 3 A7 B7 C7 D7 python1pd.concat([df1,df2],axis=1) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D A B C D 0 A0 B0 C0 D0 A4 B4 C4 D4 1 A1 B1 C1 D1 A5 B5 C5 D5 2 A2 B2 C2 D2 A6 B6 C6 D6 3 A3 B3 C3 D3 A7 B7 C7 D7 按loc末尾直接加入行或列按loc大法只能拼一列或者一行到末尾 python1df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 A0 B0 C0 D0 1 A1 B1 C1 D1 2 A2 B2 C2 D2 3 A3 B3 C3 D3 python12df1.loc[5] = list('EFGH')df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 A0 B0 C0 D0 1 A1 B1 C1 D1 2 A2 B2 C2 D2 3 A3 B3 C3 D3 5 E F G H python12df1.loc[:,'E'] = list('EFGHI')df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E 0 A0 B0 C0 D0 E 1 A1 B1 C1 D1 F 2 A2 B2 C2 D2 G 3 A3 B3 C3 D3 H 5 E F G H I 两个dafaframe组合df1.join(df2) python12345678df1 = pd.DataFrame(&#123;'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']&#125;, index=['K0', 'K1', 'K0', 'K1']) df2 = pd.DataFrame(&#123;'C': ['C0', 'C1'], 'D': ['D0', 'D1']&#125;, index=['K0', 'K1']) python1df1.join(df2) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D K0 A0 B0 C0 D0 K0 A2 B2 C0 D0 K1 A1 B1 C1 D1 K1 A3 B3 C1 D1 插入特定行特定的行插入一个dataframe python123456df1 = pd.DataFrame(&#123;'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3']&#125;) df2 = pd.DataFrame(&#123;'A': ['C0', 'C1'], 'B': ['D0', 'D1']&#125;) python1df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 0 A0 B0 1 A1 B1 2 A2 B2 3 A3 B3 python1df2 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 0 C0 D0 1 C1 D1 定义一个在第n行后插入dataframe的函数 python1234567def insert_row(idx, df, df_insert): dfA = df.iloc[:idx, ] dfB = df.iloc[idx:, ] df = dfA.append(df_insert).append(dfB) return df python12df1_inserted = insert_row(2, df1, df2)df1_inserted .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B 0 A0 B0 1 A1 B1 0 C0 D0 1 C1 D1 2 A2 B2 3 A3 B3 插入特定列自带函数df.insert可在第n列插入一列新的数据 python1df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } C A B 0 A A0 B0 1 B A1 B1 2 C A2 B2 3 D A3 B3 python1df1.insert(1,'D', list('ABCD')) python1df1 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } C D A B 0 A A A0 B0 1 B B A1 B1 2 C C A2 B2 3 D D A3 B3 如果要在特定位置插入多列数据只能用这个 python1234567def insert_column(idx, df, df_insert): dfA = df.iloc[:,:idx] dfB = df.iloc[:,idx:] df = pd.concat([pd.concat([dfA, df_insert], axis=1),dfB], axis=1) return df python123456df1 = pd.DataFrame(&#123;'A': ['A0', 'A1', 'A2', 'A3'], 'B': ['B0', 'B1', 'B2', 'B3'], 'C': ['B0', 'B1', 'B2', 'B3']&#125;) df2 = pd.DataFrame(&#123;'D': ['B0', 'B1', 'B2', 'B3'], 'E': ['B0', 'B1', 'B2', 'B3']&#125;) python1insert_column(1, df1, df2) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A D E B C 0 A0 B0 B0 B0 B0 1 A1 B1 B1 B1 B1 2 A2 B2 B2 B2 B2 3 A3 B3 B3 B3 B3 利用groupby和条件增加列python12345df = pd.DataFrame(&#123;'A':np.array(['foo','foo','foo','foo','bar','bar']), 'B':np.array(['one','one','two','two','three','three']), 'C':np.array(['small','medium','large','large','small','small']), 'D':np.array([1,2,2,3,3,5])&#125;)df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 foo one small 1 1 foo one medium 2 2 foo two large 2 3 foo two large 3 4 bar three small 3 5 bar three small 5 python123def func(df): df['D_sum'] = df['D'].sum() return df python1df.groupby('D').apply(func) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D D_sum 0 foo one small 1 1 1 foo one medium 2 4 2 foo two large 2 4 3 foo two large 3 6 4 bar three small 3 6 5 bar three small 5 5 利用apply函数增加列python12345df = pd.DataFrame(&#123;'A':np.array(['foo','foo','foo','foo','bar','bar']), 'B':np.array(['one','one','two','two','three','three']), 'C':np.array(['small','medium','large','large','small','small']), 'D':np.array([1,2,2,3,3,5])&#125;)df .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D 0 foo one small 1 1 foo one medium 2 2 foo two large 2 3 foo two large 3 4 bar three small 3 5 bar three small 5 python12def func(a, b): return 1 if a=='foo' else 0 python1df.apply(lambda column: func(column['A'], column['B']), axis=1) 0 1 1 1 2 1 3 1 4 0 5 0 dtype: int64 python123def func(df): df['A_equal_foo'] = 1 if df['A']=='foo' else 0 return df python1df.apply(func, axis=1) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D A_equal_foo 0 foo one small 1 1 1 foo one medium 2 1 2 foo two large 2 1 3 foo two large 3 1 4 bar three small 3 0 5 bar three small 5 0 database式merge数据python1234&gt;&gt;&gt; df1 = pd.DataFrame(&#123;'lkey': ['foo', 'bar', 'baz', 'foo'],... 'value': [1, 2, 3, 5]&#125;)&gt;&gt;&gt; df2 = pd.DataFrame(&#123;'rkey': ['foo', 'bar', 'baz', 'foo'],... 'value': [5, 6, 7, 8]&#125;) python1df1.merge(df2, on='value',how='inner') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } lkey value rkey 0 foo 5 foo python1df1.merge(df2, on='value',how='outer') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } lkey value rkey 0 foo 1 NaN 1 bar 2 NaN 2 baz 3 NaN 3 foo 5 foo 4 NaN 6 bar 5 NaN 7 baz 6 NaN 8 foo python1df1.merge(df2, left_on='value', right_on='value',how='inner') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } lkey value rkey 0 foo 5 foo python1df1.merge(df2, left_on='value', right_on='value',how='outer') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } lkey value rkey 0 foo 1 NaN 1 bar 2 NaN 2 baz 3 NaN 3 foo 5 foo 4 NaN 6 bar 5 NaN 7 baz 6 NaN 8 foo python1df1.merge(df2, left_on='lkey', right_on='rkey') .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } lkey value_x rkey value_y 0 foo 1 foo 5 1 foo 1 foo 8 2 foo 5 foo 5 3 foo 5 foo 8 4 bar 2 bar 6 5 baz 3 baz 7 python1df1.merge(df2, left_on='lkey', right_on='rkey', suffixes=('_left', '_right')) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } lkey value_left rkey value_right 0 foo 1 foo 5 1 foo 1 foo 8 2 foo 5 foo 5 3 foo 5 foo 8 4 bar 2 bar 6 5 baz 3 baz 7 数据统计基本统计python12df = pd.DataFrame(np.random.rand(10,5),columns=list('ABCDE'))df.describe() .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E count 10.000000 10.000000 10.000000 10.000000 10.000000 mean 0.548176 0.581951 0.492730 0.362844 0.464692 std 0.269487 0.296894 0.344442 0.314646 0.205078 min 0.139214 0.152646 0.032955 0.003880 0.142789 25% 0.328505 0.284380 0.224993 0.093924 0.339452 50% 0.597528 0.747586 0.538701 0.325856 0.453823 75% 0.715508 0.819579 0.799554 0.563304 0.653605 max 0.964156 0.871106 0.920916 0.841107 0.703043 python1df.mean() # 得到数据框df中每一列的平均值 A 0.548176 B 0.581951 C 0.492730 D 0.362844 E 0.464692 dtype: float64 python1df.corr() # 得到数据框df中每一列与其他列的相关系数 .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } A B C D E A 1.000000 0.097622 -0.571543 0.364524 -0.083053 B 0.097622 1.000000 -0.058487 -0.347005 -0.603136 C -0.571543 -0.058487 1.000000 -0.369241 0.222586 D 0.364524 -0.347005 -0.369241 1.000000 0.232339 E -0.083053 -0.603136 0.222586 0.232339 1.000000 python1df.count() # 得到数据框df中每一列的非空值个数 A 10 B 10 C 10 D 10 E 10 dtype: int64 python1df.max() # 得到数据框df中每一列的最大值 A 0.964156 B 0.871106 C 0.920916 D 0.841107 E 0.703043 dtype: float64 python1df.min() # 得到数据框df中每一列的最小值 A 0.139214 B 0.152646 C 0.032955 D 0.003880 E 0.142789 dtype: float64 python1df.median() # 得到数据框df中每一列的中位数 A 0.597528 B 0.747586 C 0.538701 D 0.325856 E 0.453823 dtype: float64 python1df.std() # 得到数据框df中每一列的标准差 A 0.269487 B 0.296894 C 0.344442 D 0.314646 E 0.205078 dtype: float64 对所有值进行描述统计 python1df.stack().std(ddof=1) 0.2882311219915606 numpy求法, ddof是degree of freedom python1df.values.std(ddof=1) 0.2882311219915606 最大值索引每一列的最大值的索引 python1df.idxmax() A 8 B 3 C 2 D 1 E 9 dtype: int64 时间序列构建时间索引python12i = pd.date_range('20000101',periods=100)i[0:5] DatetimeIndex([&#39;2000-01-01&#39;, &#39;2000-01-02&#39;, &#39;2000-01-03&#39;, &#39;2000-01-04&#39;, &#39;2000-01-05&#39;], dtype=&#39;datetime64[ns]&#39;, freq=&#39;D&#39;) python1i.year[0:5] Int64Index([2000, 2000, 2000, 2000, 2000], dtype=&#39;int64&#39;) python1i.day[0:5] Int64Index([1, 2, 3, 4, 5], dtype=&#39;int64&#39;) python1i.month[0:5] Int64Index([1, 1, 1, 1, 1], dtype=&#39;int64&#39;) 转换时间格式通过整数序列来转换时间序列 python12345import pandas as pd&gt;&gt;&gt; i = pd.date_range('20000101',periods=100)&gt;&gt;&gt; df = pd.DataFrame(dict(year = i.year, month = i.month, day = i.day))time_series = df.year*10000 + df.month*100 + df.daytime_series 0 20000101 1 20000102 2 20000103 3 20000104 4 20000105 ... 95 20000405 96 20000406 97 20000407 98 20000408 99 20000409 Length: 100, dtype: int64 python1pd.to_datetime(time_series, format='%Y%m%d') 0 2000-01-01 1 2000-01-02 2 2000-01-03 3 2000-01-04 4 2000-01-05 ... 95 2000-04-05 96 2000-04-06 97 2000-04-07 98 2000-04-08 99 2000-04-09 Length: 100, dtype: datetime64[ns] 通过String来转换时间序列 python123df = df.astype(str)time_string = df.day + df.month + df.yeartime_string 0 112000 1 212000 2 312000 3 412000 4 512000 ... 95 542000 96 642000 97 742000 98 842000 99 942000 Length: 100, dtype: object python1pd.to_datetime(time_string, format=\"%d%m%Y\") 0 2000-01-01 1 2000-01-02 2 2000-01-03 3 2000-01-04 4 2000-01-05 ... 95 2000-04-05 96 2000-04-06 97 2000-04-07 98 2000-04-08 99 2000-04-09 Length: 100, dtype: datetime64[ns] 时间格式采样时间频率如下 B business day frequencyC custom business day frequency (experimental)D calendar day frequencyW weekly frequencyM month end frequencyBM business month end frequencyCBM custom business month end frequencyMS month start frequencyBMS business month start frequencyCBMS custom business month start frequencyQ quarter end frequencyBQ business quarter endfrequencyQS quarter start frequencyBQS business quarter start frequencyA year end frequencyBA business year end frequencyAS year start frequencyBAS business year start frequencyBH business hour frequencyH hourly frequencyT minutely frequencyS secondly frequencyL milliseondsU microsecondsN nanoseconds 原文链接：https://blog.csdn.net/qq_41996090/article/details/87555618 python12index = pd.date_range('1/1/2000', periods=9, freq='T')series = pd.Series(range(9), index=index) python1series 2000-01-01 00:00:00 0 2000-01-01 00:01:00 1 2000-01-01 00:02:00 2 2000-01-01 00:03:00 3 2000-01-01 00:04:00 4 2000-01-01 00:05:00 5 2000-01-01 00:06:00 6 2000-01-01 00:07:00 7 2000-01-01 00:08:00 8 Freq: T, dtype: int64 python1series.resample('3T').sum() 2000-01-01 00:00:00 3 2000-01-01 00:03:00 12 2000-01-01 00:06:00 21 Freq: 3T, dtype: int64 python1series.resample('3T', label='right', closed='right').sum() 2000-01-01 00:00:00 0 2000-01-01 00:03:00 6 2000-01-01 00:06:00 15 2000-01-01 00:09:00 15 Freq: 3T, dtype: int64 采样的频率 python1series.resample('10S').asfreq().head() 2000-01-01 00:00:00 0.0 2000-01-01 00:00:10 NaN 2000-01-01 00:00:20 NaN 2000-01-01 00:00:30 NaN 2000-01-01 00:00:40 NaN Freq: 10S, dtype: float64 自定义函数 python1import numpy as np python12def custom_resampler(array_like): return np.sum(array_like) + 5 python1series.resample('3T').apply(custom_resampler) 2000-01-01 00:00:00 8 2000-01-01 00:03:00 17 2000-01-01 00:06:00 26 Freq: 3T, dtype: int64","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"pandas","slug":"pandas","permalink":"https://yangxiongwiki.com/tags/pandas/"},{"name":"kesci","slug":"kesci","permalink":"https://yangxiongwiki.com/tags/kesci/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"kesci_notes","slug":"python/kesci-notes","permalink":"https://yangxiongwiki.com/categories/python/kesci-notes/"}]},{"title":"windows_10_tricks.md","date":"2020-01-14T16:06:00.000Z","path":"2020/01/14/random_notes/windows_10_tricks/","text":"windows10 小技巧https://baijiahao.baidu.com/s?id=1611688517160115695&amp;wfr=spider&amp;for=pc windows10 虚拟桌面https://baijiahao.baidu.com/s?id=1618114653250855544&amp;wfr=spider&amp;for=pc windows10 快捷键https://zhuanlan.zhihu.com/p/99240964?utm_source=wechat_session","tags":[{"name":"windows10","slug":"windows10","permalink":"https://yangxiongwiki.com/tags/windows10/"},{"name":"operation_system","slug":"operation-system","permalink":"https://yangxiongwiki.com/tags/operation-system/"}],"categories":[{"name":"random_notes","slug":"random-notes","permalink":"https://yangxiongwiki.com/categories/random-notes/"}]},{"title":"jupyter_notebook_notes","date":"2020-01-13T18:38:00.000Z","path":"2020/01/13/random_notes/jupyter_notebook_notes/","text":"jupyter 基础安装jupyter 如何顺利安装并开启conda kernels这个太坑了…需要如下安装:Code12345conda install jupyterconda install jupyter labconda install ipykernel conda install nb_condaconda install nb_conda_kernels另外的插件看下面. jupyter notebookjupyter notebook 幻灯片插件https://blog.csdn.net/blmoistawinde/article/details/85009603 https://blog.csdn.net/qq_27825451/article/details/85050496 jupyter notebook 插件https://www.wandouip.com/t5i186155/ jupyter notebook 神奇技巧https://www.zybuluo.com/hanxiaoyang/note/534296 jupyter notebook 魔法命令http://www.raincent.com/content-85-7795-2.html jupyter labjupyter lab安装https://blog.csdn.net/weixin_34355715/article/details/88670628 jupyter lab简介https://www.codercto.com/a/75771.html jupyter lab 技巧https://blog.csdn.net/weixin_37641832/article/details/94437445","tags":[{"name":"jupyter_notebook","slug":"jupyter-notebook","permalink":"https://yangxiongwiki.com/tags/jupyter-notebook/"}],"categories":[{"name":"random_notes","slug":"random-notes","permalink":"https://yangxiongwiki.com/categories/random-notes/"}]},{"title":"other people blogs","date":"2020-01-13T18:38:00.000Z","path":"2020/01/13/random_notes/other_people_blogs/","text":"幻灯片插件https://blog.csdn.net/blmoistawinde/article/details/85009603 https://blog.csdn.net/qq_27825451/article/details/85050496 jupyter 插件https://www.wandouip.com/t5i186155/ jupyter 神奇技巧https://www.zybuluo.com/hanxiaoyang/note/534296","tags":[{"name":"blogs","slug":"blogs","permalink":"https://yangxiongwiki.com/tags/blogs/"},{"name":"quant","slug":"quant","permalink":"https://yangxiongwiki.com/tags/quant/"}],"categories":[{"name":"random_notes","slug":"random-notes","permalink":"https://yangxiongwiki.com/categories/random-notes/"}]},{"title":"bilibili application statistics course notes","date":"2020-01-11T16:30:14.000Z","path":"2020/01/11/math/statistics/bilibili_application_statistics/","text":"简介：此笔记为bilibili 应用统计学 视频的学习笔记。 总体和样本 excel, spss 和 minitab数据搜集 图表 描述统计 描述统计软件操作 分布 假设检验 双样本检验 方差分析 线性回归 时间序列简介","tags":[{"name":"statistics","slug":"statistics","permalink":"https://yangxiongwiki.com/tags/statistics/"},{"name":"math","slug":"math","permalink":"https://yangxiongwiki.com/tags/math/"}],"categories":[{"name":"math","slug":"math","permalink":"https://yangxiongwiki.com/categories/math/"},{"name":"statistics","slug":"math/statistics","permalink":"https://yangxiongwiki.com/categories/math/statistics/"}]},{"title":"statistics links","date":"2020-01-06T20:28:00.000Z","path":"2020/01/06/math/statistics/statistics_links/","text":"应用统计学视频https://www.bilibili.com/video/av9051072 应用统计学课件https://www.docin.com/p-106804331.html?docfrom=rrela t分布理解http://www.360doc.com/content/18/0208/12/15930282_728577832.shtml t检验理解http://www.360doc.com/content/17/0523/18/40087574_656536995.shtml 区间估计和假设检验的关系https://wenku.baidu.com/view/aa7dee0fe87101f69e319545.html 一元线性回归的解释https://zhuanlan.zhihu.com/p/31668592?from_voters_page=true","tags":[{"name":"statistics","slug":"statistics","permalink":"https://yangxiongwiki.com/tags/statistics/"},{"name":"math","slug":"math","permalink":"https://yangxiongwiki.com/tags/math/"}],"categories":[{"name":"math","slug":"math","permalink":"https://yangxiongwiki.com/categories/math/"},{"name":"statistics","slug":"math/statistics","permalink":"https://yangxiongwiki.com/categories/math/statistics/"}]},{"title":"excel shortcut","date":"2020-01-06T18:28:00.000Z","path":"2020/01/06/excel/excel_shortcut/","text":"Excel populate blank cells with formulahttps://baijiahao.baidu.com/s?id=1611414376791124260&amp;wfr=spider&amp;for=pc","tags":[{"name":"excel","slug":"excel","permalink":"https://yangxiongwiki.com/tags/excel/"}],"categories":[{"name":"excel","slug":"excel","permalink":"https://yangxiongwiki.com/categories/excel/"}]},{"title":"excel数据分析笔记","date":"2019-12-26T02:18:14.000Z","path":"2019/12/25/excel/excel数据分析笔记/","text":"此笔记为excel数据分析功能详解 单因素方差分析意义：测试多列数据之间的差异显著度。差异主要指均值的差异。h0: 差异显著h1: 差异不显著 设置：输入区域为两列或多列数据 结果：结果为差异显著看f值&gt;f critp值&lt;0.05就说明很显著了 无重复双因素分析意义：测试多行及多列数据间的差异显著度。设置： 结果：行的p值0.05: 列差异不显著 可重复双因素分析意义:测试行和列对数据的影响显著度，以及行列之间的交互 设置： 结果：行和列的p值都很小，说明行间和列间差异都显著。交互作用p值很大，说明行列之间交互作用很小。 相关系数意义：测试两个样本之间的线性相关程度。值为-1到1。 设置: 结果：非常相关，0.688的相关度。 协方差意义：两个样本之间的相关度。 设置： 结果: 描述统计意义：单个样本的各项参数。 设置： 结果： 指数平滑意义:相当于股票指标的ema。 设置:每一行ema相当于（1 - 阻尼） 新数据 + 阻尼 上一个ema 结果： f检验， 双样本方差意义:测试两个样本方差的差异显著度。如果差异显著，之后t检验就最好用异方差t检验。否则就最好用等方差t检验。 设置： 结果：p值大于0.05，说明方差差异不是很显著。 傅里叶分析参考 https://zhuanlan.zhihu.com/p/49600107 直方图意义：自己设置间距，来画直方图 设置：接受区域就是要用自己写的间距。 结果：频率是按照 &lt;=每个间距的数据来统计的。比如下图中low_range ==3950的频率， 统计的是小于3950的数字总数。 移动平均意义：相当于股票的ma。 设置：间隔相当于几日均线。 结果: 随机数发生器意义：生成随机数 设置:变量个数为每次随机几个变量。随机数个数为生成几次。随机数基数就是seed。 结果:5 * 5 = 25个标准正态分布随机数 排位与百分比排位意义:排位 设置： 结果： 百分比排位为：小于该值的个数/（小于该值的个数+大于该值的个数） 回归意义：一元线性回归 或者 多元线性回归 线性回归设置： 结果： 详细解释： https://wenku.baidu.com/view/0996a441866fb84ae55c8d3c.html https://www.cnblogs.com/nick477931661/p/9113396.html https://blog.csdn.net/data_cola/article/details/87994083 抽样意义：从样本中抽n个值 设置： 结果： t-检验： 平均值的成对二样本分析意义： 成对二样本分析检验的是成对的两个数值的差异是否不等于零，所谓成对的数值，一般是同一个被访者进行两项测试产生的两个值，例如试饮两个口味的饮品给出的两个评分。 设置： 结果：p值小于0.05， t 值大于t双尾临界，所以差异显著。 t-检验： 双样本等方差假设意义： 这个是相对于成对二样本分析而言。用等方差还是异方差假设就是要用“方差齐性检验”方差齐性检验的原理，如果检验是显著的，说明两个独立总体方差不一样，这是用异方差假设，否则用等方差假设。 设置： 结果：p双尾很小，因此差异显著 t-检验： 双样本异方差假设意义： 异方差情况下的双样本t检验 设置： 结果：很接近双样本等方差t检验。差异也是显著。 z-检验： 双样本平均差检验意义：已知两个样本总体方差的情况下才用这个检验。 实际效果和t检验也差不多。 设置： 结果:p都等于0了，差异非常显著。和t检验结果类似。","tags":[{"name":"excel","slug":"excel","permalink":"https://yangxiongwiki.com/tags/excel/"},{"name":"statistics","slug":"statistics","permalink":"https://yangxiongwiki.com/tags/statistics/"}],"categories":[{"name":"excel","slug":"excel","permalink":"https://yangxiongwiki.com/categories/excel/"}]},{"title":"期货从业资格笔记","date":"2019-12-26T02:18:14.000Z","path":"2019/12/25/finance/basics/future/期货从业资格/","text":"简介： 此笔记为 233网校 期货从业资格视频教程笔记 期货的发展 特征功能 期货交易所期货结算结构期货公司期货投资者 期货合约 期货保证金当日无负债结算持仓限额强行平仓 期货交易流程 套期保值 期货投机期货套利 期权 外汇交易 外汇期货 外汇掉期 货币互换外汇期权利率期货 国债期货报价 国债期货运用 国债期货投机远期利率协议 股票指数 股指期货套期保值期货术语 期货行情图基本面 技术分析","tags":[{"name":"finance","slug":"finance","permalink":"https://yangxiongwiki.com/tags/finance/"},{"name":"future","slug":"future","permalink":"https://yangxiongwiki.com/tags/future/"}],"categories":[{"name":"finance","slug":"finance","permalink":"https://yangxiongwiki.com/categories/finance/"},{"name":"basics","slug":"finance/basics","permalink":"https://yangxiongwiki.com/categories/finance/basics/"},{"name":"future","slug":"finance/basics/future","permalink":"https://yangxiongwiki.com/categories/finance/basics/future/"}]},{"title":"matplotlib useful links","date":"2019-12-23T20:33:00.000Z","path":"2019/12/23/python/basics/matplotlib_useful_links/","text":"How to put the legend out of the plot https://stackoverflow.com/questions/4700614/how-to-put-the-legend-out-of-the-plot Setting a fixed size for points in legend https://stackoverflow.com/questions/24706125/setting-a-fixed-size-for-points-in-legend difference for image channels(RGB, BGR) for cv2 and matplotlib http://www.bogotobogo.com/python/OpenCV_Python/python_opencv3_matplotlib_rgb_brg_image_load_display_save.php add_axes-and-add_subplot https://github.com/supersheepbear/Notes_for_myself/wiki/add_axes-and-add_subplot","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"matplotlibs","slug":"matplotlibs","permalink":"https://yangxiongwiki.com/tags/matplotlibs/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"basics","slug":"python/basics","permalink":"https://yangxiongwiki.com/categories/python/basics/"}]},{"title":"useful links","date":"2019-12-23T19:30:00.000Z","path":"2019/12/23/python/basics/useful_links/","text":"Change jupyter notebook directory jupyter notebook —notebook-dir=C:\\my_python_project python文件夹的操作 https://www.cnblogs.com/zhoujie/archive/2013/04/10/python7.html python创建多级文件夹 http://www.111cn.net/phper/python/111575.html python pycharm常用快捷键https://www.jetbrains.com/help/pycharm/selecting-text-in-the-editor.html 多线程http://yangcongchufang.com/%E9%AB%98%E7%BA%A7python%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/python-process-thread.html https://firsh.me/2017/08/07/python-thread/ Python 多进程异常处理http://www.cnblogs.com/liujshi/p/6014521.html Python GIL锁http://cenalulu.github.io/python/gil-in-python/ Python 事件驱动https://www.jianshu.com/p/8301f1083d5e pycharm 大小写转换快捷键https://intellij-support.jetbrains.com/hc/en-us/community/posts/205837479-Key-shortcut-for-to-upper-to-lower","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"basics","slug":"python/basics","permalink":"https://yangxiongwiki.com/categories/python/basics/"}]},{"title":"tensorflow notes","date":"2019-12-23T19:28:00.000Z","path":"2019/12/23/python/basics/tensorflow_notes/","text":"layer shape can be found by:shape = (fc7.get_shape().as_list()[-1], fc8shape) Through this we can get layer output shape, and feed to the next layer tensorflow ConfigPrototf.ConfigProto()的参数log_device_placement=True : 是否打印设备分配日志allow_soft_placement=True ： 如果你指定的设备不存在，允许TF自动分配设备tf.ConfigProto(log_device_placement=True,allow_soft_placement=True) 控制GPU资源使用率allow growthconfig = tf.ConfigProto()config.gpu_options.allow_growth = Truesession = tf.Session(config=config, …)使用allow_growth option，刚一开始分配少量的GPU容量，然后按需慢慢的增加，由于不会释放内存，所以会导致碎片 per_process_gpu_memory_fractiongpu_options=tf.GPUOptions(per_process_gpu_memory_fraction=0.7)config=tf.ConfigProto(gpu_options=gpu_options)session = tf.Session(config=config, …)设置每个GPU应该拿出多少容量给进程使用，0.4代表 40%","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"tensorflow","slug":"tensorflow","permalink":"https://yangxiongwiki.com/tags/tensorflow/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"basics","slug":"python/basics","permalink":"https://yangxiongwiki.com/categories/python/basics/"}]},{"title":"期权36课笔记","date":"2019-12-13T00:19:14.000Z","path":"2019/12/12/finance/basics/option/期权36课笔记/","text":"简介： 此笔记为 期权36课 的读书笔记 基本概念期权属性 期权操作期权价值 期权价格平价关系 二项期权定价模型（美式期权定价）black-schole model (欧式期权定价) 隐含波动率与历史波动率季报，分红，对期权的影响 期权价格变化 买入/卖出 看涨/看跌期权对冲备兑看涨期权， 保护性看跌期权由做市商引发的思考 垂直期权组合 跨式组合 铁鹰策略日历策略，对角策略","tags":[{"name":"option","slug":"option","permalink":"https://yangxiongwiki.com/tags/option/"},{"name":"finance","slug":"finance","permalink":"https://yangxiongwiki.com/tags/finance/"}],"categories":[{"name":"finance","slug":"finance","permalink":"https://yangxiongwiki.com/categories/finance/"},{"name":"basics","slug":"finance/basics","permalink":"https://yangxiongwiki.com/categories/finance/basics/"},{"name":"option","slug":"finance/basics/option","permalink":"https://yangxiongwiki.com/categories/finance/basics/option/"}]},{"title":"pandas_useful_websites","date":"2019-04-02T23:38:00.000Z","path":"2019/04/02/python/basics/pandas_useful_websites/","text":"optimizing pandas looping speed:https://engineering.upside.com/a-beginners-guide-to-optimizing-pandas-code-for-speed-c09ef2c6a4d6 Fast, Flexible, Easy and Intuitive: How to Speed Up Your Pandas Projectshttps://realpython.com/fast-flexible-pandas/","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"pandas","slug":"pandas","permalink":"https://yangxiongwiki.com/tags/pandas/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"basics","slug":"python/basics","permalink":"https://yangxiongwiki.com/categories/python/basics/"}]},{"title":"python yaml load","date":"2019-04-02T23:38:00.000Z","path":"2019/04/02/python/basics/yaml_load/","text":"Load yaml to a nested dict structure, and then parse to a class.below is the code: python12345678910class Struct(object): def __init__(self, data): for name, value in data.items(): setattr(self, name, self._wrap(value)) def _wrap(self, value): if isinstance(value, (tuple, list, set, frozenset)): return type(value)([self._wrap(v) for v in value]) else: return Struct(value) if isinstance(value, dict) else value python123with open(r'c:\\Users\\uidn4064\\Desktop\\project_data_analysis\\FD69\\lab\\test.yaml') as stream: yaml_dict = yaml.load(stream) struct = Struct(yaml_dict)","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"yaml","slug":"yaml","permalink":"https://yangxiongwiki.com/tags/yaml/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"basics","slug":"python/basics","permalink":"https://yangxiongwiki.com/categories/python/basics/"}]},{"title":"CFA note chapter 2 - 数量分析","date":"2018-12-31T01:25:00.000Z","path":"2018/12/30/finance/cfa_level1/2_1_Time_Value_Of_Money/","text":"货币的时间价值利率的三种形式 要求回报率： 客户要求的回报率。 折现率，贴现率(discount rate)： 未来收益折算为现值。 机会成本(oppotunity cost): 失去的潜在收益。相同风险水平(identical risk)上的次优水平(next best)的收益率。 要求回报的构成 要求回报率 = 名义无风险利率 + 风险溢价 名义无风险利率 = 实际无风险利率 + 通货膨胀率 风险溢价 = 流动性风险溢价 + 违约风险溢价 + 期限风险溢价 有效年利率(EAR: effective annual rate)$EAR = (1 + r/n)^n -1$r是名义利率(nominal rate)。 n是一年内复利次数。 单笔现金流的现值和终值 FV: 终值 r: 利率 PV: 现值 n: 期数 终值计算：每年一次复利FV: $ FV = PV(1+r)^n $每年多次复利FV: $ FV_N = PV(1+\\frac{r}{m})^{mn} $连续复利FV: $ FV = PVe^{rn} $ 现值计算：$ PV = FV/(1+r)^{n} $此过程称为折现。此时r为折现率。 年金年金指一定时期内一系列相等金额的收付款项. 比如: 按揭贷款吗分期付款, 发放养老金, 支付租金, 提取折旧. A: 每年收付的金额 i: 每期利率 F: 年金终值 P: 年金现值 n: 期数 年金终值计算:$F = A \\left(\\frac{(1+i)^n - 1}{i} \\right)$年金现值计算$F = A \\left(\\frac{1-(1+i)^{-n}}{i} \\right)$先付年金(annuity due): 年初先给钱, 所以多算一个复利(1 + i)$F = A \\left(\\frac{(1+i)^{n+1} - 1}{i} - 1\\right)$递延年金: 第一次收款在第二期或者第二期之后永续年金: 无限期支付,只有现值没有终值.$P = \\frac{A}{i}$ 货币时间价值的应用 不等额现金流量终值和现值: 每年分开计算即可 分段年金流量: 同上 养老金: 同上 TI BA II计算器使用Todo 折现现金流方法的应用净现值和内部投资收益率 净现值(net present value, NPV)一项投资所产生的未来现金流的折现值和项目投资成本之间的差值.净现值为正即投资方案可行.$C0$: 当前成本$CF_t$ : 第t年的净收益值$NPV = PV - C_0 = \\sum{i=1}^{n} \\frac{CF_t}{(1+r)^t} $ 内部收益率(internal rate of return, IRR)能够使现金流入量的现值等于现金流出量现值的贴现率, 或者是使投资方案净现值为0的贴现率.$NPV = CF_0 + \\frac {CF_1}{(1 + IRR)^1} + \\frac {CF_2}{(1 + IRR)^2} + … + \\frac {CF_N}{(1 + IRR)^N} = 0$ 选择项目 独立项目(independent project)投资决策不受其他项目投资决策影响.不存在选项目问题. 就看是不是 NPV&gt;0, IRR&lt;收益率 互斥项目(mutually exclusive project)选择A项目就不能选择B.所以要选择NPV大的, IRR高的.如果相互矛盾, 就要选NPV大的, 因为IRR不能反映投资规模. 金融计算器计算NPV, IRRTodo 持有期收益(holding period return, HPR)某一投资工具持有一段时间所带来的总收益, 包括利息收入或股利收入和资本利得或损失.$P_t$: 第t年终值$ HPR = \\frac {P_1 - P_0 + CF_1}{P_0}$$P_1 - P_0$: 资本的升值$CF_1$: 净收益值, 红利 银行贴现收益率, 持有期收益率, 有效年利率和货币市场收益率 持有期收益率(holding period yield, HPY)$ HPY = Rt = \\frac {P_t - P{t-1} + CF_t}{P_t}$相当于t-1时刻到t时刻的HPR 有效年利率(effective annual yield, EAY)$ EAY = (1 + HPY)^{\\frac{365}{t}} - 1 $一般而言讨论金融产品收益率都是指年收益率 银行贴现收益率 (band discount yield)这是对于银行贴现证券而言的.P: 证券的购买价格F: 证券的票面价格t: 持有到期时间$r_{BD} = \\frac{F - P}{F}\\frac{360}{t}$ 货币市场收益率 (money market yield)相比于银行贴现收益率, 使用P作为分母, 更科学.$r_{MM} = \\frac{F - P}{P}\\frac{360}{t}$ 注意, $r_{MM}$是用的单利, 而且用了360天计算, 而EAY用了复利, 而且是365天计算!!这就是他们的区别!! 各值相互转换$EAY = (1 +HPY)^{\\frac{365}{t}} - 1$$HPY = \\frac {r{BD}(\\frac{t}{360})}{1 - r{BD}(\\frac{t}{360})}$推导:$r{BD} = \\frac{F-P}{F} =\\frac{ P_t + CF_t - P{t-1}}{P{t-1} + CF_t}\\times \\frac{360}{t} = \\frac {HPY}{1-HPY} \\times \\frac{360}{t}$=&gt; $HPY = \\frac {r{BD}(\\frac{t}{360})}{1 - r_{BD}(\\frac{t}{360})}$ $r{MM} = \\frac{F - P}{P} \\times \\frac{360}{t} = HPY \\times \\frac{360}{t} = \\frac{360 \\times r{BD}}{360 - t \\times r{BD}} = \\frac {r{BD}}{1 - t \\times \\frac{r_{BD}}{360}}$ 债券等价收益率(bond equivalend yield, BEY)P: 债券价格r: 半年期收益率M: 到期支付的本金C: 每次支付的利息n: 利息期数$ P = \\frac{C}{1+r} +\\frac{C}{(1+r)^2} +… +\\frac{C + M}{(1+r)^n}$求得r为半年期收益率, 而债券等价收益率 BEY = 2 r*美国要求必须这么算一年的单利!HPY 和 BEY, EAY可以相互转换$1 + HPY = (1 + \\frac{BEY}{2})^{2 \\times \\frac{t}{365}} = (1 + EAY)^{\\frac{t}{365}}$ 货币加权收益率和时间加权收益率 货币加权收益率(内部收益率) (money weighted rate of return)R_D : 货币加权收益率V_0 : 证券组合初始市场价值V_N: 证券组合的期末市场价值C_K: 自期间k内现金流入减去流出$ V_0 = \\frac{C_1}{1+ R_D} +\\frac{C_2}{(1+R_D)^2} +… +\\frac{C_N + V_N}{(1+R_D)^n}$货币加权收益率就是IRR 换了个理解方式而已 时间加权收益率(time-weighted rate of return)(几何收益率)Rr: 时间加权收益率R{Pk}: 子期间k的组合投资收益N: 评估期内的子期间数$ Rr = [(1 +R{P1})(1 +R{P2})…(1 +R{PN})]^{\\frac{1}{N}} - 1$ 数理统计基础基本概念","tags":[{"name":"finance","slug":"finance","permalink":"https://yangxiongwiki.com/tags/finance/"},{"name":"cfa","slug":"cfa","permalink":"https://yangxiongwiki.com/tags/cfa/"}],"categories":[{"name":"finance","slug":"finance","permalink":"https://yangxiongwiki.com/categories/finance/"},{"name":"cfa_level1","slug":"finance/cfa-level1","permalink":"https://yangxiongwiki.com/categories/finance/cfa-level1/"}]},{"title":"iterator and generator","date":"2018-12-24T10:03:00.000Z","path":"2018/12/24/python/basics/Iterator_and_generator/","text":"IterableA iterable is an object which implements the _iter_ method. __iter\\ has to implement yield statement. iterable conceptspython123456789101112131415from collections import abcfrom collections import Iterableclass IterableObjc: def __iter__(self): cont = 0 while cont &lt; 3: cont += 1 yield conta_iterable = IterableObjc()assert isinstance(a_iterable, abc.Iterable) # no exceptionassert isinstance(a_iterable, Iterable) # no exceptionabc.Iterable is Iterable # collection.Iterable is the same as a_iterable True ‘for’ syntax is able to be used for iterable. python1Iterable_instance = IterableObjc() python12for i in Iterable_instance: print(i) 1 2 3 Iterable could be also understood as any accepted object by iter() function. _getitem_() is another way to define a Iterable object.note: StopIteration() exception has to be raised in _getitem_() function, otherwise infinite loop will be triggered when ‘for’ syntax is used! python123456789101112class GetitemObjc: def __getitem__(self, item): cont = 0 while cont &lt;= item: cont += 1 if cont &gt;= 5: raise StopIteration() return conta_getitem = GetitemObjc()assert isinstance(a_getitem, abc.Iterable) # exception --------------------------------------------------------------------------- AssertionError Traceback (most recent call last) &lt;ipython-input-4-52f2bca5d0ef&gt; in &lt;module&gt;() 10 11 a_getitem = GetitemObjc() ---&gt; 12 assert isinstance(a_getitem, abc.Iterable) # exception AssertionError: Code1Getitem_instance &#x3D; GetitemObjc() python12for i in Getitem_instance: print(i) 1 2 3 4 ‘for’ syntaxHere is how for syntax works.for syntax is able to call iter() method for an iterable object, which transfers the iterable to a generator, and then call next(generator_object) until the StopIteration() exception is raised. ‘any’ syntaxany syntax checks if the iterable is not empty. python1any(Iterable_instance) True python1any(Getitem_instance) True python123456789class EmptyIterableObjc: def __iter__(self): cont = 0 while cont &lt; 0: cont += 1 yield contempty_iterable = EmptyIterableObjc()assert isinstance(empty_iterable, abc.Iterable) # no exception This iterable is not able to provide any iteration element, therefore any returns False. python1any(empty_iterable) False ‘list’ syntaxlist syntax is able to iterate through the iterable object, and add all the elements into a list. python1list(Iterable_instance) [1, 2, 3] Iterator Iterable is an object with _iter_ method Iterator is an object with both _iter_ and __next\\ methods A class with both iter and next methods is a iterator object. for or next() are able to be called for an iterator. python12345678910111213class IteratorObjc: def __init__(self): self.cont = 0 def __iter__(self): while self.cont &lt; 3: self.cont += 1 yield self.cont def __next__(self): while self.cont &lt; 3: self.cont += 1 return self.cont raise StopIteration() python1self_defined_generator = IteratorObjc() python12for i in self_defined_generator: print(i) 1 2 3 python1self_defined_generator = IteratorObjc() python1234print(next(self_defined_generator))print(next(self_defined_generator))print(next(self_defined_generator))print(next(self_defined_generator)) #raise stop iteration 1 2 3 --------------------------------------------------------------------------- StopIteration Traceback (most recent call last) &lt;ipython-input-59-042c29e8c989&gt; in &lt;module&gt;() 2 print(next(self_defined_generator)) 3 print(next(self_defined_generator)) ----&gt; 4 print(next(self_defined_generator)) #raise stop iteration &lt;ipython-input-55-75f8519e3c93&gt; in __next__(self) 11 self.cont += 1 12 return self.cont ---&gt; 13 raise StopIteration() 14 StopIteration: manual implementation of nextAn inheritant class from a iterable class, which implements next method will become an iterator.e.g: str is an iterable object but not an iterator. Here is a inheritant class from str class which implements next method. python12normal_string = 'abcde'next(normal_string) --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-60-7a029a4ee3bb&gt; in &lt;module&gt;() 1 normal_string = &#39;abcde&#39; ----&gt; 2 next(normal_string) TypeError: &#39;str&#39; object is not an iterator python1234567891011121314class IteratorStr(str): def __init__(self, string): super().__init__() self._count = 0 def __iter__(self): self._count = 0 return self def __next__(self): while self._count &lt; len(self): self._count += 1 return self.__getitem__(self._count - 1) raise StopIteration() python1iterator_string = IteratorStr('abcde') python123456print(next(iterator_string))print(next(iterator_string))print(next(iterator_string))print(next(iterator_string))print(next(iterator_string))print(next(iterator_string)) # raise StopIteration() exception a b c d e --------------------------------------------------------------------------- StopIteration Traceback (most recent call last) &lt;ipython-input-83-2fbad4156275&gt; in &lt;module&gt;() 4 print(next(iterator_string)) 5 print(next(iterator_string)) ----&gt; 6 print(next(iterator_string)) # raise StopIteration() exception &lt;ipython-input-75-a498191acf75&gt; in __next__(self) 12 self._count += 1 13 return self.__getitem__(self._count - 1) ---&gt; 14 raise StopIteration() StopIteration: Of course the for syntax is able to be used for an iterator python123iterator_string = IteratorStr('abcde')for i in iterator_string: print(i) a b c d e auto implementation of next by iter()python12normal_string = 'abcde'iterator_string = iter(normal_string) python123456print(next(iterator_string))print(next(iterator_string))print(next(iterator_string))print(next(iterator_string))print(next(iterator_string))print(next(iterator_string)) # raise StopIteration() exception a b c d e --------------------------------------------------------------------------- StopIteration Traceback (most recent call last) &lt;ipython-input-87-2fbad4156275&gt; in &lt;module&gt;() 4 print(next(iterator_string)) 5 print(next(iterator_string)) ----&gt; 6 print(next(iterator_string)) # raise StopIteration() exception StopIteration: python123iterator_string = IteratorStr('abcde')for i in iterator_string: print(i) a b c d e Generatorfunction with ‘yield’ syntax is called a generator function. python123def generator_function(): for i in range(3): yield i A generator function has to be ‘instantiated’. The syntax looks like the instance of the generator function. But actually it is creating a generator from the generator function yield statement. python1gen = generator_function() python1type(gen) generator python12for i in gen: print(i) 0 1 2 A generator will automatically have the _next_ method implemented python1gen = generator_function() python1234print(next(gen))print(next(gen))print(next(gen))print(next(gen)) # StopIteration() exception raised 0 1 2 --------------------------------------------------------------------------- StopIteration Traceback (most recent call last) &lt;ipython-input-16-648ef4ded63a&gt; in &lt;module&gt;() 2 print(next(gen)) 3 print(next(gen)) ----&gt; 4 print(next(gen)) # StopIteration() exception raised StopIteration: Advance materialPython中iteration(迭代)、iterator(迭代器)、generator(生成器)等相关概念的理解 python12","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"iterator","slug":"iterator","permalink":"https://yangxiongwiki.com/tags/iterator/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"basics","slug":"python/basics","permalink":"https://yangxiongwiki.com/categories/python/basics/"}]},{"title":"酒店营销的互联网模式思索","date":"2018-12-12T06:34:00.000Z","path":"2018/12/12/random_notes/internet_thinking_for_hotel_marketing/","text":"写在前面近来和一位做互联网营销的朋友聊天，忽然间发现到当今的中国互联网营销，已经到了无所不用其极的程度。上到支付宝的花呗宣传， 下到手机点餐app，返现app, 无时无刻不惊讶于身边五花八门的营销模式。互联网经济的有效性， 扩散性与精准性已然已经今非昔比， 说是领先全球那是绝不夸张。 回望传统营销行业比如酒店行业，互联网概念的覆盖面似乎还是微乎其微。传统营销由于各大酒店的同质性带来的竞争，让我们似乎不能脱颖而出。我认为最大两个的问题在于： 营销的同质如何区别于其他酒店？ 营销的有限客户群体如何把营销做给特定群体？ 互联网模式的尝试将会给这两个最大的问题带来无限可能。关于互联网模式的尝试， 相比于实际资本和现金流的投入， 我觉得在风险和消耗上是非常低的， 非常值得尝试。不同模式的尝试也会给营销带来不同的新鲜血液。 重要： 这篇文章是我的对于酒店营销的纸上谈兵， 很多想法可能不切实际， 希望有可能能起到一点点抛转引玉的作用。 俗话说术业有专攻， 隔行如隔山。 身在工程师和数据分析行业，我也深知自己与营销行业相隔甚远。 这篇随笔里不合理以及不专业之处，还望多多包涵。不恰当的脑补请忽略！ 奖励机制我想先谈谈自己总结的奖励机制。个人感觉这是最具吸引力也较为实惠的营销手段。我能想到的奖励机制都列举如下。每一种模式都有其优劣，我也给出自己的一些感受和评价。 打折。 高定价， 高折扣。模式较为传统， 吸引力不足 免费发放的优惠券模式较为传统， 吸引力不足 买多送一在某些商品营销中有刺激作用 每次消费达标即可返现。 一定数额的消费给与固定数额或百分比的返现。 例如： 100 返 15， 200 返 40。模式较为传统， 对于大批商品售卖有一定刺激 第一次消费高返现。 比如第一次吃饭， 返50%对于第一次消费的刺激有吸引力 会员模式，加入会员即可长期享受折扣， 或定期发放的福利和高折扣。对于特定行业，如果福利得当，对于保持某些营销的长期客户有积极作用 一定时间内（或不限时）再消费即返现的优惠券。在特定营销的二次消费刺激上感觉有吸引力 推荐模式。 推荐他人消费，每次推荐返还指定金额。或者帮助酒店宣传， 获得额外奖励！重点推荐！如今仍然吸引力较高， 属于消费外额外奖励。 比如花呗的推荐奖励机制 随机返现。 每次消费即可抽奖， 随机返现0% - 100%重点推荐！同样的返现金额， 平均每人返现固定数额的方式与抽奖模式相比吸引力相差甚远 我深知一些模式已经被我们应用， 比如在连锁酒店的二次消费返现。我想重点谈谈最后两项。 这里先说 每次消费即可抽奖， 随机返现0% - 100% 随机返现什么是随机返现这个想法来自于朋友在做的互联网平台：一指蟾官方网站他们主要的营销模式在于， 建立一个手机商家平台， 吸引各地商家入驻。在app中的指定商家消费， 每次即可获得0% - 100% 的返现。实际返现几率和金额由商家决定。不同于传统返现品台 例如 topcashback, 一指蟾中的商家是基于本地的。比如某特定一家肯德基加盟了这个平台， 用户并不是在所有肯德基都可以返现， 而是要去特定地点的肯德基才可以返现。也就是说客户群体是针对于某一特定区域的人。与传统的返现app相比， 这个概念被他们称为精准营销。 对于消费者而言， 相比于传统的每次10%或15%的反现，可能的（但是低概率的）0% -100% 返现会带来非常大的消费欲望刺激。试想每次入住， 都有几率可以免除房费（虽然大多数人都不会）， 这对于消费者而言是额外的奖励刺激。具体的奖励数值分配属于数学计算的范畴不做讨论。对于季节的奖励控制这里也不做讨论。据了解 目前加盟的商家都取得了非常的收益。 某些加盟前没有客户的餐饮商家甚至现在能够满座。 如何推广随机返现和我爸的交流中， 我深知如此模式推广的难度和障碍。现在我能想到的推广途径也是已有的途径： 微信公众号以及的推广中插入推广 携程的酒店描述或图片中加入（未知是否允许？） 酒店的网站和app中加入推广 入住客户对于此模式的推荐 我的想法是，在非旺季可适当提高返现抽奖（或其他物资奖励）的概率和数额。对于如何刺激入住客户对于此模式的推荐， 我想在下面的推荐章节详解。 推荐奖励什么是推荐奖励一指蟾官方网站对于这个平台的另一大特点， 其实也是互联网行业的一大手段即是推荐手段。推荐奖励字面意思即是老用户推荐新用户，或者用户帮助推广商家，获得奖励的模式。最近的例子比如花呗的推荐，上不封顶的推荐模式，是消费者额外的奖励。这也是利用了社交网络的传播原理。 1对1的推荐奖励我相信可能我们酒店对分销和推荐已有一些应用。我能想到的新点子是：对于随机返现，让已入住客户获得其推荐客户所获得的 ‘随机返现’的一部分。这种刺激模式可以使用户推荐也有了‘抽奖’的概念。我还是认为‘抽奖’ 的吸引力是无限的！能抽奖就抽奖 而不是平均分！具体的数字分配亦是数学问题， 总支出不一定高于固定奖励。 注意1对1推荐的唯一性， 保证了资金链可行性， 和与传销的区别。如果1对1推荐运用得当， 有可能会成为‘随机返现’ 和酒店本身最大的传播模式之一。 1对多的推荐奖励我一直感觉我们酒店的宣传非常有限。 我也看到了大家朋友圈的转发非常的频繁，我认为这其中最大的问题在于阅读用户群体及总数量我也见证了圣地映像公众号的发展，感觉大家朋友圈孜孜不倦的分享， 然而阅读人数还是非常有限， 以及对于新游客的普及面非常的低。1对多推荐模式也许是对此有可能的一个提升方式。 利用客户本身进行信息扩散。我能想到奖励式1对多推荐的目前有： 用户游记中加入‘圣地映像’给与特定奖励（抽奖？） 分享公众号的奖励机制 分享公众号文章朋友圈即可获得特定奖励或折扣 分享圣地映像app或者网站， 或者游记的奖励。 更多模式有待挖掘， 感觉利用客户进行奖励式分销非常有待于挖掘！ 酒店的风格基调和角色化我认为就酒店风格塑造而言， 装修上是非常成功的。但是我看了很多其他的酒店， 目前看来大多数酒店也有在装修里做出‘主题’的感觉。比如 稻城阿妈摄影主题酒店主题摄影 稻城亲爱的宅宅温泉民宿主题温泉 我们也叫主题客栈/酒店， 我们为什么叫圣地映像？ 映像在哪里？如何对酒店风格基调进行特质化， 以及加深客户印象？每个酒店能不能把‘圣地映像’的概念铺开？ 我能想到的可能方案包括： 故事化，场景化营销我们的圣地映像是精品主题酒店说起来有点土， 但是能不能把每个酒店刻画成一个角色，编一个故事？故事是一种沟通方式，也是品牌和产品人格化的象征，没有故事，不成品牌。写出一个好故事，真正地连接消费者内心深处属于人性本质的情感板块，这或许是营销意义上的一种回归。同时，角色感可以增强品牌形象的活力和有好感。可以为每个客户给与免费的酒店角色故事背景手册， 进行‘洗脑’。这个想法来源于目前最火的游戏： 英雄联盟角色背景故事设计师在对游戏中每个角色特点能力分化的同时， 投入精力进行了故事性的设计， 极大的加深了玩家对于每个角色的感情。其实我在这个游戏买什么角色都是看哪个故事写得好。 基于酒店的角色形象设计在对每个酒店进行角色化和故事化之后， 可以对每个酒店进行角色形象设计，并可以加入酒店图片中。（比如每幅图片的水印， 或者角标）。这样可以加强对于酒店角色化的强调。进而可以设计每层楼的故事， 每个房间的故事（当然时间和设计成本得考虑， 我就随便说说 -。- ）形象和图标设计对于去同质化应该是一个比较可行的选择。在公众号普及中可以以虚拟酒店角色的口吻进行， 会产生一定的亲切感。公众号的头像可采用角色化客户会感觉在读的过程中是在与某一个特定人物或角色进行交流。参考公众号： 狂言doggy 增加每个酒店主题的音乐选择， 突出主题特化 加强携程主页的图片非同质化， 突出‘主题‘。（我自己yy的， 可能不得行。。感觉是不是携程有规定？）下面对比携程主页第一的雪域温泉酒店， 我们的主页感觉没有特别突出的 ‘主题’ 优势？也许在酒店角色化和故事化之后可以吧元素加入图片中，不失为一个好选择 软广模式以下软广模式内容纯属脑补。。。我知道这个领域说比做容易，不当的地方请多多包涵。 广告 vs 非广告我认为目前公众号整体形象很像广告， 实质内容不够。公众号内容偏向于侧重于重复地，大方面介绍丹巴，稻城， 四姑娘山。如果可能的化， 推荐跳出定向宣传酒店的思维， 做成川西旅游攻略的公众号。我认为公众号的目的不应该在于， 吸引未知客户前往丹巴，稻城， 四姑娘山， 从而入住我们的酒店。这么做的问题在于： 老用户知道这是广告， 不会点进去看。会产生， 我去过了， 我不想看！ 或者我不想去这三个地方， 天天都是他们， 不想点进去！新用户也许不想去丹巴，稻城， 四姑娘山。 他们会问： 为什么要给我介绍这三个地方？ 我不想点击这个公众号！也许建立品牌形象，以及足够多地吸引潜在客户为标准也就是说如果做成川西旅游攻略，也许潜在客户短期内不会前往丹巴，稻城， 四姑娘山， 但是公众号会聚集大批量的潜在客户。 只要‘圣地映像’的品牌形象足够深入人心， 客户真的要来丹巴，稻城， 四姑娘山的时候， 在搜索我们几个旅游地点的酒店时， 会很自然地选我们。 整体基调整体形象基调不统一。 在逗比和高雅之间没有把握好品牌形象。我看了很多公众号文章，貌似这是一个普遍问题。 比如下面的图片， 文字和图片不太搭。推荐做成要么风格偏逗比， 要么偏高雅的形式， 更容易塑造一个整体形象。 文章形式如果真做成旅游公众号， 文章的可能模式可以改为以下的模式中的一个， 则更具特色！ 以介绍景点和路线为目标， 覆盖所有川西景点。公众号形象为旅游攻略普及。 凭借我爸我妈还有大家各位的旅游经历， 以游记形式把公众号做成旅游见闻和各地游记， 吸引潜在客户。公众号形象为旅者。 平台覆盖面我们的品牌文章数量不少， 但是平台覆盖面不够。客户在每天看各个平台的时候会思考， 我为什么要阅读这个内容？ 怎么判断这个不是广告？如今铺天盖地的平台文章，除了特别特色的外，非常容易被用户一扫而过。精力有限情况下， 可以一定程度上减少文章数量， 做成考虑覆盖更多平台的旅游攻略形式。利用我爸在多处旅游的优势， 建立完备的川西旅游攻略库， 以及当地名族特色宣传。如果“圣地映像”能够深入人心， 就可以做到以面盖点， 自然而然地吸引更多潜在客户。为此可能需要更多的平台， 比如 知乎， 豆瓣， 天涯。 可以复制粘贴， 但是精品可以以一代10 二次消费我知道客栈也有二次消费的概念。如何刺激消费， 我也没有太多的想法。 目前想的是， 在二次消费中也加入 随即返现， 推荐奖励 和 故事化 的 概念， 从互联网模式刺激消费。 微商也许可以加入计划之中，对于微商我不熟悉， 就不纸上谈兵了。总之核心一定还是去同质化， 以及足够的消费刺激。 就写到这里，还有其他想法的化，之后再增加随笔。","tags":[{"name":"hotel","slug":"hotel","permalink":"https://yangxiongwiki.com/tags/hotel/"}],"categories":[{"name":"random_notes","slug":"random-notes","permalink":"https://yangxiongwiki.com/categories/random-notes/"}]},{"title":"stock introduction","date":"2018-12-11T04:51:00.000Z","path":"2018/12/10/finance/basics/stock/stock_introduction/","text":"股票的性质 有价证券 要式证券 （必须具备所有条件） 证权证券 （就是说不是创造权利而是证明而已） 资本证券 （公司资本份额的证券化） 综合权利证券 （既不是物权证券: 直接财产支配权，也不是债权证券：公司对立的债权人） 股票的特征 收益性 风险性 流动性 永久性 参与性 股票的分类按股东权利 普通股票 蓝筹股 成长股 收入股 周期股 防守股 概念股 投机股 优先股票 注： 公司盈利和剩余财产分配顺序： 债权人, 优先股票，普通股票 按股东姓名 记名股票 不记名股票 注： 现在还有记名的？？ 按面额 有面额股票 （按数值） 无面额股票 (按比例) 注： 好像大多数都是无面额 股利政策，股份变动，股票资本管理股利政策 派现（分红， 直接送钱） 送股（每个人股数增加） 资本公积金转增股本 （每个人每股钱变多） 重要日期 股利宣布日（公布分红派息） 股权登记日（统计股利分配的股东的日期） 除息除权日 （股权登记日后面一天，这天以后买的股票就没得这期股利了） 派发日 （股利发放的日期） 股份变动 股票分割（拆细，拆股； 并股， 缩股， 不改变股东权益比重， 但是股价变化会刺激交易。 a 股不准） 增发（发行新股， 增加股票的发行量，更多的融资，“圈”更多的钱。 定向增发指向指定特定机构或个人增发。 ） 配股 （面向原有股东增发新股。同样是稀释股本圈钱） 转增股本 （资本公积金向股东转送股票， 其实是稀释股本， 在不拆股的情况下降低每股价格。） 普通股股东权利 公司重大决策参与权 公司资产收益权和剩余资产分配权 其他权利（主要是优先认股权）意思就是说增发的时候由于每股价格要变，股东就必须要做出反应免得就要亏。股东有优先权利来做以下决定： 优惠价来认购新股。被迫啊。 权利转让。卖了，老子不玩了。 不行使权力。 等死。按照股权登记日来划分‘附权股’， ‘含权股’， 和 ‘除权股’ 优先股股东权利什么是优先股？优先股是享有优先权的股票。优先股的股东对公司资产、利润分配等享有优先权，其风险较小。但是优先股股东对公司事务无表决权。 [1] 优先股股东没有选举及被选举权，一般来说对公司的经营没有参与权，优先股股东不能退股，只能通过优先股的赎回条款被公司赎回，但是能稳定分红的股份。所得无解释的股份。他的特点包括： 股息率固定 股息分派优先 剩余资产分配优先 一般无表决权 类似优先股的债券 可转债（但是细节不一样） 永续债券 （破产清算， 股息不一样） 优先股分类 累积优先股 （欠钱要补发） 非累积优先股 （每年结算， 公司钱不够就赖了） 参与优先股 （股息拿了还能分剩余盈利） 非参与优先股 （股息拿了不能分剩余盈利） 可转换优先股 （可转普通股或者其他品种） 不可转换优先股 （不能转） 可赎回优先股 不可赎回优先股 股息可调整优先股 股息固定优先股 强制分红优先股 非强制分红优先股 中国股票主体 国家股 法人股 社会公众股 外资股 境内上市外资股 （外资来投资的，b股） 境外上市外资股（境内公司境外募集资金，境外上市。 ） h股 港股外资股 n股 纽约外资股 l股 伦敦外资股 s股 新加坡外资股 注：红筹股不是外资股。 红筹股注册地在境外，上市在香港。 外资股注册地在国内！","tags":[{"name":"finance","slug":"finance","permalink":"https://yangxiongwiki.com/tags/finance/"},{"name":"stock","slug":"stock","permalink":"https://yangxiongwiki.com/tags/stock/"}],"categories":[{"name":"finance","slug":"finance","permalink":"https://yangxiongwiki.com/categories/finance/"},{"name":"basics","slug":"finance/basics","permalink":"https://yangxiongwiki.com/categories/finance/basics/"},{"name":"stock","slug":"finance/basics/stock","permalink":"https://yangxiongwiki.com/categories/finance/basics/stock/"}]},{"title":"boxeh basics","date":"2018-12-07T05:13:00.000Z","path":"2018/12/07/python/basics/bokeh_basics/","text":"Example of a simple line plothttp://bokeh.pydata.org/en/0.10.0/docs/reference/models/tools.html python123from bokeh.plotting import figure, show, output_filefrom bokeh.io import output_notebookoutput_notebook() &lt;div class=&quot;bk-root&quot;&gt; &lt;a href=&quot;https://bokeh.pydata.org&quot; target=&quot;_blank&quot; class=&quot;bk-logo bk-logo-small bk-logo-notebook&quot;&gt;&lt;/a&gt; &lt;span id=&quot;4443&quot;&gt;Loading BokehJS ...&lt;/span&gt; &lt;/div&gt; python1234567891011121314151617181920212223242526# prepare some datax = [1, 2, 3, 4, 5]y = [6, 7, 2, 4, 5]# output to static HTML fileoutput_file(\"lines.html\")TOOLS = \"hover, crosshair,pan,wheel_zoom,box_zoom,reset,save,box_select,lasso_select\"# create a new plot with a title and axis labelsp = figure(title=\"simple line example\", x_axis_label='x', y_axis_label='y', tools=TOOLS)# add a line renderer with legend and line thicknessp.line(x, y, legend=\"Temp.\", line_width=2)hover = p.select(dict(type=HoverTool))hover.tooltips = [ (\"index\", \"$index\"), (\"(x,y)\", \"($x, $y)\"),]hover.mode = 'vline'# show the resultsshow(p) Example of customizingpython1234567891011121314151617181920212223242526272829from bokeh.plotting import figure, output_file, show# prepare some datax = [0.1, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]y0 = [i**2 for i in x]y1 = [10**i for i in x]y2 = [10**(i**2) for i in x]# output to static HTML fileoutput_file(\"log_lines.html\")# create a new plotp = figure( tools=\"pan,box_zoom,reset,save\", y_axis_type=\"log\", y_range=[0.001, 10**11], title=\"log axis example\", #y_axis_type='sections', y_range=[0.001, 10**11], title=\"log axis example\", x_axis_label='sections', y_axis_label='particles')# add some renderersp.line(x, x, legend=\"y=x\")p.circle(x, x, legend=\"y=x\", fill_color=\"white\", size=8)p.line(x, y0, legend=\"y=x^2\", line_width=3)p.line(x, y1, legend=\"y=10^x\", line_color=\"red\")p.circle(x, y1, legend=\"y=10^x\", fill_color=\"red\", line_color=\"red\", size=6)p.line(x, y2, legend=\"y=10^x^2\", line_color=\"orange\", line_dash=\"4 4\")# show the resultsshow(p) Plot multiple figures togetherLinked panningpython1234567891011121314151617181920212223242526272829303132import numpy as npfrom bokeh.layouts import gridplotfrom bokeh.plotting import figure, output_file, show# prepare some dataN = 100x = np.linspace(0, 4*np.pi, N)y0 = np.sin(x)y1 = np.cos(x)y2 = np.sin(x) + np.cos(x)# output to static HTML fileoutput_file(\"linked_panning.html\")# create a new plots1 = figure(width=250, plot_height=250, title=None)s1.circle(x, y0, size=10, color=\"navy\", alpha=0.5)# NEW: create a new plot and share both rangess2 = figure(width=250, height=250, x_range=s1.x_range, y_range=s1.y_range, title=None)s2.triangle(x, y1, size=10, color=\"firebrick\", alpha=0.5)# NEW: create a new plot and share only one ranges3 = figure(width=250, height=250, x_range=s1.x_range, title=None)s3.square(x, y2, size=10, color=\"olive\", alpha=0.5)# NEW: put the subplots in a gridplotp = gridplot([[s1, s2, s3]], toolbar_location='right')# show the resultsshow(p) python12345678910111213141516171819202122232425262728293031323334353637383940414243import numpy as npfrom bokeh.plotting import *from bokeh.models import ColumnDataSourcefrom bokeh.models import HoverTool# prepare some dateN = 300x = np.linspace(0, 4*np.pi, N)y0 = np.sin(x)y1 = np.cos(x)# output to static HTML fileoutput_file(\"linked_brushing.html\")# NEW: create a column data source for the plots to sharesource = ColumnDataSource(data=dict(x=x, y0=y0, y1=y1))TOOLS = \"hover, crosshair,pan,wheel_zoom,box_zoom,reset,save,box_select,lasso_select\"# create a new plot and add a rendererleft = figure(tools=TOOLS, width=350, height=350, title=None)left.circle('x', 'y0', source=source)# create another new plot and add a rendererright = figure(tools=TOOLS, width=350, height=350, title=None)right.circle('x', 'y1', source=source)# put the subplots in a gridplotp = gridplot([[left, right]])#hover = p.select(dict(type=HoverTool))hover.tooltips = [ (\"index\", \"$index\"), (\"(x,y)\", \"($x, $y)\"), (\"radius\", \"@radius\"), (\"fill color\", \"$color[hex, swatch]:fill_color\"), (\"foo\", \"@foo\"), (\"bar\", \"@bar\"),]#hover.mode = 'mouse'# show the resultsshow(p)","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"boxeh","slug":"boxeh","permalink":"https://yangxiongwiki.com/tags/boxeh/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"basics","slug":"python/basics","permalink":"https://yangxiongwiki.com/categories/python/basics/"}]},{"title":"pandas frame creation and insertion","date":"2018-12-05T03:07:00.000Z","path":"2018/12/04/python/basics/pandas_frame_creation_and_insertion/","text":"Pandas frame creationCreate pandas frame using dictionaryUsing normal dictionary data structureNote that using the normal dictionary will not be able to ensure the order of columns in pandas frame. Example below: python1234import pandas as pdfrom tabulate import tabulatedef markdown_pd(df): print(tabulate(df, tablefmt=\"pipe\", headers=\"keys\", showindex=True)) python123new_dict = &#123;&#125;new_dict['foo'] = [1, 2, 3] new_dict['bar'] = [4, 5, 6] python1pdframe_normal_dict = pd.DataFrame(new_dict) python1markdown_pd(pdframe_normal_dict) bar foo 0 4 1 1 5 2 2 6 3 As you can see, the pandas frame does not have the order of columns that we want it to be.In order to make it the correct order, we have to do: python1pdframe_normal_dict.columns = ['foo', 'bar'] Because list has an order, now we can get: python1markdown_pd(pdframe_normal_dict ) foo bar 0 4 1 1 5 2 2 6 3 Using orderedDict data structurepython1from collections import OrderedDict Order dict has the order of the keys, so the pandas frame columns order will be ensured. python1order_dict = OrderedDict() python1order_dict['foo'] = [1, 2, 3] python1order_dict['bar'] = [4, 5, 6] python1order_dict OrderedDict([(&#39;foo&#39;, [1, 2, 3]), (&#39;bar&#39;, [4, 5, 6])]) python1pdframe_order_dict = pd.DataFrame(order_dict) python1markdown_pd(pdframe_order_dict) foo bar 0 1 4 1 2 5 2 3 6 As you can see, the order of column is what we want! Create pandas frame from listspython1import numpy as np Create a column list: [‘foo’, ‘bar’]Create a numpy array np.array([[1, 2, 3], [4, 5, 6]]) python1columns = ['foo', 'bar'] python1data = np.array([[1, 4], [2, 5], [3, 6]]) python1data.shape (3, 2) python1new_pdframe = pd.DataFrame(data=data, columns=columns) python1markdown_pd(new_pdframe) foo bar 0 1 4 1 2 5 2 3 6 insert columnunexplicit insert without defining column indexpython1markdown_pd(new_pdframe) foo bar 0 1 4 1 2 5 2 3 6 python1new_pdframe.loc[:, 'foz'] = [7, 8, 9] python1markdown_pd(new_pdframe) foo bar foz 0 1 4 7 1 2 5 8 2 3 6 9 in this case, the new column will be added at the most right of the data frame explicit insert with defining column indexLet’s try insert the new column in the middle python1new_pdframe = pd.DataFrame(data=data, columns=columns) python1markdown_pd(new_pdframe) foo bar 0 1 4 1 2 5 2 3 6 python1new_pdframe.insert(1,'foz', [7, 8, 9]) python1markdown_pd(new_pdframe) foo foz bar 0 1 7 4 1 2 8 5 2 3 9 6 Note that you still can insert the new column at the end by the corresponding index. python1new_pdframe = pd.DataFrame(data=data, columns=columns) python1markdown_pd(new_pdframe) foo bar 0 1 4 1 2 5 2 3 6 python1new_pdframe.insert(2,'foz', [7, 8, 9]) python1markdown_pd(new_pdframe) foo bar foz 0 1 4 7 1 2 5 8 2 3 6 9 insert rowInserting a row is not as easy as inserting a column In order to make it more clear, let’s set the index of the pandas frame to some new values instead of 0, 1, 2. python1new_pdframe = pd.DataFrame(data=data, columns=columns, index = ['a', 'b', 'c']) python1markdown_pd(new_pdframe) foo bar a 1 4 b 2 5 c 3 6 As you can see, now the indices are characters instead of numbers. insert by loc[new_index_value]by setting a new index value, the new row will be appended at the end of the dataframe.Note: the index must not be existing already! python1new_pdframe.index Index([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;], dtype=&#39;object&#39;) python1new_pdframe.loc['d'] = [4, 7] python1markdown_pd(new_pdframe) foo bar a 1 4 b 2 5 c 3 6 d 4 7 insert by appending a row in a specific index positionIn this case you wanna to insert a pandas frame, but to a specific position inside the pandas frame python1234567def insert_row(idx, df, df_insert): dfA = df.iloc[:idx, ] dfB = df.iloc[idx:, ] df = dfA.append(df_insert).append(dfB) return df python1new_pdframe = pd.DataFrame(data=data, columns=columns, index = ['a', 'b', 'c']) python1markdown_pd(new_pdframe) foo bar a 1 4 b 2 5 c 3 6 python1appended_pdframe = pd.DataFrame(data=np.array([[5, 5], [6, 6]]), columns=columns, index = ['d', 'e']) python1markdown_pd(appended_pdframe) foo bar d 5 5 e 6 6 Now let’s try adding it between b and c. python1updated_frame = insert_row(2, new_pdframe, appended_pdframe) python1markdown_pd(updated_frame) foo bar a 1 4 b 2 5 d 5 5 e 6 6 c 3 6 insert by pd.concatIn this case, the frame will be appended at the end of the frame. python1updated_frame = pd.concat([new_pdframe, appended_pdframe]) python1markdown_pd(updated_frame) foo bar a 1 4 b 2 5 c 3 6 d 5 5 e 6 6","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"pandas","slug":"pandas","permalink":"https://yangxiongwiki.com/tags/pandas/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"basics","slug":"python/basics","permalink":"https://yangxiongwiki.com/categories/python/basics/"}]},{"title":"magic methods","date":"2018-11-29T05:49:00.000Z","path":"2018/11/29/python/basics/magic_methods/","text":"Examples for function built-in method method explanation _doc_ The function’s documentation string, or Noneif unavailable; not inherited by subclasses Writable _name_ The function’s name Writable _qualname_ The function’s qualified nameNew in version 3.3. Writable _module_ The name of the module the function was defined in, or None if unavailable. Writable _defaults_ A tuple containing default argument values for those arguments that have defaults, or None if no arguments have a default value Writable _code_ The code object representing the compiled function body. Writable _globals_ A reference to the dictionary that holds the function’s global variables — the global namespace of the module in which the function was defined. Read-only _dict_ The namespace supporting arbitrary function attributes. Writable _closure_ None or a tuple of cells that contain bindings for the function’s free variables. See below for information on the cell_contents attribute. Read-only python1234def myfunction(arg1 = 1): \"\"\" My function example\"\"\" # test string test = 'test_string' python1myfunction.__doc__ &#39; My function example&#39; python1myfunction.__name__ &#39;myfunction&#39; python1myfunction.__qualname__ &#39;myfunction&#39; python1myfunction.__module__ &#39;__main__&#39; python1myfunction.__defaults__ (1,) python1myfunction.__code__ &lt;code object myfunction at 0x0000020E0443AB70, file &quot;&lt;ipython-input-1-d45fff7bc581&gt;&quot;, line 1&gt; python1myfunction.__dict__ {} python1myfunction.__closure__ Examples for class built-in methodpython1234567891011121314151617class MyClass(object): ''' My class example''' def __init__ (self): self.a = 0 self.b = 'test' def __new__(cls): print('Creating new instance') return super(MyClass, cls).__new__(MyClass) def __del__(self): print('Deleting instance') def __str__(self): return 'Ass hole class' def __getattr__(self, attr): print('No such attribute!') raise AttributeError def __setattr__(self, attr, value): self.__dict__[attr] = 1 Class methods:python1dir(MyClass) [&#39;__class__&#39;, &#39;__del__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattr__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;] python1MyClass.__class__ type python1MyClass.__bases__ (object,) python1MyClass.__dict__ mappingproxy({&#39;__module__&#39;: &#39;__main__&#39;, &#39;__doc__&#39;: &#39; My class example&#39;, &#39;__init__&#39;: &lt;function __main__.MyClass.__init__(self)&gt;, &#39;__new__&#39;: &lt;staticmethod at 0x20e045c0be0&gt;, &#39;__del__&#39;: &lt;function __main__.MyClass.__del__(self)&gt;, &#39;__str__&#39;: &lt;function __main__.MyClass.__str__(self)&gt;, &#39;__getattr__&#39;: &lt;function __main__.MyClass.__getattr__(self, attr)&gt;, &#39;__setattr__&#39;: &lt;function __main__.MyClass.__setattr__(self, attr, value)&gt;, &#39;__dict__&#39;: &lt;attribute &#39;__dict__&#39; of &#39;MyClass&#39; objects&gt;, &#39;__weakref__&#39;: &lt;attribute &#39;__weakref__&#39; of &#39;MyClass&#39; objects&gt;}) Instance methods:python1test_instance = MyClass() Creating new instance python1dir(test_instance) [&#39;__class__&#39;, &#39;__del__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattr__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;a&#39;, &#39;b&#39;] python1test_instance.__dict__ {&#39;a&#39;: 1, &#39;b&#39;: 1} python1test_instance.__doc__ &#39; My class example&#39; python1test_instance.__init__.__code__ &lt;code object __init__ at 0x0000020E044FD8A0, file &quot;&lt;ipython-input-31-5e1debc8af67&gt;&quot;, line 3&gt; python1test_instance.__setattr__.__doc__ Note: _del_() is NOT directly called when deleting instance. It has to be called eplicitely! python1test_instance.__del__() Deleting instance python1print(test_instance) Ass hole class python1test_instance.__str__() &#39;Ass hole class&#39; The correspondence between operator symbols and method names is as follows:Code123456x&lt;y calls x.__lt__(y),x&lt;&#x3D;y calls x.__le__(y),x&#x3D;&#x3D;y calls x.__eq__(y),x!&#x3D;y calls x.__ne__(y),x&gt;y calls x.__gt__(y),and x&gt;&#x3D;y calls x.__ge__(y). python123456object.__lt__(self, other)object.__le__(self, other)object.__eq__(self, other)object.__ne__(self, other)object.__gt__(self, other)object.__ge__(self, other) _getattr_(self, attr) only gets called when attribute is not found python1test_instance.d No such attribute! --------------------------------------------------------------------------- AttributeError Traceback (most recent call last) &lt;ipython-input-45-4c7135cdd908&gt; in &lt;module&gt; ----&gt; 1 test_instance.d &lt;ipython-input-31-5e1debc8af67&gt; in __getattr__(self, attr) 13 def __getattr__(self, attr): 14 print(&#39;No such attribute!&#39;) ---&gt; 15 raise AttributeError 16 def __setattr__(self, attr, value): 17 self.__dict__[attr] = 1 AttributeError: python1test_instance.a 1 _setattr_ will do things when setting a value. python1test_instance.d = 4 python1test_instance.d 1","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"built-in_methods","slug":"built-in-methods","permalink":"https://yangxiongwiki.com/tags/built-in-methods/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"basics","slug":"python/basics","permalink":"https://yangxiongwiki.com/categories/python/basics/"}]},{"title":"python exception basics","date":"2018-11-28T03:07:00.000Z","path":"2018/11/27/python/basics/exception_basics/","text":"Catch built-in type exceptionssimple non-inspect exceptionFor the following example, ‘myfile.txt’ does not exist. Therfore, the exception will trigger the code that is defined under the except block. Code will not stop but continue. The code under try block will be just ignored. Example below: python1234567try: f = open('myfile.txt')except Exception as e: print(\"Unexpected error:\", sys.exc_info()) print(e.__class__) print(e.__str__())print(\"code continues\") Unexpected error: (&lt;class &#39;FileNotFoundError&#39;&gt;, FileNotFoundError(2, &#39;No such file or directory&#39;), &lt;traceback object at 0x0000022951A150C8&gt;) &lt;class &#39;FileNotFoundError&#39;&gt; [Errno 2] No such file or directory: &#39;myfile.txt&#39; code continues The sys.excinfo() will have the exit information for what class the exception is. The format is: type, value, object The e._class\\ and e.__str()__are exception class methods which contain the exception class name and printing out information. The print out of ‘code continues’ indicates that the try block code is ignored and program does not exit.I would think this type of exception handling will be used for the main function only, as any other exception which we don’t want to handle by ourselves has no need to have additional logic. Example below: python123456def main(): try: create_logdir() except Exception as e logging.exception(e) raise raise an exception intentionallyBy raising the exception, the correspoding method of build-in exception will be called. IDE will stop and not run the remaining code. python12raise NameError('HiThere')print('Continue code') --------------------------------------------------------------------------- NameError Traceback (most recent call last) &lt;ipython-input-17-ecb1af770a0f&gt; in &lt;module&gt;() ----&gt; 1 raise NameError(&#39;HiThere&#39;) 2 print(&#39;Continue code&#39;) NameError: HiThere If putting a raise at the bottom, after the execution of the code you define, the handler method from above exception object method will be triggered. See below. python123456try: f = open('myfile.txt')except Exception: print(\"Unexpected error:\", sys.exc_info()) raiseprint(\"code continues\") Unexpected error: (&lt;class &#39;FileNotFoundError&#39;&gt;, FileNotFoundError(2, &#39;No such file or directory&#39;), &lt;traceback object at 0x000001E05FC58D48&gt;) --------------------------------------------------------------------------- FileNotFoundError Traceback (most recent call last) &lt;ipython-input-18-bc5f8ae109ca&gt; in &lt;module&gt;() 1 try: ----&gt; 2 f = open(&#39;myfile.txt&#39;) 3 except Exception: 4 print(&quot;Unexpected error:&quot;, sys.exc_info()) 5 raise FileNotFoundError: [Errno 2] No such file or directory: &#39;myfile.txt&#39; If you want to simply print or log the message for the exception, you can print or log the exception object.The string that is printed out is the return from_str_ build-in method.Again, the raise at the bottom of except block will make sure the exception instance handler is called. python1234567try: f = open('myfile.txt')except Exception as e: print(\"Unexpected error:\", e) print(\"Unexpected error:\",e.__str__()) raiseprint(\"code continues\") Unexpected error: [Errno 2] No such file or directory: &#39;myfile.txt&#39; Unexpected error: [Errno 2] No such file or directory: &#39;myfile.txt&#39; --------------------------------------------------------------------------- FileNotFoundError Traceback (most recent call last) &lt;ipython-input-16-b337c26a5c69&gt; in &lt;module&gt;() 1 try: ----&gt; 2 f = open(&#39;myfile.txt&#39;) 3 except Exception as e: 4 print(&quot;Unexpected error:&quot;, e) 5 print(&quot;Unexpected error:&quot;,e.__str__()) FileNotFoundError: [Errno 2] No such file or directory: &#39;myfile.txt&#39; specify special handling for each exception typeBelow is an example of catching different built-in type of exceptions. python12345678910111213try: f = open('myfile.txt') s = f.readline() i = int(s.strip())except OSError as err: print(\"OS error: &#123;0&#125;\".format(err)) raiseexcept ValueError: print(\"Could not convert data to an integer.\") raiseexcept: print(\"Unexpected error:\", sys.exc_info()[0]) raise OS error: [Errno 2] No such file or directory: &#39;myfile.txt&#39; --------------------------------------------------------------------------- FileNotFoundError Traceback (most recent call last) &lt;ipython-input-70-778921e79d26&gt; in &lt;module&gt;() 1 try: ----&gt; 2 f = open(&#39;myfile.txt&#39;) 3 s = f.readline() 4 i = int(s.strip()) 5 except OSError as err: FileNotFoundError: [Errno 2] No such file or directory: &#39;myfile.txt&#39; Custom ExceptionI would use custom exception to define API errors that are not inclued in python built-in exceptions. Example below. python1234567class FileTypeError(Exception): def __init__(self): # log something here Exception.__init__(self,\"well, you type is wrong, isn't it?\")some_condition = Trueif (some_condition): raise FileTypeError --------------------------------------------------------------------------- FileTypeError Traceback (most recent call last) &lt;ipython-input-95-1a7136f7f775&gt; in &lt;module&gt;() 5 some_condition = True 6 if (some_condition): ----&gt; 7 raise FileTypeError FileTypeError: well, you type is wrong, isn&#39;t it?","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"exception","slug":"exception","permalink":"https://yangxiongwiki.com/tags/exception/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"basics","slug":"python/basics","permalink":"https://yangxiongwiki.com/categories/python/basics/"}]},{"title":"class attribute","date":"2018-11-19T06:42:24.000Z","path":"2018/11/19/python/basics/class_attribute/","text":"Here is an understanding of class attribute.It is so easy to mess up between class attribute and instance attribute. Below is a very good example between the two concepts. python1234567891011121314class InstanceCounter(object): count = 0 def __init__(self,value): self.value = value InstanceCounter.count += 1a = InstanceCounter(5)b = InstanceCounter(10)c = InstanceCounter(15)for obj in (a, b, c): print(\"Instance attribute value: &#123;&#125;\".format(obj.value)) print(\"Instance attribute value: &#123;&#125;\".format(InstanceCounter.count)) Instance attribute value: 5 Instance attribute value: 3 Instance attribute value: 10 Instance attribute value: 3 Instance attribute value: 15 Instance attribute value: 3 As we can see, the class attribute InstanceCounter.count incremented after each instantiate of a new object. The trick is that, python treats everything as an ‘object.’. Not only an instance of class is an object, but the class itself is also an object. ‘class InstanceCounter(object)’ means instantiating a ‘class’ type object named InstanceCounter Let us print the methods of the InstanceCounter: python1print(InstanceCounter) &lt;class &#39;__main__.InstanceCounter&#39;&gt; python1print(dir(InstanceCounter)) [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;count&#39;] Clearyly, InstanceCounter is also an object. python1234class Datastorage(object): a = 0 b = 1 c = 2 According to this concept, the class attribute will normally be used as static variables among all the instances.","tags":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/tags/python/"},{"name":"oop","slug":"oop","permalink":"https://yangxiongwiki.com/tags/oop/"}],"categories":[{"name":"python","slug":"python","permalink":"https://yangxiongwiki.com/categories/python/"},{"name":"basics","slug":"python/basics","permalink":"https://yangxiongwiki.com/categories/python/basics/"}]}]}